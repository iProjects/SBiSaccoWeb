//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Persons data access component. Manages CRUD operations for the Persons table.
    /// </summary>
    public partial class PersonDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Persons table.
        /// </summary>
        /// <param name="person">A Person object.</param>
        /// <returns>An updated Person object.</returns>
        public Person Create(Person person)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Persons ([id], [first_name], [sex], [identification_data], [last_name], [birth_date], [household_head], [nb_of_dependents], [nb_of_children], [children_basic_education], [livestock_number], [livestock_type], [landplot_size], [home_size], [home_time_living_in], [capital_other_equipments], [activity_id], [experience], [nb_of_people], [monthly_income], [monthly_expenditure], [comments], [image_path], [father_name], [birth_place], [nationality], [study_level], [SS], [CAF], [housing_situation], [bank_situation], [handicapped], [professional_experience], [professional_situation], [first_contact], [family_situation], [mother_name], [povertylevel_childreneducation], [povertylevel_economiceducation], [povertylevel_socialparticipation], [povertylevel_healthsituation], [unemployment_months], [first_appointment], [loan_officer_id]) " +
                "VALUES(@id, @first_name, @sex, @identification_data, @last_name, @birth_date, @household_head, @nb_of_dependents, @nb_of_children, @children_basic_education, @livestock_number, @livestock_type, @landplot_size, @home_size, @home_time_living_in, @capital_other_equipments, @activity_id, @experience, @nb_of_people, @monthly_income, @monthly_expenditure, @comments, @image_path, @father_name, @birth_place, @nationality, @study_level, @SS, @CAF, @housing_situation, @bank_situation, @handicapped, @professional_experience, @professional_situation, @first_contact, @family_situation, @mother_name, @povertylevel_childreneducation, @povertylevel_economiceducation, @povertylevel_socialparticipation, @povertylevel_healthsituation, @unemployment_months, @first_appointment, @loan_officer_id);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, person.id);
                db.AddInParameter(cmd, "@first_name", DbType.String, person.first_name);
                db.AddInParameter(cmd, "@sex", DbType.AnsiStringFixedLength, person.sex);
                db.AddInParameter(cmd, "@identification_data", DbType.String, person.identification_data);
                db.AddInParameter(cmd, "@last_name", DbType.String, person.last_name);
                db.AddInParameter(cmd, "@birth_date", DbType.DateTime, person.birth_date);
                db.AddInParameter(cmd, "@household_head", DbType.Boolean, person.household_head);
                db.AddInParameter(cmd, "@nb_of_dependents", DbType.Int32, person.nb_of_dependents);
                db.AddInParameter(cmd, "@nb_of_children", DbType.Int32, person.nb_of_children);
                db.AddInParameter(cmd, "@children_basic_education", DbType.Int32, person.children_basic_education);
                db.AddInParameter(cmd, "@livestock_number", DbType.Int32, person.livestock_number);
                db.AddInParameter(cmd, "@livestock_type", DbType.String, person.livestock_type);
                db.AddInParameter(cmd, "@landplot_size", DbType.Double, person.landplot_size);
                db.AddInParameter(cmd, "@home_size", DbType.Double, person.home_size);
                db.AddInParameter(cmd, "@home_time_living_in", DbType.Int32, person.home_time_living_in);
                db.AddInParameter(cmd, "@capital_other_equipments", DbType.String, person.capital_other_equipments);
                db.AddInParameter(cmd, "@activity_id", DbType.Int32, person.activity_id);
                db.AddInParameter(cmd, "@experience", DbType.Int32, person.experience);
                db.AddInParameter(cmd, "@nb_of_people", DbType.Int32, person.nb_of_people);
                db.AddInParameter(cmd, "@monthly_income", DbType.Currency, person.monthly_income);
                db.AddInParameter(cmd, "@monthly_expenditure", DbType.Currency, person.monthly_expenditure);
                db.AddInParameter(cmd, "@comments", DbType.String, person.comments);
                db.AddInParameter(cmd, "@image_path", DbType.String, person.image_path);
                db.AddInParameter(cmd, "@father_name", DbType.String, person.father_name);
                db.AddInParameter(cmd, "@birth_place", DbType.String, person.birth_place);
                db.AddInParameter(cmd, "@nationality", DbType.String, person.nationality);
                db.AddInParameter(cmd, "@study_level", DbType.String, person.study_level);
                db.AddInParameter(cmd, "@SS", DbType.String, person.SS);
                db.AddInParameter(cmd, "@CAF", DbType.String, person.CAF);
                db.AddInParameter(cmd, "@housing_situation", DbType.String, person.housing_situation);
                db.AddInParameter(cmd, "@bank_situation", DbType.String, person.bank_situation);
                db.AddInParameter(cmd, "@handicapped", DbType.Boolean, person.handicapped);
                db.AddInParameter(cmd, "@professional_experience", DbType.String, person.professional_experience);
                db.AddInParameter(cmd, "@professional_situation", DbType.String, person.professional_situation);
                db.AddInParameter(cmd, "@first_contact", DbType.DateTime, person.first_contact);
                db.AddInParameter(cmd, "@family_situation", DbType.String, person.family_situation);
                db.AddInParameter(cmd, "@mother_name", DbType.String, person.mother_name);
                db.AddInParameter(cmd, "@povertylevel_childreneducation", DbType.Int32, person.povertylevel_childreneducation);
                db.AddInParameter(cmd, "@povertylevel_economiceducation", DbType.Int32, person.povertylevel_economiceducation);
                db.AddInParameter(cmd, "@povertylevel_socialparticipation", DbType.Int32, person.povertylevel_socialparticipation);
                db.AddInParameter(cmd, "@povertylevel_healthsituation", DbType.Int32, person.povertylevel_healthsituation);
                db.AddInParameter(cmd, "@unemployment_months", DbType.Int32, person.unemployment_months);
                db.AddInParameter(cmd, "@first_appointment", DbType.DateTime, person.first_appointment);
                db.AddInParameter(cmd, "@loan_officer_id", DbType.Int32, person.loan_officer_id);

                db.ExecuteNonQuery(cmd);
            }

            return person;
        }

        /// <summary>
        /// Updates an existing row in the Persons table.
        /// </summary>
        /// <param name="person">A Person entity object.</param>
        public void UpdateById(Person person)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Persons " +
                "SET " +
                    "[first_name]=@first_name, " +
                    "[sex]=@sex, " +
                    "[identification_data]=@identification_data, " +
                    "[last_name]=@last_name, " +
                    "[birth_date]=@birth_date, " +
                    "[household_head]=@household_head, " +
                    "[nb_of_dependents]=@nb_of_dependents, " +
                    "[nb_of_children]=@nb_of_children, " +
                    "[children_basic_education]=@children_basic_education, " +
                    "[livestock_number]=@livestock_number, " +
                    "[livestock_type]=@livestock_type, " +
                    "[landplot_size]=@landplot_size, " +
                    "[home_size]=@home_size, " +
                    "[home_time_living_in]=@home_time_living_in, " +
                    "[capital_other_equipments]=@capital_other_equipments, " +
                    "[activity_id]=@activity_id, " +
                    "[experience]=@experience, " +
                    "[nb_of_people]=@nb_of_people, " +
                    "[monthly_income]=@monthly_income, " +
                    "[monthly_expenditure]=@monthly_expenditure, " +
                    "[comments]=@comments, " +
                    "[image_path]=@image_path, " +
                    "[father_name]=@father_name, " +
                    "[birth_place]=@birth_place, " +
                    "[nationality]=@nationality, " +
                    "[study_level]=@study_level, " +
                    "[SS]=@SS, " +
                    "[CAF]=@CAF, " +
                    "[housing_situation]=@housing_situation, " +
                    "[bank_situation]=@bank_situation, " +
                    "[handicapped]=@handicapped, " +
                    "[professional_experience]=@professional_experience, " +
                    "[professional_situation]=@professional_situation, " +
                    "[first_contact]=@first_contact, " +
                    "[family_situation]=@family_situation, " +
                    "[mother_name]=@mother_name, " +
                    "[povertylevel_childreneducation]=@povertylevel_childreneducation, " +
                    "[povertylevel_economiceducation]=@povertylevel_economiceducation, " +
                    "[povertylevel_socialparticipation]=@povertylevel_socialparticipation, " +
                    "[povertylevel_healthsituation]=@povertylevel_healthsituation, " +
                    "[unemployment_months]=@unemployment_months, " +
                    "[first_appointment]=@first_appointment, " +
                    "[loan_officer_id]=@loan_officer_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@first_name", DbType.String, person.first_name);
                db.AddInParameter(cmd, "@sex", DbType.AnsiStringFixedLength, person.sex);
                db.AddInParameter(cmd, "@identification_data", DbType.String, person.identification_data);
                db.AddInParameter(cmd, "@last_name", DbType.String, person.last_name);
                db.AddInParameter(cmd, "@birth_date", DbType.DateTime, person.birth_date);
                db.AddInParameter(cmd, "@household_head", DbType.Boolean, person.household_head);
                db.AddInParameter(cmd, "@nb_of_dependents", DbType.Int32, person.nb_of_dependents);
                db.AddInParameter(cmd, "@nb_of_children", DbType.Int32, person.nb_of_children);
                db.AddInParameter(cmd, "@children_basic_education", DbType.Int32, person.children_basic_education);
                db.AddInParameter(cmd, "@livestock_number", DbType.Int32, person.livestock_number);
                db.AddInParameter(cmd, "@livestock_type", DbType.String, person.livestock_type);
                db.AddInParameter(cmd, "@landplot_size", DbType.Double, person.landplot_size);
                db.AddInParameter(cmd, "@home_size", DbType.Double, person.home_size);
                db.AddInParameter(cmd, "@home_time_living_in", DbType.Int32, person.home_time_living_in);
                db.AddInParameter(cmd, "@capital_other_equipments", DbType.String, person.capital_other_equipments);
                db.AddInParameter(cmd, "@activity_id", DbType.Int32, person.activity_id);
                db.AddInParameter(cmd, "@experience", DbType.Int32, person.experience);
                db.AddInParameter(cmd, "@nb_of_people", DbType.Int32, person.nb_of_people);
                db.AddInParameter(cmd, "@monthly_income", DbType.Currency, person.monthly_income);
                db.AddInParameter(cmd, "@monthly_expenditure", DbType.Currency, person.monthly_expenditure);
                db.AddInParameter(cmd, "@comments", DbType.String, person.comments);
                db.AddInParameter(cmd, "@image_path", DbType.String, person.image_path);
                db.AddInParameter(cmd, "@father_name", DbType.String, person.father_name);
                db.AddInParameter(cmd, "@birth_place", DbType.String, person.birth_place);
                db.AddInParameter(cmd, "@nationality", DbType.String, person.nationality);
                db.AddInParameter(cmd, "@study_level", DbType.String, person.study_level);
                db.AddInParameter(cmd, "@SS", DbType.String, person.SS);
                db.AddInParameter(cmd, "@CAF", DbType.String, person.CAF);
                db.AddInParameter(cmd, "@housing_situation", DbType.String, person.housing_situation);
                db.AddInParameter(cmd, "@bank_situation", DbType.String, person.bank_situation);
                db.AddInParameter(cmd, "@handicapped", DbType.Boolean, person.handicapped);
                db.AddInParameter(cmd, "@professional_experience", DbType.String, person.professional_experience);
                db.AddInParameter(cmd, "@professional_situation", DbType.String, person.professional_situation);
                db.AddInParameter(cmd, "@first_contact", DbType.DateTime, person.first_contact);
                db.AddInParameter(cmd, "@family_situation", DbType.String, person.family_situation);
                db.AddInParameter(cmd, "@mother_name", DbType.String, person.mother_name);
                db.AddInParameter(cmd, "@povertylevel_childreneducation", DbType.Int32, person.povertylevel_childreneducation);
                db.AddInParameter(cmd, "@povertylevel_economiceducation", DbType.Int32, person.povertylevel_economiceducation);
                db.AddInParameter(cmd, "@povertylevel_socialparticipation", DbType.Int32, person.povertylevel_socialparticipation);
                db.AddInParameter(cmd, "@povertylevel_healthsituation", DbType.Int32, person.povertylevel_healthsituation);
                db.AddInParameter(cmd, "@unemployment_months", DbType.Int32, person.unemployment_months);
                db.AddInParameter(cmd, "@first_appointment", DbType.DateTime, person.first_appointment);
                db.AddInParameter(cmd, "@loan_officer_id", DbType.Int32, person.loan_officer_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, person.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Persons table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Persons " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Persons table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Person object with data populated from the database.</returns>
        public Person SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [first_name], [sex], [identification_data], [last_name], [birth_date], [household_head]" +
                        ", [nb_of_dependents], [nb_of_children], [children_basic_education], [livestock_number]" +
                        ", [livestock_type], [landplot_size], [home_size], [home_time_living_in], [capital_other_equipments]" +
                        ", [activity_id], [experience], [nb_of_people], [monthly_income], [monthly_expenditure]" +
                        ", [comments], [image_path], [father_name], [birth_place], [nationality], [study_level]" +
                        ", [SS], [CAF], [housing_situation], [bank_situation], [handicapped], [professional_experience]" +
                        ", [professional_situation], [first_contact], [family_situation], [mother_name], [povertylevel_childreneducation]" +
                        ", [povertylevel_economiceducation], [povertylevel_socialparticipation], [povertylevel_healthsituation]" +
                        ", [unemployment_months], [first_appointment], [loan_officer_id] " +
                "FROM dbo.Persons  " +
                "WHERE [id]=@id ";

            Person person = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Person
                        person = new Person();

                        // Read values.
                        person.id = base.GetDataValue<int>(dr, "id");
                        person.first_name = base.GetDataValue<string>(dr, "first_name");
                        person.sex = Convert.ToChar(base.GetDataValue<string>(dr, "sex"));
                        person.identification_data = base.GetDataValue<string>(dr, "identification_data");
                        person.last_name = base.GetDataValue<string>(dr, "last_name");
                        person.birth_date = base.GetDataValue<DateTime>(dr, "birth_date");
                        person.household_head = base.GetDataValue<bool>(dr, "household_head");
                        person.nb_of_dependents = base.GetDataValue<int>(dr, "nb_of_dependents");
                        person.nb_of_children = base.GetDataValue<int>(dr, "nb_of_children");
                        person.children_basic_education = base.GetDataValue<int>(dr, "children_basic_education");
                        person.livestock_number = base.GetDataValue<int>(dr, "livestock_number");
                        person.livestock_type = base.GetDataValue<string>(dr, "livestock_type");
                        person.landplot_size = base.GetDataValue<double>(dr, "landplot_size");
                        person.home_size = base.GetDataValue<double>(dr, "home_size");
                        person.home_time_living_in = base.GetDataValue<int>(dr, "home_time_living_in");
                        person.capital_other_equipments = base.GetDataValue<string>(dr, "capital_other_equipments");
                        person.activity_id = base.GetDataValue<int>(dr, "activity_id");
                        person.experience = base.GetDataValue<int>(dr, "experience");
                        person.nb_of_people = base.GetDataValue<int>(dr, "nb_of_people");
                        person.monthly_income = base.GetDataValue<decimal>(dr, "monthly_income");
                        person.monthly_expenditure = base.GetDataValue<decimal>(dr, "monthly_expenditure");
                        person.comments = base.GetDataValue<string>(dr, "comments");
                        person.image_path = base.GetDataValue<string>(dr, "image_path");
                        person.father_name = base.GetDataValue<string>(dr, "father_name");
                        person.birth_place = base.GetDataValue<string>(dr, "birth_place");
                        person.nationality = base.GetDataValue<string>(dr, "nationality");
                        person.study_level = base.GetDataValue<string>(dr, "study_level");
                        person.SS = base.GetDataValue<string>(dr, "SS");
                        person.CAF = base.GetDataValue<string>(dr, "CAF");
                        person.housing_situation = base.GetDataValue<string>(dr, "housing_situation");
                        person.bank_situation = base.GetDataValue<string>(dr, "bank_situation");
                        person.handicapped = base.GetDataValue<bool>(dr, "handicapped");
                        person.professional_experience = base.GetDataValue<string>(dr, "professional_experience");
                        person.professional_situation = base.GetDataValue<string>(dr, "professional_situation");
                        person.first_contact = base.GetDataValue<DateTime>(dr, "first_contact");
                        person.family_situation = base.GetDataValue<string>(dr, "family_situation");
                        person.mother_name = base.GetDataValue<string>(dr, "mother_name");
                        person.povertylevel_childreneducation = base.GetDataValue<int>(dr, "povertylevel_childreneducation");
                        person.povertylevel_economiceducation = base.GetDataValue<int>(dr, "povertylevel_economiceducation");
                        person.povertylevel_socialparticipation = base.GetDataValue<int>(dr, "povertylevel_socialparticipation");
                        person.povertylevel_healthsituation = base.GetDataValue<int>(dr, "povertylevel_healthsituation");
                        person.unemployment_months = base.GetDataValue<int>(dr, "unemployment_months");
                        person.first_appointment = base.GetDataValue<DateTime>(dr, "first_appointment");
                        person.loan_officer_id = base.GetDataValue<int>(dr, "loan_officer_id");
                    }
                }
            }

            return person;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Persons table.
        /// </summary>
        /// <returns>A collection of Person objects.</returns>		
        public List<Person> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [first_name], [sex], [identification_data], [last_name], [birth_date], [household_head]" +
                        ", [nb_of_dependents], [nb_of_children], [children_basic_education], [livestock_number]" +
                        ", [livestock_type], [landplot_size], [home_size], [home_time_living_in], [capital_other_equipments]" +
                        ", [activity_id], [experience], [nb_of_people], [monthly_income], [monthly_expenditure]" +
                        ", [comments], [image_path], [father_name], [birth_place], [nationality], [study_level]" +
                        ", [SS], [CAF], [housing_situation], [bank_situation], [handicapped], [professional_experience]" +
                        ", [professional_situation], [first_contact], [family_situation], [mother_name], [povertylevel_childreneducation]" +
                        ", [povertylevel_economiceducation], [povertylevel_socialparticipation], [povertylevel_healthsituation]" +
                        ", [unemployment_months], [first_appointment], [loan_officer_id] " +
                "FROM dbo.Persons ";

            List<Person> result = new List<Person>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Person
                        Person person = new Person();

                        // Read values.
                        person.id = base.GetDataValue<int>(dr, "id");
                        person.first_name = base.GetDataValue<string>(dr, "first_name");
                        person.sex = Convert.ToChar(base.GetDataValue<string>(dr, "sex"));
                        person.identification_data = base.GetDataValue<string>(dr, "identification_data");
                        person.last_name = base.GetDataValue<string>(dr, "last_name");
                        person.birth_date = base.GetDataValue<DateTime>(dr, "birth_date");
                        person.household_head = base.GetDataValue<bool>(dr, "household_head");
                        person.nb_of_dependents = base.GetDataValue<int>(dr, "nb_of_dependents");
                        person.nb_of_children = base.GetDataValue<int>(dr, "nb_of_children");
                        person.children_basic_education = base.GetDataValue<int>(dr, "children_basic_education");
                        person.livestock_number = base.GetDataValue<int>(dr, "livestock_number");
                        person.livestock_type = base.GetDataValue<string>(dr, "livestock_type");
                        person.landplot_size = base.GetDataValue<double>(dr, "landplot_size");
                        person.home_size = base.GetDataValue<double>(dr, "home_size");
                        person.home_time_living_in = base.GetDataValue<int>(dr, "home_time_living_in");
                        person.capital_other_equipments = base.GetDataValue<string>(dr, "capital_other_equipments");
                        person.activity_id = base.GetDataValue<int>(dr, "activity_id");
                        person.experience = base.GetDataValue<int>(dr, "experience");
                        person.nb_of_people = base.GetDataValue<int>(dr, "nb_of_people");
                        person.monthly_income = base.GetDataValue<decimal>(dr, "monthly_income");
                        person.monthly_expenditure = base.GetDataValue<decimal>(dr, "monthly_expenditure");
                        person.comments = base.GetDataValue<string>(dr, "comments");
                        person.image_path = base.GetDataValue<string>(dr, "image_path");
                        person.father_name = base.GetDataValue<string>(dr, "father_name");
                        person.birth_place = base.GetDataValue<string>(dr, "birth_place");
                        person.nationality = base.GetDataValue<string>(dr, "nationality");
                        person.study_level = base.GetDataValue<string>(dr, "study_level");
                        person.SS = base.GetDataValue<string>(dr, "SS");
                        person.CAF = base.GetDataValue<string>(dr, "CAF");
                        person.housing_situation = base.GetDataValue<string>(dr, "housing_situation");
                        person.bank_situation = base.GetDataValue<string>(dr, "bank_situation");
                        person.handicapped = base.GetDataValue<bool>(dr, "handicapped");
                        person.professional_experience = base.GetDataValue<string>(dr, "professional_experience");
                        person.professional_situation = base.GetDataValue<string>(dr, "professional_situation");
                        person.first_contact = base.GetDataValue<DateTime>(dr, "first_contact");
                        person.family_situation = base.GetDataValue<string>(dr, "family_situation");
                        person.mother_name = base.GetDataValue<string>(dr, "mother_name");
                        person.povertylevel_childreneducation = base.GetDataValue<int>(dr, "povertylevel_childreneducation");
                        person.povertylevel_economiceducation = base.GetDataValue<int>(dr, "povertylevel_economiceducation");
                        person.povertylevel_socialparticipation = base.GetDataValue<int>(dr, "povertylevel_socialparticipation");
                        person.povertylevel_healthsituation = base.GetDataValue<int>(dr, "povertylevel_healthsituation");
                        person.unemployment_months = base.GetDataValue<int>(dr, "unemployment_months");
                        person.first_appointment = base.GetDataValue<DateTime>(dr, "first_appointment");
                        person.loan_officer_id = base.GetDataValue<int>(dr, "loan_officer_id");

                        // Add to List.
                        result.Add(person);
                    }
                }
            }

            return result;
        }
    }
}

