//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// FundingLineEvents data access component. Manages CRUD operations for the FundingLineEvents table.
    /// </summary>
    public partial class FundingLineEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the FundingLineEvents table.
        /// </summary>
        /// <param name="fundingLineEvent">A FundingLineEvent object.</param>
        /// <returns>An updated FundingLineEvent object.</returns>
        public FundingLineEvent Create(FundingLineEvent fundingLineEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.FundingLineEvents ([code], [amount], [direction], [fundingline_id], [deleted], [creation_date], [type], [user_id], [contract_event_id]) " +
                "VALUES(@code, @amount, @direction, @fundingline_id, @deleted, @creation_date, @type, @user_id, @contract_event_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@code", DbType.String, fundingLineEvent.code);
                db.AddInParameter(cmd, "@amount", DbType.Currency, fundingLineEvent.amount);
                db.AddInParameter(cmd, "@direction", DbType.Int16, fundingLineEvent.direction);
                db.AddInParameter(cmd, "@fundingline_id", DbType.Int32, fundingLineEvent.fundingline_id);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, fundingLineEvent.deleted);
                db.AddInParameter(cmd, "@creation_date", DbType.DateTime, fundingLineEvent.creation_date);
                db.AddInParameter(cmd, "@type", DbType.Int16, fundingLineEvent.type);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, fundingLineEvent.user_id);
                db.AddInParameter(cmd, "@contract_event_id", DbType.Int32, fundingLineEvent.contract_event_id);

                // Get the primary key value.
                fundingLineEvent.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return fundingLineEvent;
        }

        /// <summary>
        /// Updates an existing row in the FundingLineEvents table.
        /// </summary>
        /// <param name="fundingLineEvent">A FundingLineEvent entity object.</param>
        public void UpdateById(FundingLineEvent fundingLineEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.FundingLineEvents " +
                "SET " +
                    "[code]=@code, " +
                    "[amount]=@amount, " +
                    "[direction]=@direction, " +
                    "[fundingline_id]=@fundingline_id, " +
                    "[deleted]=@deleted, " +
                    "[creation_date]=@creation_date, " +
                    "[type]=@type, " +
                    "[user_id]=@user_id, " +
                    "[contract_event_id]=@contract_event_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@code", DbType.String, fundingLineEvent.code);
                db.AddInParameter(cmd, "@amount", DbType.Currency, fundingLineEvent.amount);
                db.AddInParameter(cmd, "@direction", DbType.Int16, fundingLineEvent.direction);
                db.AddInParameter(cmd, "@fundingline_id", DbType.Int32, fundingLineEvent.fundingline_id);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, fundingLineEvent.deleted);
                db.AddInParameter(cmd, "@creation_date", DbType.DateTime, fundingLineEvent.creation_date);
                db.AddInParameter(cmd, "@type", DbType.Int16, fundingLineEvent.type);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, fundingLineEvent.user_id);
                db.AddInParameter(cmd, "@contract_event_id", DbType.Int32, fundingLineEvent.contract_event_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, fundingLineEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the FundingLineEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.FundingLineEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the FundingLineEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A FundingLineEvent object with data populated from the database.</returns>
        public FundingLineEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [code], [amount], [direction], [fundingline_id], [deleted], [creation_date]" +
                        ", [type], [user_id], [contract_event_id] " +
                "FROM dbo.FundingLineEvents  " +
                "WHERE [id]=@id ";

            FundingLineEvent fundingLineEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new FundingLineEvent
                        fundingLineEvent = new FundingLineEvent();

                        // Read values.
                        fundingLineEvent.id = base.GetDataValue<int>(dr, "id");
                        fundingLineEvent.code = base.GetDataValue<string>(dr, "code");
                        fundingLineEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        fundingLineEvent.direction = base.GetDataValue<short>(dr, "direction");
                        fundingLineEvent.fundingline_id = base.GetDataValue<int>(dr, "fundingline_id");
                        fundingLineEvent.deleted = base.GetDataValue<bool>(dr, "deleted");
                        fundingLineEvent.creation_date = base.GetDataValue<DateTime>(dr, "creation_date");
                        fundingLineEvent.type = base.GetDataValue<short>(dr, "type");
                        fundingLineEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                        fundingLineEvent.contract_event_id = base.GetDataValue<int>(dr, "contract_event_id");
                    }
                }
            }

            return fundingLineEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the FundingLineEvents table.
        /// </summary>
        /// <returns>A collection of FundingLineEvent objects.</returns>		
        public List<FundingLineEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [code], [amount], [direction], [fundingline_id], [deleted], [creation_date]" +
                        ", [type], [user_id], [contract_event_id] " +
                "FROM dbo.FundingLineEvents ";

            List<FundingLineEvent> result = new List<FundingLineEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new FundingLineEvent
                        FundingLineEvent fundingLineEvent = new FundingLineEvent();

                        // Read values.
                        fundingLineEvent.id = base.GetDataValue<int>(dr, "id");
                        fundingLineEvent.code = base.GetDataValue<string>(dr, "code");
                        fundingLineEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        fundingLineEvent.direction = base.GetDataValue<short>(dr, "direction");
                        fundingLineEvent.fundingline_id = base.GetDataValue<int>(dr, "fundingline_id");
                        fundingLineEvent.deleted = base.GetDataValue<bool>(dr, "deleted");
                        fundingLineEvent.creation_date = base.GetDataValue<DateTime>(dr, "creation_date");
                        fundingLineEvent.type = base.GetDataValue<short>(dr, "type");
                        fundingLineEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                        fundingLineEvent.contract_event_id = base.GetDataValue<int>(dr, "contract_event_id");

                        // Add to List.
                        result.Add(fundingLineEvent);
                    }
                }
            }

            return result;
        }
    }
}

