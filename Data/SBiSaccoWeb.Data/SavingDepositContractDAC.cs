//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// SavingDepositContracts data access component. Manages CRUD operations for the SavingDepositContracts table.
    /// </summary>
    public partial class SavingDepositContractDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the SavingDepositContracts table.
        /// </summary>
        /// <param name="savingDepositContract">A SavingDepositContract object.</param>
        /// <returns>An updated SavingDepositContract object.</returns>
        public SavingDepositContract Create(SavingDepositContract savingDepositContract)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SavingDepositContracts ([id], [number_periods], [rollover], [transfer_account], [withdrawal_fees], [next_maturity]) " +
                "VALUES(@id, @number_periods, @rollover, @transfer_account, @withdrawal_fees, @next_maturity);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, savingDepositContract.id);
                db.AddInParameter(cmd, "@number_periods", DbType.Int32, savingDepositContract.number_periods);
                db.AddInParameter(cmd, "@rollover", DbType.Int16, savingDepositContract.rollover);
                db.AddInParameter(cmd, "@transfer_account", DbType.String, savingDepositContract.transfer_account);
                db.AddInParameter(cmd, "@withdrawal_fees", DbType.Double, savingDepositContract.withdrawal_fees);
                db.AddInParameter(cmd, "@next_maturity", DbType.DateTime, savingDepositContract.next_maturity);

                db.ExecuteNonQuery(cmd);
            }

            return savingDepositContract;
        }

        /// <summary>
        /// Updates an existing row in the SavingDepositContracts table.
        /// </summary>
        /// <param name="savingDepositContract">A SavingDepositContract entity object.</param>
        public void UpdateById(SavingDepositContract savingDepositContract)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SavingDepositContracts " +
                "SET " +
                    "[number_periods]=@number_periods, " +
                    "[rollover]=@rollover, " +
                    "[transfer_account]=@transfer_account, " +
                    "[withdrawal_fees]=@withdrawal_fees, " +
                    "[next_maturity]=@next_maturity " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@number_periods", DbType.Int32, savingDepositContract.number_periods);
                db.AddInParameter(cmd, "@rollover", DbType.Int16, savingDepositContract.rollover);
                db.AddInParameter(cmd, "@transfer_account", DbType.String, savingDepositContract.transfer_account);
                db.AddInParameter(cmd, "@withdrawal_fees", DbType.Double, savingDepositContract.withdrawal_fees);
                db.AddInParameter(cmd, "@next_maturity", DbType.DateTime, savingDepositContract.next_maturity);
                db.AddInParameter(cmd, "@id", DbType.Int32, savingDepositContract.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SavingDepositContracts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SavingDepositContracts " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SavingDepositContracts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A SavingDepositContract object with data populated from the database.</returns>
        public SavingDepositContract SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [number_periods], [rollover], [transfer_account], [withdrawal_fees], [next_maturity]" +
                        " " +
                "FROM dbo.SavingDepositContracts  " +
                "WHERE [id]=@id ";

            SavingDepositContract savingDepositContract = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SavingDepositContract
                        savingDepositContract = new SavingDepositContract();

                        // Read values.
                        savingDepositContract.id = base.GetDataValue<int>(dr, "id");
                        savingDepositContract.number_periods = base.GetDataValue<int>(dr, "number_periods");
                        savingDepositContract.rollover = base.GetDataValue<short>(dr, "rollover");
                        savingDepositContract.transfer_account = base.GetDataValue<string>(dr, "transfer_account");
                        savingDepositContract.withdrawal_fees = base.GetDataValue<double>(dr, "withdrawal_fees");
                        savingDepositContract.next_maturity = base.GetDataValue<DateTime>(dr, "next_maturity");
                    }
                }
            }

            return savingDepositContract;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SavingDepositContracts table.
        /// </summary>
        /// <returns>A collection of SavingDepositContract objects.</returns>		
        public List<SavingDepositContract> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [number_periods], [rollover], [transfer_account], [withdrawal_fees], [next_maturity]" +
                        " " +
                "FROM dbo.SavingDepositContracts ";

            List<SavingDepositContract> result = new List<SavingDepositContract>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SavingDepositContract
                        SavingDepositContract savingDepositContract = new SavingDepositContract();

                        // Read values.
                        savingDepositContract.id = base.GetDataValue<int>(dr, "id");
                        savingDepositContract.number_periods = base.GetDataValue<int>(dr, "number_periods");
                        savingDepositContract.rollover = base.GetDataValue<short>(dr, "rollover");
                        savingDepositContract.transfer_account = base.GetDataValue<string>(dr, "transfer_account");
                        savingDepositContract.withdrawal_fees = base.GetDataValue<double>(dr, "withdrawal_fees");
                        savingDepositContract.next_maturity = base.GetDataValue<DateTime>(dr, "next_maturity");

                        // Add to List.
                        result.Add(savingDepositContract);
                    }
                }
            }

            return result;
        }
    }
}

