//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// FundingLines data access component. Manages CRUD operations for the FundingLines table.
    /// </summary>
    public partial class FundingLineDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the FundingLines table.
        /// </summary>
        /// <param name="fundingLine">A FundingLine object.</param>
        /// <returns>An updated FundingLine object.</returns>
        public FundingLine Create(FundingLine fundingLine)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.FundingLines ([name], [begin_date], [end_date], [amount], [purpose], [deleted], [currency_id]) " +
                "VALUES(@name, @begin_date, @end_date, @amount, @purpose, @deleted, @currency_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, fundingLine.name);
                db.AddInParameter(cmd, "@begin_date", DbType.DateTime, fundingLine.begin_date);
                db.AddInParameter(cmd, "@end_date", DbType.DateTime, fundingLine.end_date);
                db.AddInParameter(cmd, "@amount", DbType.Decimal, fundingLine.amount);
                db.AddInParameter(cmd, "@purpose", DbType.String, fundingLine.purpose);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, fundingLine.deleted);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, fundingLine.currency_id);

                // Get the primary key value.
                fundingLine.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return fundingLine;
        }

        /// <summary>
        /// Updates an existing row in the FundingLines table.
        /// </summary>
        /// <param name="fundingLine">A FundingLine entity object.</param>
        public void UpdateById(FundingLine fundingLine)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.FundingLines " +
                "SET " +
                    "[name]=@name, " +
                    "[begin_date]=@begin_date, " +
                    "[end_date]=@end_date, " +
                    "[amount]=@amount, " +
                    "[purpose]=@purpose, " +
                    "[deleted]=@deleted, " +
                    "[currency_id]=@currency_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, fundingLine.name);
                db.AddInParameter(cmd, "@begin_date", DbType.DateTime, fundingLine.begin_date);
                db.AddInParameter(cmd, "@end_date", DbType.DateTime, fundingLine.end_date);
                db.AddInParameter(cmd, "@amount", DbType.Decimal, fundingLine.amount);
                db.AddInParameter(cmd, "@purpose", DbType.String, fundingLine.purpose);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, fundingLine.deleted);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, fundingLine.currency_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, fundingLine.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the FundingLines table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.FundingLines " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the FundingLines table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A FundingLine object with data populated from the database.</returns>
        public FundingLine SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [name], [begin_date], [end_date], [amount], [purpose], [deleted], [currency_id]" +
                        " " +
                "FROM dbo.FundingLines  " +
                "WHERE [id]=@id ";

            FundingLine fundingLine = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new FundingLine
                        fundingLine = new FundingLine();

                        // Read values.
                        fundingLine.id = base.GetDataValue<int>(dr, "id");
                        fundingLine.name = base.GetDataValue<string>(dr, "name");
                        fundingLine.begin_date = base.GetDataValue<DateTime>(dr, "begin_date");
                        fundingLine.end_date = base.GetDataValue<DateTime>(dr, "end_date");
                        fundingLine.amount = base.GetDataValue<decimal>(dr, "amount");
                        fundingLine.purpose = base.GetDataValue<string>(dr, "purpose");
                        fundingLine.deleted = base.GetDataValue<bool>(dr, "deleted");
                        fundingLine.currency_id = base.GetDataValue<int>(dr, "currency_id");
                    }
                }
            }

            return fundingLine;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the FundingLines table.
        /// </summary>
        /// <returns>A collection of FundingLine objects.</returns>		
        public List<FundingLine> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [name], [begin_date], [end_date], [amount], [purpose], [deleted], [currency_id]" +
                        " " +
                "FROM dbo.FundingLines ";

            List<FundingLine> result = new List<FundingLine>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new FundingLine
                        FundingLine fundingLine = new FundingLine();

                        // Read values.
                        fundingLine.id = base.GetDataValue<int>(dr, "id");
                        fundingLine.name = base.GetDataValue<string>(dr, "name");
                        fundingLine.begin_date = base.GetDataValue<DateTime>(dr, "begin_date");
                        fundingLine.end_date = base.GetDataValue<DateTime>(dr, "end_date");
                        fundingLine.amount = base.GetDataValue<decimal>(dr, "amount");
                        fundingLine.purpose = base.GetDataValue<string>(dr, "purpose");
                        fundingLine.deleted = base.GetDataValue<bool>(dr, "deleted");
                        fundingLine.currency_id = base.GetDataValue<int>(dr, "currency_id");

                        // Add to List.
                        result.Add(fundingLine);
                    }
                }
            }

            return result;
        }
    }
}

