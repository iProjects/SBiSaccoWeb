//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// AccountingRules data access component. Manages CRUD operations for the AccountingRules table.
    /// </summary>
    public partial class AccountingRuleDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the AccountingRules table.
        /// </summary>
        /// <param name="accountingRule">A AccountingRule object.</param>
        /// <returns>An updated AccountingRule object.</returns>
        public AccountingRule Create(AccountingRule accountingRule)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.AccountingRules ([rule_type], [deleted], [booking_direction], [event_type], [event_attribute_id], [debit_account_number_id], [credit_account_number_id], [order], [description]) " +
                "VALUES(@rule_type, @deleted, @booking_direction, @event_type, @event_attribute_id, @debit_account_number_id, @credit_account_number_id, @order, @description); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@rule_type", DbType.AnsiStringFixedLength, accountingRule.rule_type);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, accountingRule.deleted);
                db.AddInParameter(cmd, "@booking_direction", DbType.Int16, accountingRule.booking_direction);
                db.AddInParameter(cmd, "@event_type", DbType.String, accountingRule.event_type);
                db.AddInParameter(cmd, "@event_attribute_id", DbType.Int32, accountingRule.event_attribute_id);
                db.AddInParameter(cmd, "@debit_account_number_id", DbType.Int32, accountingRule.debit_account_number_id);
                db.AddInParameter(cmd, "@credit_account_number_id", DbType.Int32, accountingRule.credit_account_number_id);
                db.AddInParameter(cmd, "@order", DbType.Int32, accountingRule.order);
                db.AddInParameter(cmd, "@description", DbType.String, accountingRule.description);

                // Get the primary key value.
                accountingRule.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return accountingRule;
        }

        /// <summary>
        /// Updates an existing row in the AccountingRules table.
        /// </summary>
        /// <param name="accountingRule">A AccountingRule entity object.</param>
        public void UpdateById(AccountingRule accountingRule)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.AccountingRules " +
                "SET " +
                    "[rule_type]=@rule_type, " +
                    "[deleted]=@deleted, " +
                    "[booking_direction]=@booking_direction, " +
                    "[event_type]=@event_type, " +
                    "[event_attribute_id]=@event_attribute_id, " +
                    "[debit_account_number_id]=@debit_account_number_id, " +
                    "[credit_account_number_id]=@credit_account_number_id, " +
                    "[order]=@order, " +
                    "[description]=@description " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@rule_type", DbType.AnsiStringFixedLength, accountingRule.rule_type);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, accountingRule.deleted);
                db.AddInParameter(cmd, "@booking_direction", DbType.Int16, accountingRule.booking_direction);
                db.AddInParameter(cmd, "@event_type", DbType.String, accountingRule.event_type);
                db.AddInParameter(cmd, "@event_attribute_id", DbType.Int32, accountingRule.event_attribute_id);
                db.AddInParameter(cmd, "@debit_account_number_id", DbType.Int32, accountingRule.debit_account_number_id);
                db.AddInParameter(cmd, "@credit_account_number_id", DbType.Int32, accountingRule.credit_account_number_id);
                db.AddInParameter(cmd, "@order", DbType.Int32, accountingRule.order);
                db.AddInParameter(cmd, "@description", DbType.String, accountingRule.description);
                db.AddInParameter(cmd, "@id", DbType.Int32, accountingRule.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the AccountingRules table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.AccountingRules " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the AccountingRules table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A AccountingRule object with data populated from the database.</returns>
        public AccountingRule SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [rule_type], [deleted], [booking_direction], [event_type], [event_attribute_id]" +
                        ", [debit_account_number_id], [credit_account_number_id], [order], [description] " +
                "FROM dbo.AccountingRules  " +
                "WHERE [id]=@id ";

            AccountingRule accountingRule = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new AccountingRule
                        accountingRule = new AccountingRule();

                        // Read values.
                        accountingRule.id = base.GetDataValue<int>(dr, "id");
                        accountingRule.rule_type = Convert.ToChar(base.GetDataValue<string>(dr, "rule_type"));
                        accountingRule.deleted = base.GetDataValue<bool>(dr, "deleted");
                        accountingRule.booking_direction = base.GetDataValue<short>(dr, "booking_direction");
                        accountingRule.event_type = base.GetDataValue<string>(dr, "event_type");
                        accountingRule.event_attribute_id = base.GetDataValue<int>(dr, "event_attribute_id");
                        accountingRule.debit_account_number_id = base.GetDataValue<int>(dr, "debit_account_number_id");
                        accountingRule.credit_account_number_id = base.GetDataValue<int>(dr, "credit_account_number_id");
                        accountingRule.order = base.GetDataValue<int>(dr, "order");
                        accountingRule.description = base.GetDataValue<string>(dr, "description");
                    }
                }
            }

            return accountingRule;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the AccountingRules table.
        /// </summary>
        /// <returns>A collection of AccountingRule objects.</returns>		
        public List<AccountingRule> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [rule_type], [deleted], [booking_direction], [event_type], [event_attribute_id]" +
                        ", [debit_account_number_id], [credit_account_number_id], [order], [description] " +
                "FROM dbo.AccountingRules ";

            List<AccountingRule> result = new List<AccountingRule>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new AccountingRule
                        AccountingRule accountingRule = new AccountingRule();

                        // Read values.
                        accountingRule.id = base.GetDataValue<int>(dr, "id");
                        accountingRule.rule_type = Convert.ToChar(base.GetDataValue<string>(dr, "rule_type"));
                        accountingRule.deleted = base.GetDataValue<bool>(dr, "deleted");
                        accountingRule.booking_direction = base.GetDataValue<short>(dr, "booking_direction");
                        accountingRule.event_type = base.GetDataValue<string>(dr, "event_type");
                        accountingRule.event_attribute_id = base.GetDataValue<int>(dr, "event_attribute_id");
                        accountingRule.debit_account_number_id = base.GetDataValue<int>(dr, "debit_account_number_id");
                        accountingRule.credit_account_number_id = base.GetDataValue<int>(dr, "credit_account_number_id");
                        accountingRule.order = base.GetDataValue<int>(dr, "order");
                        accountingRule.description = base.GetDataValue<string>(dr, "description");

                        // Add to List.
                        result.Add(accountingRule);
                    }
                }
            }

            return result;
        }
    }
}

