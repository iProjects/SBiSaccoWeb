//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// EventTypes data access component. Manages CRUD operations for the EventTypes table.
    /// </summary>
    public partial class EventTypeDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the EventTypes table.
        /// </summary>
        /// <param name="eventType">A EventType object.</param>
        /// <returns>An updated EventType object.</returns>
        public EventType Create(EventType eventType)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.EventTypes ([event_type], [description], [sort_order], [accounting]) " +
                "VALUES(@event_type, @description, @sort_order, @accounting); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@event_type", DbType.String, eventType.event_type);
                db.AddInParameter(cmd, "@description", DbType.String, eventType.description);
                db.AddInParameter(cmd, "@sort_order", DbType.Int32, eventType.sort_order);
                db.AddInParameter(cmd, "@accounting", DbType.Boolean, eventType.accounting);

                // Get the primary key value.
                eventType.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return eventType;
        }

        /// <summary>
        /// Updates an existing row in the EventTypes table.
        /// </summary>
        /// <param name="eventType">A EventType entity object.</param>
        public void UpdateById(EventType eventType)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.EventTypes " +
                "SET " +
                    "[description]=@description, " +
                    "[sort_order]=@sort_order, " +
                    "[accounting]=@accounting " +
                "WHERE [event_type]=@event_type ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@description", DbType.String, eventType.description);
                db.AddInParameter(cmd, "@sort_order", DbType.Int32, eventType.sort_order);
                db.AddInParameter(cmd, "@accounting", DbType.Boolean, eventType.accounting);
                db.AddInParameter(cmd, "@event_type", DbType.String, eventType.event_type);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the EventTypes table.
        /// </summary>
        /// <param name="event_type">A event_type value.</param>
        public void DeleteById(string event_type)
        {
            const string SQL_STATEMENT = "DELETE dbo.EventTypes " +
                                         "WHERE [event_type]=@event_type ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@event_type", DbType.String, event_type);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the EventTypes table.
        /// </summary>
        /// <param name="event_type">A event_type value.</param>
        /// <returns>A EventType object with data populated from the database.</returns>
        public EventType SelectById(string event_type)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [event_type], [description], [sort_order], [accounting] " +
                "FROM dbo.EventTypes  " +
                "WHERE [event_type]=@event_type ";

            EventType eventType = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@event_type", DbType.String, event_type);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new EventType
                        eventType = new EventType();

                        // Read values.
                        eventType.id = base.GetDataValue<int>(dr, "id");
                        eventType.event_type = base.GetDataValue<string>(dr, "event_type");
                        eventType.description = base.GetDataValue<string>(dr, "description");
                        eventType.sort_order = base.GetDataValue<int>(dr, "sort_order");
                        eventType.accounting = base.GetDataValue<bool>(dr, "accounting");
                    }
                }
            }

            return eventType;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the EventTypes table.
        /// </summary>
        /// <returns>A collection of EventType objects.</returns>		
        public List<EventType> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [event_type], [description], [sort_order], [accounting] " +
                "FROM dbo.EventTypes ";

            List<EventType> result = new List<EventType>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new EventType
                        EventType eventType = new EventType();

                        // Read values.
                        eventType.id = base.GetDataValue<int>(dr, "id");
                        eventType.event_type = base.GetDataValue<string>(dr, "event_type");
                        eventType.description = base.GetDataValue<string>(dr, "description");
                        eventType.sort_order = base.GetDataValue<int>(dr, "sort_order");
                        eventType.accounting = base.GetDataValue<bool>(dr, "accounting");

                        // Add to List.
                        result.Add(eventType);
                    }
                }
            }

            return result;
        }
    }
}

