//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// LoanInterestAccruingEvents data access component. Manages CRUD operations for the LoanInterestAccruingEvents table.
    /// </summary>
    public partial class LoanInterestAccruingEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the LoanInterestAccruingEvents table.
        /// </summary>
        /// <param name="loanInterestAccruingEvent">A LoanInterestAccruingEvent object.</param>
        /// <returns>An updated LoanInterestAccruingEvent object.</returns>
        public LoanInterestAccruingEvent Create(LoanInterestAccruingEvent loanInterestAccruingEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.LoanInterestAccruingEvents ([id], [interest_prepayment], [accrued_interest], [rescheduled], [installment_number]) " +
                "VALUES(@id, @interest_prepayment, @accrued_interest, @rescheduled, @installment_number);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, loanInterestAccruingEvent.id);
                db.AddInParameter(cmd, "@interest_prepayment", DbType.Currency, loanInterestAccruingEvent.interest_prepayment);
                db.AddInParameter(cmd, "@accrued_interest", DbType.Currency, loanInterestAccruingEvent.accrued_interest);
                db.AddInParameter(cmd, "@rescheduled", DbType.Boolean, loanInterestAccruingEvent.rescheduled);
                db.AddInParameter(cmd, "@installment_number", DbType.Int32, loanInterestAccruingEvent.installment_number);

                db.ExecuteNonQuery(cmd);
            }

            return loanInterestAccruingEvent;
        }

        /// <summary>
        /// Updates an existing row in the LoanInterestAccruingEvents table.
        /// </summary>
        /// <param name="loanInterestAccruingEvent">A LoanInterestAccruingEvent entity object.</param>
        public void UpdateById(LoanInterestAccruingEvent loanInterestAccruingEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.LoanInterestAccruingEvents " +
                "SET " +
                    "[interest_prepayment]=@interest_prepayment, " +
                    "[accrued_interest]=@accrued_interest, " +
                    "[rescheduled]=@rescheduled, " +
                    "[installment_number]=@installment_number " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@interest_prepayment", DbType.Currency, loanInterestAccruingEvent.interest_prepayment);
                db.AddInParameter(cmd, "@accrued_interest", DbType.Currency, loanInterestAccruingEvent.accrued_interest);
                db.AddInParameter(cmd, "@rescheduled", DbType.Boolean, loanInterestAccruingEvent.rescheduled);
                db.AddInParameter(cmd, "@installment_number", DbType.Int32, loanInterestAccruingEvent.installment_number);
                db.AddInParameter(cmd, "@id", DbType.Int32, loanInterestAccruingEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the LoanInterestAccruingEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.LoanInterestAccruingEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the LoanInterestAccruingEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A LoanInterestAccruingEvent object with data populated from the database.</returns>
        public LoanInterestAccruingEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [interest_prepayment], [accrued_interest], [rescheduled], [installment_number]" +
                        " " +
                "FROM dbo.LoanInterestAccruingEvents  " +
                "WHERE [id]=@id ";

            LoanInterestAccruingEvent loanInterestAccruingEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new LoanInterestAccruingEvent
                        loanInterestAccruingEvent = new LoanInterestAccruingEvent();

                        // Read values.
                        loanInterestAccruingEvent.id = base.GetDataValue<int>(dr, "id");
                        loanInterestAccruingEvent.interest_prepayment = base.GetDataValue<decimal>(dr, "interest_prepayment");
                        loanInterestAccruingEvent.accrued_interest = base.GetDataValue<decimal>(dr, "accrued_interest");
                        loanInterestAccruingEvent.rescheduled = base.GetDataValue<bool>(dr, "rescheduled");
                        loanInterestAccruingEvent.installment_number = base.GetDataValue<int>(dr, "installment_number");
                    }
                }
            }

            return loanInterestAccruingEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the LoanInterestAccruingEvents table.
        /// </summary>
        /// <returns>A collection of LoanInterestAccruingEvent objects.</returns>		
        public List<LoanInterestAccruingEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [interest_prepayment], [accrued_interest], [rescheduled], [installment_number]" +
                        " " +
                "FROM dbo.LoanInterestAccruingEvents ";

            List<LoanInterestAccruingEvent> result = new List<LoanInterestAccruingEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new LoanInterestAccruingEvent
                        LoanInterestAccruingEvent loanInterestAccruingEvent = new LoanInterestAccruingEvent();

                        // Read values.
                        loanInterestAccruingEvent.id = base.GetDataValue<int>(dr, "id");
                        loanInterestAccruingEvent.interest_prepayment = base.GetDataValue<decimal>(dr, "interest_prepayment");
                        loanInterestAccruingEvent.accrued_interest = base.GetDataValue<decimal>(dr, "accrued_interest");
                        loanInterestAccruingEvent.rescheduled = base.GetDataValue<bool>(dr, "rescheduled");
                        loanInterestAccruingEvent.installment_number = base.GetDataValue<int>(dr, "installment_number");

                        // Add to List.
                        result.Add(loanInterestAccruingEvent);
                    }
                }
            }

            return result;
        }
    }
}

