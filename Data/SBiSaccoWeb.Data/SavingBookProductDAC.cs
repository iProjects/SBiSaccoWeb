//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// SavingBookProducts data access component. Manages CRUD operations for the SavingBookProducts table.
    /// </summary>
    public partial class SavingBookProductDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the SavingBookProducts table.
        /// </summary>
        /// <param name="savingBookProduct">A SavingBookProduct object.</param>
        /// <returns>An updated SavingBookProduct object.</returns>
        public SavingBookProduct Create(SavingBookProduct savingBookProduct)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SavingBookProducts ([id], [interest_base], [interest_frequency], [calcul_amount_base], [withdraw_fees_type], [flat_withdraw_fees_min], [flat_withdraw_fees_max], [flat_withdraw_fees], [rate_withdraw_fees_min], [rate_withdraw_fees_max], [rate_withdraw_fees], [transfer_fees_type], [flat_transfer_fees_min], [flat_transfer_fees_max], [flat_transfer_fees], [rate_transfer_fees_min], [rate_transfer_fees_max], [rate_transfer_fees], [deposit_fees], [deposit_fees_max], [deposit_fees_min], [close_fees], [close_fees_max], [close_fees_min], [management_fees], [management_fees_max], [management_fees_min], [management_fees_freq], [overdraft_fees], [overdraft_fees_max], [overdraft_fees_min], [agio_fees], [agio_fees_max], [agio_fees_min], [agio_fees_freq], [cheque_deposit_min], [cheque_deposit_max], [cheque_deposit_fees], [cheque_deposit_fees_min], [cheque_deposit_fees_max], [reopen_fees], [reopen_fees_min], [reopen_fees_max], [is_ibt_fee_flat], [ibt_fee_min], [ibt_fee_max], [ibt_fee], [use_term_deposit], [term_deposit_period_min], [term_deposit_period_max], [posting_frequency]) " +
                "VALUES(@id, @interest_base, @interest_frequency, @calcul_amount_base, @withdraw_fees_type, @flat_withdraw_fees_min, @flat_withdraw_fees_max, @flat_withdraw_fees, @rate_withdraw_fees_min, @rate_withdraw_fees_max, @rate_withdraw_fees, @transfer_fees_type, @flat_transfer_fees_min, @flat_transfer_fees_max, @flat_transfer_fees, @rate_transfer_fees_min, @rate_transfer_fees_max, @rate_transfer_fees, @deposit_fees, @deposit_fees_max, @deposit_fees_min, @close_fees, @close_fees_max, @close_fees_min, @management_fees, @management_fees_max, @management_fees_min, @management_fees_freq, @overdraft_fees, @overdraft_fees_max, @overdraft_fees_min, @agio_fees, @agio_fees_max, @agio_fees_min, @agio_fees_freq, @cheque_deposit_min, @cheque_deposit_max, @cheque_deposit_fees, @cheque_deposit_fees_min, @cheque_deposit_fees_max, @reopen_fees, @reopen_fees_min, @reopen_fees_max, @is_ibt_fee_flat, @ibt_fee_min, @ibt_fee_max, @ibt_fee, @use_term_deposit, @term_deposit_period_min, @term_deposit_period_max, @posting_frequency);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, savingBookProduct.id);
                db.AddInParameter(cmd, "@interest_base", DbType.Int16, savingBookProduct.interest_base);
                db.AddInParameter(cmd, "@interest_frequency", DbType.Int16, savingBookProduct.interest_frequency);
                db.AddInParameter(cmd, "@calcul_amount_base", DbType.Int16, savingBookProduct.calcul_amount_base);
                db.AddInParameter(cmd, "@withdraw_fees_type", DbType.Int16, savingBookProduct.withdraw_fees_type);
                db.AddInParameter(cmd, "@flat_withdraw_fees_min", DbType.Currency, savingBookProduct.flat_withdraw_fees_min);
                db.AddInParameter(cmd, "@flat_withdraw_fees_max", DbType.Currency, savingBookProduct.flat_withdraw_fees_max);
                db.AddInParameter(cmd, "@flat_withdraw_fees", DbType.Currency, savingBookProduct.flat_withdraw_fees);
                db.AddInParameter(cmd, "@rate_withdraw_fees_min", DbType.Double, savingBookProduct.rate_withdraw_fees_min);
                db.AddInParameter(cmd, "@rate_withdraw_fees_max", DbType.Double, savingBookProduct.rate_withdraw_fees_max);
                db.AddInParameter(cmd, "@rate_withdraw_fees", DbType.Double, savingBookProduct.rate_withdraw_fees);
                db.AddInParameter(cmd, "@transfer_fees_type", DbType.Int16, savingBookProduct.transfer_fees_type);
                db.AddInParameter(cmd, "@flat_transfer_fees_min", DbType.Currency, savingBookProduct.flat_transfer_fees_min);
                db.AddInParameter(cmd, "@flat_transfer_fees_max", DbType.Currency, savingBookProduct.flat_transfer_fees_max);
                db.AddInParameter(cmd, "@flat_transfer_fees", DbType.Currency, savingBookProduct.flat_transfer_fees);
                db.AddInParameter(cmd, "@rate_transfer_fees_min", DbType.Double, savingBookProduct.rate_transfer_fees_min);
                db.AddInParameter(cmd, "@rate_transfer_fees_max", DbType.Double, savingBookProduct.rate_transfer_fees_max);
                db.AddInParameter(cmd, "@rate_transfer_fees", DbType.Double, savingBookProduct.rate_transfer_fees);
                db.AddInParameter(cmd, "@deposit_fees", DbType.Currency, savingBookProduct.deposit_fees);
                db.AddInParameter(cmd, "@deposit_fees_max", DbType.Currency, savingBookProduct.deposit_fees_max);
                db.AddInParameter(cmd, "@deposit_fees_min", DbType.Currency, savingBookProduct.deposit_fees_min);
                db.AddInParameter(cmd, "@close_fees", DbType.Currency, savingBookProduct.close_fees);
                db.AddInParameter(cmd, "@close_fees_max", DbType.Currency, savingBookProduct.close_fees_max);
                db.AddInParameter(cmd, "@close_fees_min", DbType.Currency, savingBookProduct.close_fees_min);
                db.AddInParameter(cmd, "@management_fees", DbType.Currency, savingBookProduct.management_fees);
                db.AddInParameter(cmd, "@management_fees_max", DbType.Currency, savingBookProduct.management_fees_max);
                db.AddInParameter(cmd, "@management_fees_min", DbType.Currency, savingBookProduct.management_fees_min);
                db.AddInParameter(cmd, "@management_fees_freq", DbType.Int32, savingBookProduct.management_fees_freq);
                db.AddInParameter(cmd, "@overdraft_fees", DbType.Currency, savingBookProduct.overdraft_fees);
                db.AddInParameter(cmd, "@overdraft_fees_max", DbType.Currency, savingBookProduct.overdraft_fees_max);
                db.AddInParameter(cmd, "@overdraft_fees_min", DbType.Currency, savingBookProduct.overdraft_fees_min);
                db.AddInParameter(cmd, "@agio_fees", DbType.Double, savingBookProduct.agio_fees);
                db.AddInParameter(cmd, "@agio_fees_max", DbType.Double, savingBookProduct.agio_fees_max);
                db.AddInParameter(cmd, "@agio_fees_min", DbType.Double, savingBookProduct.agio_fees_min);
                db.AddInParameter(cmd, "@agio_fees_freq", DbType.Int32, savingBookProduct.agio_fees_freq);
                db.AddInParameter(cmd, "@cheque_deposit_min", DbType.Currency, savingBookProduct.cheque_deposit_min);
                db.AddInParameter(cmd, "@cheque_deposit_max", DbType.Currency, savingBookProduct.cheque_deposit_max);
                db.AddInParameter(cmd, "@cheque_deposit_fees", DbType.Currency, savingBookProduct.cheque_deposit_fees);
                db.AddInParameter(cmd, "@cheque_deposit_fees_min", DbType.Currency, savingBookProduct.cheque_deposit_fees_min);
                db.AddInParameter(cmd, "@cheque_deposit_fees_max", DbType.Currency, savingBookProduct.cheque_deposit_fees_max);
                db.AddInParameter(cmd, "@reopen_fees", DbType.Currency, savingBookProduct.reopen_fees);
                db.AddInParameter(cmd, "@reopen_fees_min", DbType.Currency, savingBookProduct.reopen_fees_min);
                db.AddInParameter(cmd, "@reopen_fees_max", DbType.Currency, savingBookProduct.reopen_fees_max);
                db.AddInParameter(cmd, "@is_ibt_fee_flat", DbType.Boolean, savingBookProduct.is_ibt_fee_flat);
                db.AddInParameter(cmd, "@ibt_fee_min", DbType.Currency, savingBookProduct.ibt_fee_min);
                db.AddInParameter(cmd, "@ibt_fee_max", DbType.Currency, savingBookProduct.ibt_fee_max);
                db.AddInParameter(cmd, "@ibt_fee", DbType.Currency, savingBookProduct.ibt_fee);
                db.AddInParameter(cmd, "@use_term_deposit", DbType.Boolean, savingBookProduct.use_term_deposit);
                db.AddInParameter(cmd, "@term_deposit_period_min", DbType.Int32, savingBookProduct.term_deposit_period_min);
                db.AddInParameter(cmd, "@term_deposit_period_max", DbType.Int32, savingBookProduct.term_deposit_period_max);
                db.AddInParameter(cmd, "@posting_frequency", DbType.Int32, savingBookProduct.posting_frequency);

                db.ExecuteNonQuery(cmd);
            }

            return savingBookProduct;
        }

        /// <summary>
        /// Updates an existing row in the SavingBookProducts table.
        /// </summary>
        /// <param name="savingBookProduct">A SavingBookProduct entity object.</param>
        public void UpdateById(SavingBookProduct savingBookProduct)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SavingBookProducts " +
                "SET " +
                    "[interest_base]=@interest_base, " +
                    "[interest_frequency]=@interest_frequency, " +
                    "[calcul_amount_base]=@calcul_amount_base, " +
                    "[withdraw_fees_type]=@withdraw_fees_type, " +
                    "[flat_withdraw_fees_min]=@flat_withdraw_fees_min, " +
                    "[flat_withdraw_fees_max]=@flat_withdraw_fees_max, " +
                    "[flat_withdraw_fees]=@flat_withdraw_fees, " +
                    "[rate_withdraw_fees_min]=@rate_withdraw_fees_min, " +
                    "[rate_withdraw_fees_max]=@rate_withdraw_fees_max, " +
                    "[rate_withdraw_fees]=@rate_withdraw_fees, " +
                    "[transfer_fees_type]=@transfer_fees_type, " +
                    "[flat_transfer_fees_min]=@flat_transfer_fees_min, " +
                    "[flat_transfer_fees_max]=@flat_transfer_fees_max, " +
                    "[flat_transfer_fees]=@flat_transfer_fees, " +
                    "[rate_transfer_fees_min]=@rate_transfer_fees_min, " +
                    "[rate_transfer_fees_max]=@rate_transfer_fees_max, " +
                    "[rate_transfer_fees]=@rate_transfer_fees, " +
                    "[deposit_fees]=@deposit_fees, " +
                    "[deposit_fees_max]=@deposit_fees_max, " +
                    "[deposit_fees_min]=@deposit_fees_min, " +
                    "[close_fees]=@close_fees, " +
                    "[close_fees_max]=@close_fees_max, " +
                    "[close_fees_min]=@close_fees_min, " +
                    "[management_fees]=@management_fees, " +
                    "[management_fees_max]=@management_fees_max, " +
                    "[management_fees_min]=@management_fees_min, " +
                    "[management_fees_freq]=@management_fees_freq, " +
                    "[overdraft_fees]=@overdraft_fees, " +
                    "[overdraft_fees_max]=@overdraft_fees_max, " +
                    "[overdraft_fees_min]=@overdraft_fees_min, " +
                    "[agio_fees]=@agio_fees, " +
                    "[agio_fees_max]=@agio_fees_max, " +
                    "[agio_fees_min]=@agio_fees_min, " +
                    "[agio_fees_freq]=@agio_fees_freq, " +
                    "[cheque_deposit_min]=@cheque_deposit_min, " +
                    "[cheque_deposit_max]=@cheque_deposit_max, " +
                    "[cheque_deposit_fees]=@cheque_deposit_fees, " +
                    "[cheque_deposit_fees_min]=@cheque_deposit_fees_min, " +
                    "[cheque_deposit_fees_max]=@cheque_deposit_fees_max, " +
                    "[reopen_fees]=@reopen_fees, " +
                    "[reopen_fees_min]=@reopen_fees_min, " +
                    "[reopen_fees_max]=@reopen_fees_max, " +
                    "[is_ibt_fee_flat]=@is_ibt_fee_flat, " +
                    "[ibt_fee_min]=@ibt_fee_min, " +
                    "[ibt_fee_max]=@ibt_fee_max, " +
                    "[ibt_fee]=@ibt_fee, " +
                    "[use_term_deposit]=@use_term_deposit, " +
                    "[term_deposit_period_min]=@term_deposit_period_min, " +
                    "[term_deposit_period_max]=@term_deposit_period_max, " +
                    "[posting_frequency]=@posting_frequency " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@interest_base", DbType.Int16, savingBookProduct.interest_base);
                db.AddInParameter(cmd, "@interest_frequency", DbType.Int16, savingBookProduct.interest_frequency);
                db.AddInParameter(cmd, "@calcul_amount_base", DbType.Int16, savingBookProduct.calcul_amount_base);
                db.AddInParameter(cmd, "@withdraw_fees_type", DbType.Int16, savingBookProduct.withdraw_fees_type);
                db.AddInParameter(cmd, "@flat_withdraw_fees_min", DbType.Currency, savingBookProduct.flat_withdraw_fees_min);
                db.AddInParameter(cmd, "@flat_withdraw_fees_max", DbType.Currency, savingBookProduct.flat_withdraw_fees_max);
                db.AddInParameter(cmd, "@flat_withdraw_fees", DbType.Currency, savingBookProduct.flat_withdraw_fees);
                db.AddInParameter(cmd, "@rate_withdraw_fees_min", DbType.Double, savingBookProduct.rate_withdraw_fees_min);
                db.AddInParameter(cmd, "@rate_withdraw_fees_max", DbType.Double, savingBookProduct.rate_withdraw_fees_max);
                db.AddInParameter(cmd, "@rate_withdraw_fees", DbType.Double, savingBookProduct.rate_withdraw_fees);
                db.AddInParameter(cmd, "@transfer_fees_type", DbType.Int16, savingBookProduct.transfer_fees_type);
                db.AddInParameter(cmd, "@flat_transfer_fees_min", DbType.Currency, savingBookProduct.flat_transfer_fees_min);
                db.AddInParameter(cmd, "@flat_transfer_fees_max", DbType.Currency, savingBookProduct.flat_transfer_fees_max);
                db.AddInParameter(cmd, "@flat_transfer_fees", DbType.Currency, savingBookProduct.flat_transfer_fees);
                db.AddInParameter(cmd, "@rate_transfer_fees_min", DbType.Double, savingBookProduct.rate_transfer_fees_min);
                db.AddInParameter(cmd, "@rate_transfer_fees_max", DbType.Double, savingBookProduct.rate_transfer_fees_max);
                db.AddInParameter(cmd, "@rate_transfer_fees", DbType.Double, savingBookProduct.rate_transfer_fees);
                db.AddInParameter(cmd, "@deposit_fees", DbType.Currency, savingBookProduct.deposit_fees);
                db.AddInParameter(cmd, "@deposit_fees_max", DbType.Currency, savingBookProduct.deposit_fees_max);
                db.AddInParameter(cmd, "@deposit_fees_min", DbType.Currency, savingBookProduct.deposit_fees_min);
                db.AddInParameter(cmd, "@close_fees", DbType.Currency, savingBookProduct.close_fees);
                db.AddInParameter(cmd, "@close_fees_max", DbType.Currency, savingBookProduct.close_fees_max);
                db.AddInParameter(cmd, "@close_fees_min", DbType.Currency, savingBookProduct.close_fees_min);
                db.AddInParameter(cmd, "@management_fees", DbType.Currency, savingBookProduct.management_fees);
                db.AddInParameter(cmd, "@management_fees_max", DbType.Currency, savingBookProduct.management_fees_max);
                db.AddInParameter(cmd, "@management_fees_min", DbType.Currency, savingBookProduct.management_fees_min);
                db.AddInParameter(cmd, "@management_fees_freq", DbType.Int32, savingBookProduct.management_fees_freq);
                db.AddInParameter(cmd, "@overdraft_fees", DbType.Currency, savingBookProduct.overdraft_fees);
                db.AddInParameter(cmd, "@overdraft_fees_max", DbType.Currency, savingBookProduct.overdraft_fees_max);
                db.AddInParameter(cmd, "@overdraft_fees_min", DbType.Currency, savingBookProduct.overdraft_fees_min);
                db.AddInParameter(cmd, "@agio_fees", DbType.Double, savingBookProduct.agio_fees);
                db.AddInParameter(cmd, "@agio_fees_max", DbType.Double, savingBookProduct.agio_fees_max);
                db.AddInParameter(cmd, "@agio_fees_min", DbType.Double, savingBookProduct.agio_fees_min);
                db.AddInParameter(cmd, "@agio_fees_freq", DbType.Int32, savingBookProduct.agio_fees_freq);
                db.AddInParameter(cmd, "@cheque_deposit_min", DbType.Currency, savingBookProduct.cheque_deposit_min);
                db.AddInParameter(cmd, "@cheque_deposit_max", DbType.Currency, savingBookProduct.cheque_deposit_max);
                db.AddInParameter(cmd, "@cheque_deposit_fees", DbType.Currency, savingBookProduct.cheque_deposit_fees);
                db.AddInParameter(cmd, "@cheque_deposit_fees_min", DbType.Currency, savingBookProduct.cheque_deposit_fees_min);
                db.AddInParameter(cmd, "@cheque_deposit_fees_max", DbType.Currency, savingBookProduct.cheque_deposit_fees_max);
                db.AddInParameter(cmd, "@reopen_fees", DbType.Currency, savingBookProduct.reopen_fees);
                db.AddInParameter(cmd, "@reopen_fees_min", DbType.Currency, savingBookProduct.reopen_fees_min);
                db.AddInParameter(cmd, "@reopen_fees_max", DbType.Currency, savingBookProduct.reopen_fees_max);
                db.AddInParameter(cmd, "@is_ibt_fee_flat", DbType.Boolean, savingBookProduct.is_ibt_fee_flat);
                db.AddInParameter(cmd, "@ibt_fee_min", DbType.Currency, savingBookProduct.ibt_fee_min);
                db.AddInParameter(cmd, "@ibt_fee_max", DbType.Currency, savingBookProduct.ibt_fee_max);
                db.AddInParameter(cmd, "@ibt_fee", DbType.Currency, savingBookProduct.ibt_fee);
                db.AddInParameter(cmd, "@use_term_deposit", DbType.Boolean, savingBookProduct.use_term_deposit);
                db.AddInParameter(cmd, "@term_deposit_period_min", DbType.Int32, savingBookProduct.term_deposit_period_min);
                db.AddInParameter(cmd, "@term_deposit_period_max", DbType.Int32, savingBookProduct.term_deposit_period_max);
                db.AddInParameter(cmd, "@posting_frequency", DbType.Int32, savingBookProduct.posting_frequency);
                db.AddInParameter(cmd, "@id", DbType.Int32, savingBookProduct.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SavingBookProducts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SavingBookProducts " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SavingBookProducts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A SavingBookProduct object with data populated from the database.</returns>
        public SavingBookProduct SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [interest_base], [interest_frequency], [calcul_amount_base], [withdraw_fees_type]" +
                        ", [flat_withdraw_fees_min], [flat_withdraw_fees_max], [flat_withdraw_fees], [rate_withdraw_fees_min]" +
                        ", [rate_withdraw_fees_max], [rate_withdraw_fees], [transfer_fees_type], [flat_transfer_fees_min]" +
                        ", [flat_transfer_fees_max], [flat_transfer_fees], [rate_transfer_fees_min], [rate_transfer_fees_max]" +
                        ", [rate_transfer_fees], [deposit_fees], [deposit_fees_max], [deposit_fees_min], [close_fees]" +
                        ", [close_fees_max], [close_fees_min], [management_fees], [management_fees_max], [management_fees_min]" +
                        ", [management_fees_freq], [overdraft_fees], [overdraft_fees_max], [overdraft_fees_min]" +
                        ", [agio_fees], [agio_fees_max], [agio_fees_min], [agio_fees_freq], [cheque_deposit_min]" +
                        ", [cheque_deposit_max], [cheque_deposit_fees], [cheque_deposit_fees_min], [cheque_deposit_fees_max]" +
                        ", [reopen_fees], [reopen_fees_min], [reopen_fees_max], [is_ibt_fee_flat], [ibt_fee_min]" +
                        ", [ibt_fee_max], [ibt_fee], [use_term_deposit], [term_deposit_period_min], [term_deposit_period_max]" +
                        ", [posting_frequency] " +
                "FROM dbo.SavingBookProducts  " +
                "WHERE [id]=@id ";

            SavingBookProduct savingBookProduct = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SavingBookProduct
                        savingBookProduct = new SavingBookProduct();

                        // Read values.
                        savingBookProduct.id = base.GetDataValue<int>(dr, "id");
                        savingBookProduct.interest_base = base.GetDataValue<short>(dr, "interest_base");
                        savingBookProduct.interest_frequency = base.GetDataValue<short>(dr, "interest_frequency");
                        savingBookProduct.calcul_amount_base = base.GetDataValue<short>(dr, "calcul_amount_base");
                        savingBookProduct.withdraw_fees_type = base.GetDataValue<short>(dr, "withdraw_fees_type");
                        savingBookProduct.flat_withdraw_fees_min = base.GetDataValue<decimal>(dr, "flat_withdraw_fees_min");
                        savingBookProduct.flat_withdraw_fees_max = base.GetDataValue<decimal>(dr, "flat_withdraw_fees_max");
                        savingBookProduct.flat_withdraw_fees = base.GetDataValue<decimal>(dr, "flat_withdraw_fees");
                        savingBookProduct.rate_withdraw_fees_min = base.GetDataValue<double>(dr, "rate_withdraw_fees_min");
                        savingBookProduct.rate_withdraw_fees_max = base.GetDataValue<double>(dr, "rate_withdraw_fees_max");
                        savingBookProduct.rate_withdraw_fees = base.GetDataValue<double>(dr, "rate_withdraw_fees");
                        savingBookProduct.transfer_fees_type = base.GetDataValue<short>(dr, "transfer_fees_type");
                        savingBookProduct.flat_transfer_fees_min = base.GetDataValue<decimal>(dr, "flat_transfer_fees_min");
                        savingBookProduct.flat_transfer_fees_max = base.GetDataValue<decimal>(dr, "flat_transfer_fees_max");
                        savingBookProduct.flat_transfer_fees = base.GetDataValue<decimal>(dr, "flat_transfer_fees");
                        savingBookProduct.rate_transfer_fees_min = base.GetDataValue<double>(dr, "rate_transfer_fees_min");
                        savingBookProduct.rate_transfer_fees_max = base.GetDataValue<double>(dr, "rate_transfer_fees_max");
                        savingBookProduct.rate_transfer_fees = base.GetDataValue<double>(dr, "rate_transfer_fees");
                        savingBookProduct.deposit_fees = base.GetDataValue<decimal>(dr, "deposit_fees");
                        savingBookProduct.deposit_fees_max = base.GetDataValue<decimal>(dr, "deposit_fees_max");
                        savingBookProduct.deposit_fees_min = base.GetDataValue<decimal>(dr, "deposit_fees_min");
                        savingBookProduct.close_fees = base.GetDataValue<decimal>(dr, "close_fees");
                        savingBookProduct.close_fees_max = base.GetDataValue<decimal>(dr, "close_fees_max");
                        savingBookProduct.close_fees_min = base.GetDataValue<decimal>(dr, "close_fees_min");
                        savingBookProduct.management_fees = base.GetDataValue<decimal>(dr, "management_fees");
                        savingBookProduct.management_fees_max = base.GetDataValue<decimal>(dr, "management_fees_max");
                        savingBookProduct.management_fees_min = base.GetDataValue<decimal>(dr, "management_fees_min");
                        savingBookProduct.management_fees_freq = base.GetDataValue<int>(dr, "management_fees_freq");
                        savingBookProduct.overdraft_fees = base.GetDataValue<decimal>(dr, "overdraft_fees");
                        savingBookProduct.overdraft_fees_max = base.GetDataValue<decimal>(dr, "overdraft_fees_max");
                        savingBookProduct.overdraft_fees_min = base.GetDataValue<decimal>(dr, "overdraft_fees_min");
                        savingBookProduct.agio_fees = base.GetDataValue<double>(dr, "agio_fees");
                        savingBookProduct.agio_fees_max = base.GetDataValue<double>(dr, "agio_fees_max");
                        savingBookProduct.agio_fees_min = base.GetDataValue<double>(dr, "agio_fees_min");
                        savingBookProduct.agio_fees_freq = base.GetDataValue<int>(dr, "agio_fees_freq");
                        savingBookProduct.cheque_deposit_min = base.GetDataValue<decimal>(dr, "cheque_deposit_min");
                        savingBookProduct.cheque_deposit_max = base.GetDataValue<decimal>(dr, "cheque_deposit_max");
                        savingBookProduct.cheque_deposit_fees = base.GetDataValue<decimal>(dr, "cheque_deposit_fees");
                        savingBookProduct.cheque_deposit_fees_min = base.GetDataValue<decimal>(dr, "cheque_deposit_fees_min");
                        savingBookProduct.cheque_deposit_fees_max = base.GetDataValue<decimal>(dr, "cheque_deposit_fees_max");
                        savingBookProduct.reopen_fees = base.GetDataValue<decimal>(dr, "reopen_fees");
                        savingBookProduct.reopen_fees_min = base.GetDataValue<decimal>(dr, "reopen_fees_min");
                        savingBookProduct.reopen_fees_max = base.GetDataValue<decimal>(dr, "reopen_fees_max");
                        savingBookProduct.is_ibt_fee_flat = base.GetDataValue<bool>(dr, "is_ibt_fee_flat");
                        savingBookProduct.ibt_fee_min = base.GetDataValue<decimal>(dr, "ibt_fee_min");
                        savingBookProduct.ibt_fee_max = base.GetDataValue<decimal>(dr, "ibt_fee_max");
                        savingBookProduct.ibt_fee = base.GetDataValue<decimal>(dr, "ibt_fee");
                        savingBookProduct.use_term_deposit = base.GetDataValue<bool>(dr, "use_term_deposit");
                        savingBookProduct.term_deposit_period_min = base.GetDataValue<int>(dr, "term_deposit_period_min");
                        savingBookProduct.term_deposit_period_max = base.GetDataValue<int>(dr, "term_deposit_period_max");
                        savingBookProduct.posting_frequency = base.GetDataValue<int>(dr, "posting_frequency");
                    }
                }
            }

            return savingBookProduct;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SavingBookProducts table.
        /// </summary>
        /// <returns>A collection of SavingBookProduct objects.</returns>		
        public List<SavingBookProduct> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [interest_base], [interest_frequency], [calcul_amount_base], [withdraw_fees_type]" +
                        ", [flat_withdraw_fees_min], [flat_withdraw_fees_max], [flat_withdraw_fees], [rate_withdraw_fees_min]" +
                        ", [rate_withdraw_fees_max], [rate_withdraw_fees], [transfer_fees_type], [flat_transfer_fees_min]" +
                        ", [flat_transfer_fees_max], [flat_transfer_fees], [rate_transfer_fees_min], [rate_transfer_fees_max]" +
                        ", [rate_transfer_fees], [deposit_fees], [deposit_fees_max], [deposit_fees_min], [close_fees]" +
                        ", [close_fees_max], [close_fees_min], [management_fees], [management_fees_max], [management_fees_min]" +
                        ", [management_fees_freq], [overdraft_fees], [overdraft_fees_max], [overdraft_fees_min]" +
                        ", [agio_fees], [agio_fees_max], [agio_fees_min], [agio_fees_freq], [cheque_deposit_min]" +
                        ", [cheque_deposit_max], [cheque_deposit_fees], [cheque_deposit_fees_min], [cheque_deposit_fees_max]" +
                        ", [reopen_fees], [reopen_fees_min], [reopen_fees_max], [is_ibt_fee_flat], [ibt_fee_min]" +
                        ", [ibt_fee_max], [ibt_fee], [use_term_deposit], [term_deposit_period_min], [term_deposit_period_max]" +
                        ", [posting_frequency] " +
                "FROM dbo.SavingBookProducts ";

            List<SavingBookProduct> result = new List<SavingBookProduct>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SavingBookProduct
                        SavingBookProduct savingBookProduct = new SavingBookProduct();

                        // Read values.
                        savingBookProduct.id = base.GetDataValue<int>(dr, "id");
                        savingBookProduct.interest_base = base.GetDataValue<short>(dr, "interest_base");
                        savingBookProduct.interest_frequency = base.GetDataValue<short>(dr, "interest_frequency");
                        savingBookProduct.calcul_amount_base = base.GetDataValue<short>(dr, "calcul_amount_base");
                        savingBookProduct.withdraw_fees_type = base.GetDataValue<short>(dr, "withdraw_fees_type");
                        savingBookProduct.flat_withdraw_fees_min = base.GetDataValue<decimal>(dr, "flat_withdraw_fees_min");
                        savingBookProduct.flat_withdraw_fees_max = base.GetDataValue<decimal>(dr, "flat_withdraw_fees_max");
                        savingBookProduct.flat_withdraw_fees = base.GetDataValue<decimal>(dr, "flat_withdraw_fees");
                        savingBookProduct.rate_withdraw_fees_min = base.GetDataValue<double>(dr, "rate_withdraw_fees_min");
                        savingBookProduct.rate_withdraw_fees_max = base.GetDataValue<double>(dr, "rate_withdraw_fees_max");
                        savingBookProduct.rate_withdraw_fees = base.GetDataValue<double>(dr, "rate_withdraw_fees");
                        savingBookProduct.transfer_fees_type = base.GetDataValue<short>(dr, "transfer_fees_type");
                        savingBookProduct.flat_transfer_fees_min = base.GetDataValue<decimal>(dr, "flat_transfer_fees_min");
                        savingBookProduct.flat_transfer_fees_max = base.GetDataValue<decimal>(dr, "flat_transfer_fees_max");
                        savingBookProduct.flat_transfer_fees = base.GetDataValue<decimal>(dr, "flat_transfer_fees");
                        savingBookProduct.rate_transfer_fees_min = base.GetDataValue<double>(dr, "rate_transfer_fees_min");
                        savingBookProduct.rate_transfer_fees_max = base.GetDataValue<double>(dr, "rate_transfer_fees_max");
                        savingBookProduct.rate_transfer_fees = base.GetDataValue<double>(dr, "rate_transfer_fees");
                        savingBookProduct.deposit_fees = base.GetDataValue<decimal>(dr, "deposit_fees");
                        savingBookProduct.deposit_fees_max = base.GetDataValue<decimal>(dr, "deposit_fees_max");
                        savingBookProduct.deposit_fees_min = base.GetDataValue<decimal>(dr, "deposit_fees_min");
                        savingBookProduct.close_fees = base.GetDataValue<decimal>(dr, "close_fees");
                        savingBookProduct.close_fees_max = base.GetDataValue<decimal>(dr, "close_fees_max");
                        savingBookProduct.close_fees_min = base.GetDataValue<decimal>(dr, "close_fees_min");
                        savingBookProduct.management_fees = base.GetDataValue<decimal>(dr, "management_fees");
                        savingBookProduct.management_fees_max = base.GetDataValue<decimal>(dr, "management_fees_max");
                        savingBookProduct.management_fees_min = base.GetDataValue<decimal>(dr, "management_fees_min");
                        savingBookProduct.management_fees_freq = base.GetDataValue<int>(dr, "management_fees_freq");
                        savingBookProduct.overdraft_fees = base.GetDataValue<decimal>(dr, "overdraft_fees");
                        savingBookProduct.overdraft_fees_max = base.GetDataValue<decimal>(dr, "overdraft_fees_max");
                        savingBookProduct.overdraft_fees_min = base.GetDataValue<decimal>(dr, "overdraft_fees_min");
                        savingBookProduct.agio_fees = base.GetDataValue<double>(dr, "agio_fees");
                        savingBookProduct.agio_fees_max = base.GetDataValue<double>(dr, "agio_fees_max");
                        savingBookProduct.agio_fees_min = base.GetDataValue<double>(dr, "agio_fees_min");
                        savingBookProduct.agio_fees_freq = base.GetDataValue<int>(dr, "agio_fees_freq");
                        savingBookProduct.cheque_deposit_min = base.GetDataValue<decimal>(dr, "cheque_deposit_min");
                        savingBookProduct.cheque_deposit_max = base.GetDataValue<decimal>(dr, "cheque_deposit_max");
                        savingBookProduct.cheque_deposit_fees = base.GetDataValue<decimal>(dr, "cheque_deposit_fees");
                        savingBookProduct.cheque_deposit_fees_min = base.GetDataValue<decimal>(dr, "cheque_deposit_fees_min");
                        savingBookProduct.cheque_deposit_fees_max = base.GetDataValue<decimal>(dr, "cheque_deposit_fees_max");
                        savingBookProduct.reopen_fees = base.GetDataValue<decimal>(dr, "reopen_fees");
                        savingBookProduct.reopen_fees_min = base.GetDataValue<decimal>(dr, "reopen_fees_min");
                        savingBookProduct.reopen_fees_max = base.GetDataValue<decimal>(dr, "reopen_fees_max");
                        savingBookProduct.is_ibt_fee_flat = base.GetDataValue<bool>(dr, "is_ibt_fee_flat");
                        savingBookProduct.ibt_fee_min = base.GetDataValue<decimal>(dr, "ibt_fee_min");
                        savingBookProduct.ibt_fee_max = base.GetDataValue<decimal>(dr, "ibt_fee_max");
                        savingBookProduct.ibt_fee = base.GetDataValue<decimal>(dr, "ibt_fee");
                        savingBookProduct.use_term_deposit = base.GetDataValue<bool>(dr, "use_term_deposit");
                        savingBookProduct.term_deposit_period_min = base.GetDataValue<int>(dr, "term_deposit_period_min");
                        savingBookProduct.term_deposit_period_max = base.GetDataValue<int>(dr, "term_deposit_period_max");
                        savingBookProduct.posting_frequency = base.GetDataValue<int>(dr, "posting_frequency");

                        // Add to List.
                        result.Add(savingBookProduct);
                    }
                }
            }

            return result;
        }
    }
}

