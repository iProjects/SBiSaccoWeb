//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Projects data access component. Manages CRUD operations for the Projects table.
    /// </summary>
    public partial class ProjectDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Projects table.
        /// </summary>
        /// <param name="project">A Project object.</param>
        /// <returns>An updated Project object.</returns>
        public Project Create(Project project)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Projects ([tiers_id], [status], [name], [code], [aim], [begin_date], [abilities], [experience], [market], [concurrence], [purpose], [corporate_name], [corporate_juridicStatus], [corporate_FiscalStatus], [corporate_siret], [corporate_CA], [corporate_nbOfJobs], [corporate_financialPlanType], [corporateFinancialPlanAmount], [corporate_financialPlanTotalAmount], [address], [city], [zipCode], [district_id], [home_phone], [personalPhone], [Email], [hometype], [corporate_registre]) " +
                "VALUES(@tiers_id, @status, @name, @code, @aim, @begin_date, @abilities, @experience, @market, @concurrence, @purpose, @corporate_name, @corporate_juridicStatus, @corporate_FiscalStatus, @corporate_siret, @corporate_CA, @corporate_nbOfJobs, @corporate_financialPlanType, @corporateFinancialPlanAmount, @corporate_financialPlanTotalAmount, @address, @city, @zipCode, @district_id, @home_phone, @personalPhone, @Email, @hometype, @corporate_registre); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@tiers_id", DbType.Int32, project.tiers_id);
                db.AddInParameter(cmd, "@status", DbType.Int16, project.status);
                db.AddInParameter(cmd, "@name", DbType.String, project.name);
                db.AddInParameter(cmd, "@code", DbType.String, project.code);
                db.AddInParameter(cmd, "@aim", DbType.String, project.aim);
                db.AddInParameter(cmd, "@begin_date", DbType.DateTime, project.begin_date);
                db.AddInParameter(cmd, "@abilities", DbType.String, project.abilities);
                db.AddInParameter(cmd, "@experience", DbType.String, project.experience);
                db.AddInParameter(cmd, "@market", DbType.String, project.market);
                db.AddInParameter(cmd, "@concurrence", DbType.String, project.concurrence);
                db.AddInParameter(cmd, "@purpose", DbType.String, project.purpose);
                db.AddInParameter(cmd, "@corporate_name", DbType.String, project.corporate_name);
                db.AddInParameter(cmd, "@corporate_juridicStatus", DbType.String, project.corporate_juridicStatus);
                db.AddInParameter(cmd, "@corporate_FiscalStatus", DbType.String, project.corporate_FiscalStatus);
                db.AddInParameter(cmd, "@corporate_siret", DbType.String, project.corporate_siret);
                db.AddInParameter(cmd, "@corporate_CA", DbType.Currency, project.corporate_CA);
                db.AddInParameter(cmd, "@corporate_nbOfJobs", DbType.Int32, project.corporate_nbOfJobs);
                db.AddInParameter(cmd, "@corporate_financialPlanType", DbType.String, project.corporate_financialPlanType);
                db.AddInParameter(cmd, "@corporateFinancialPlanAmount", DbType.Currency, project.corporateFinancialPlanAmount);
                db.AddInParameter(cmd, "@corporate_financialPlanTotalAmount", DbType.Currency, project.corporate_financialPlanTotalAmount);
                db.AddInParameter(cmd, "@address", DbType.String, project.address);
                db.AddInParameter(cmd, "@city", DbType.String, project.city);
                db.AddInParameter(cmd, "@zipCode", DbType.String, project.zipCode);
                db.AddInParameter(cmd, "@district_id", DbType.Int32, project.district_id);
                db.AddInParameter(cmd, "@home_phone", DbType.String, project.home_phone);
                db.AddInParameter(cmd, "@personalPhone", DbType.String, project.personalPhone);
                db.AddInParameter(cmd, "@Email", DbType.String, project.Email);
                db.AddInParameter(cmd, "@hometype", DbType.String, project.hometype);
                db.AddInParameter(cmd, "@corporate_registre", DbType.String, project.corporate_registre);

                // Get the primary key value.
                project.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return project;
        }

        /// <summary>
        /// Updates an existing row in the Projects table.
        /// </summary>
        /// <param name="project">A Project entity object.</param>
        public void UpdateById(Project project)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Projects " +
                "SET " +
                    "[tiers_id]=@tiers_id, " +
                    "[status]=@status, " +
                    "[name]=@name, " +
                    "[code]=@code, " +
                    "[aim]=@aim, " +
                    "[begin_date]=@begin_date, " +
                    "[abilities]=@abilities, " +
                    "[experience]=@experience, " +
                    "[market]=@market, " +
                    "[concurrence]=@concurrence, " +
                    "[purpose]=@purpose, " +
                    "[corporate_name]=@corporate_name, " +
                    "[corporate_juridicStatus]=@corporate_juridicStatus, " +
                    "[corporate_FiscalStatus]=@corporate_FiscalStatus, " +
                    "[corporate_siret]=@corporate_siret, " +
                    "[corporate_CA]=@corporate_CA, " +
                    "[corporate_nbOfJobs]=@corporate_nbOfJobs, " +
                    "[corporate_financialPlanType]=@corporate_financialPlanType, " +
                    "[corporateFinancialPlanAmount]=@corporateFinancialPlanAmount, " +
                    "[corporate_financialPlanTotalAmount]=@corporate_financialPlanTotalAmount, " +
                    "[address]=@address, " +
                    "[city]=@city, " +
                    "[zipCode]=@zipCode, " +
                    "[district_id]=@district_id, " +
                    "[home_phone]=@home_phone, " +
                    "[personalPhone]=@personalPhone, " +
                    "[Email]=@Email, " +
                    "[hometype]=@hometype, " +
                    "[corporate_registre]=@corporate_registre " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@tiers_id", DbType.Int32, project.tiers_id);
                db.AddInParameter(cmd, "@status", DbType.Int16, project.status);
                db.AddInParameter(cmd, "@name", DbType.String, project.name);
                db.AddInParameter(cmd, "@code", DbType.String, project.code);
                db.AddInParameter(cmd, "@aim", DbType.String, project.aim);
                db.AddInParameter(cmd, "@begin_date", DbType.DateTime, project.begin_date);
                db.AddInParameter(cmd, "@abilities", DbType.String, project.abilities);
                db.AddInParameter(cmd, "@experience", DbType.String, project.experience);
                db.AddInParameter(cmd, "@market", DbType.String, project.market);
                db.AddInParameter(cmd, "@concurrence", DbType.String, project.concurrence);
                db.AddInParameter(cmd, "@purpose", DbType.String, project.purpose);
                db.AddInParameter(cmd, "@corporate_name", DbType.String, project.corporate_name);
                db.AddInParameter(cmd, "@corporate_juridicStatus", DbType.String, project.corporate_juridicStatus);
                db.AddInParameter(cmd, "@corporate_FiscalStatus", DbType.String, project.corporate_FiscalStatus);
                db.AddInParameter(cmd, "@corporate_siret", DbType.String, project.corporate_siret);
                db.AddInParameter(cmd, "@corporate_CA", DbType.Currency, project.corporate_CA);
                db.AddInParameter(cmd, "@corporate_nbOfJobs", DbType.Int32, project.corporate_nbOfJobs);
                db.AddInParameter(cmd, "@corporate_financialPlanType", DbType.String, project.corporate_financialPlanType);
                db.AddInParameter(cmd, "@corporateFinancialPlanAmount", DbType.Currency, project.corporateFinancialPlanAmount);
                db.AddInParameter(cmd, "@corporate_financialPlanTotalAmount", DbType.Currency, project.corporate_financialPlanTotalAmount);
                db.AddInParameter(cmd, "@address", DbType.String, project.address);
                db.AddInParameter(cmd, "@city", DbType.String, project.city);
                db.AddInParameter(cmd, "@zipCode", DbType.String, project.zipCode);
                db.AddInParameter(cmd, "@district_id", DbType.Int32, project.district_id);
                db.AddInParameter(cmd, "@home_phone", DbType.String, project.home_phone);
                db.AddInParameter(cmd, "@personalPhone", DbType.String, project.personalPhone);
                db.AddInParameter(cmd, "@Email", DbType.String, project.Email);
                db.AddInParameter(cmd, "@hometype", DbType.String, project.hometype);
                db.AddInParameter(cmd, "@corporate_registre", DbType.String, project.corporate_registre);
                db.AddInParameter(cmd, "@id", DbType.Int32, project.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Projects table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Projects " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Projects table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Project object with data populated from the database.</returns>
        public Project SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [tiers_id], [status], [name], [code], [aim], [begin_date], [abilities], [experience]" +
                        ", [market], [concurrence], [purpose], [corporate_name], [corporate_juridicStatus]" +
                        ", [corporate_FiscalStatus], [corporate_siret], [corporate_CA], [corporate_nbOfJobs]" +
                        ", [corporate_financialPlanType], [corporateFinancialPlanAmount], [corporate_financialPlanTotalAmount]" +
                        ", [address], [city], [zipCode], [district_id], [home_phone], [personalPhone], [Email]" +
                        ", [hometype], [corporate_registre] " +
                "FROM dbo.Projects  " +
                "WHERE [id]=@id ";

            Project project = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Project
                        project = new Project();

                        // Read values.
                        project.id = base.GetDataValue<int>(dr, "id");
                        project.tiers_id = base.GetDataValue<int>(dr, "tiers_id");
                        project.status = base.GetDataValue<short>(dr, "status");
                        project.name = base.GetDataValue<string>(dr, "name");
                        project.code = base.GetDataValue<string>(dr, "code");
                        project.aim = base.GetDataValue<string>(dr, "aim");
                        project.begin_date = base.GetDataValue<DateTime>(dr, "begin_date");
                        project.abilities = base.GetDataValue<string>(dr, "abilities");
                        project.experience = base.GetDataValue<string>(dr, "experience");
                        project.market = base.GetDataValue<string>(dr, "market");
                        project.concurrence = base.GetDataValue<string>(dr, "concurrence");
                        project.purpose = base.GetDataValue<string>(dr, "purpose");
                        project.corporate_name = base.GetDataValue<string>(dr, "corporate_name");
                        project.corporate_juridicStatus = base.GetDataValue<string>(dr, "corporate_juridicStatus");
                        project.corporate_FiscalStatus = base.GetDataValue<string>(dr, "corporate_FiscalStatus");
                        project.corporate_siret = base.GetDataValue<string>(dr, "corporate_siret");
                        project.corporate_CA = base.GetDataValue<decimal>(dr, "corporate_CA");
                        project.corporate_nbOfJobs = base.GetDataValue<int>(dr, "corporate_nbOfJobs");
                        project.corporate_financialPlanType = base.GetDataValue<string>(dr, "corporate_financialPlanType");
                        project.corporateFinancialPlanAmount = base.GetDataValue<decimal>(dr, "corporateFinancialPlanAmount");
                        project.corporate_financialPlanTotalAmount = base.GetDataValue<decimal>(dr, "corporate_financialPlanTotalAmount");
                        project.address = base.GetDataValue<string>(dr, "address");
                        project.city = base.GetDataValue<string>(dr, "city");
                        project.zipCode = base.GetDataValue<string>(dr, "zipCode");
                        project.district_id = base.GetDataValue<int>(dr, "district_id");
                        project.home_phone = base.GetDataValue<string>(dr, "home_phone");
                        project.personalPhone = base.GetDataValue<string>(dr, "personalPhone");
                        project.Email = base.GetDataValue<string>(dr, "Email");
                        project.hometype = base.GetDataValue<string>(dr, "hometype");
                        project.corporate_registre = base.GetDataValue<string>(dr, "corporate_registre");
                    }
                }
            }

            return project;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Projects table.
        /// </summary>
        /// <returns>A collection of Project objects.</returns>		
        public List<Project> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [tiers_id], [status], [name], [code], [aim], [begin_date], [abilities], [experience]" +
                        ", [market], [concurrence], [purpose], [corporate_name], [corporate_juridicStatus]" +
                        ", [corporate_FiscalStatus], [corporate_siret], [corporate_CA], [corporate_nbOfJobs]" +
                        ", [corporate_financialPlanType], [corporateFinancialPlanAmount], [corporate_financialPlanTotalAmount]" +
                        ", [address], [city], [zipCode], [district_id], [home_phone], [personalPhone], [Email]" +
                        ", [hometype], [corporate_registre] " +
                "FROM dbo.Projects ";

            List<Project> result = new List<Project>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Project
                        Project project = new Project();

                        // Read values.
                        project.id = base.GetDataValue<int>(dr, "id");
                        project.tiers_id = base.GetDataValue<int>(dr, "tiers_id");
                        project.status = base.GetDataValue<short>(dr, "status");
                        project.name = base.GetDataValue<string>(dr, "name");
                        project.code = base.GetDataValue<string>(dr, "code");
                        project.aim = base.GetDataValue<string>(dr, "aim");
                        project.begin_date = base.GetDataValue<DateTime>(dr, "begin_date");
                        project.abilities = base.GetDataValue<string>(dr, "abilities");
                        project.experience = base.GetDataValue<string>(dr, "experience");
                        project.market = base.GetDataValue<string>(dr, "market");
                        project.concurrence = base.GetDataValue<string>(dr, "concurrence");
                        project.purpose = base.GetDataValue<string>(dr, "purpose");
                        project.corporate_name = base.GetDataValue<string>(dr, "corporate_name");
                        project.corporate_juridicStatus = base.GetDataValue<string>(dr, "corporate_juridicStatus");
                        project.corporate_FiscalStatus = base.GetDataValue<string>(dr, "corporate_FiscalStatus");
                        project.corporate_siret = base.GetDataValue<string>(dr, "corporate_siret");
                        project.corporate_CA = base.GetDataValue<decimal>(dr, "corporate_CA");
                        project.corporate_nbOfJobs = base.GetDataValue<int>(dr, "corporate_nbOfJobs");
                        project.corporate_financialPlanType = base.GetDataValue<string>(dr, "corporate_financialPlanType");
                        project.corporateFinancialPlanAmount = base.GetDataValue<decimal>(dr, "corporateFinancialPlanAmount");
                        project.corporate_financialPlanTotalAmount = base.GetDataValue<decimal>(dr, "corporate_financialPlanTotalAmount");
                        project.address = base.GetDataValue<string>(dr, "address");
                        project.city = base.GetDataValue<string>(dr, "city");
                        project.zipCode = base.GetDataValue<string>(dr, "zipCode");
                        project.district_id = base.GetDataValue<int>(dr, "district_id");
                        project.home_phone = base.GetDataValue<string>(dr, "home_phone");
                        project.personalPhone = base.GetDataValue<string>(dr, "personalPhone");
                        project.Email = base.GetDataValue<string>(dr, "Email");
                        project.hometype = base.GetDataValue<string>(dr, "hometype");
                        project.corporate_registre = base.GetDataValue<string>(dr, "corporate_registre");

                        // Add to List.
                        result.Add(project);
                    }
                }
            }

            return result;
        }
    }
}

