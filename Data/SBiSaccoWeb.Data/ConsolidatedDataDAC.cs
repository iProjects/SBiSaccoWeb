//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ConsolidatedData data access component. Manages CRUD operations for the ConsolidatedData table.
    /// </summary>
    public partial class ConsolidatedDataDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ConsolidatedData table.
        /// </summary>
        /// <param name="consolidatedData">A ConsolidatedData object.</param>
        /// <returns>An updated ConsolidatedData object.</returns>
        public ConsolidatedData Create(ConsolidatedData consolidatedData)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ConsolidatedData ([branch], [date], [olb], [par], [number_of_clients], [number_of_contracts], [disbursements_amount], [disbursements_fees], [repayments_principal], [repayments_interest], [repayments_commissions], [repayments_penalties]) " +
                "VALUES(@branch, @date, @olb, @par, @number_of_clients, @number_of_contracts, @disbursements_amount, @disbursements_fees, @repayments_principal, @repayments_interest, @repayments_commissions, @repayments_penalties);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@branch", DbType.String, consolidatedData.branch);
                db.AddInParameter(cmd, "@date", DbType.DateTime, consolidatedData.date);
                db.AddInParameter(cmd, "@olb", DbType.Currency, consolidatedData.olb);
                db.AddInParameter(cmd, "@par", DbType.Currency, consolidatedData.par);
                db.AddInParameter(cmd, "@number_of_clients", DbType.Int32, consolidatedData.number_of_clients);
                db.AddInParameter(cmd, "@number_of_contracts", DbType.Int32, consolidatedData.number_of_contracts);
                db.AddInParameter(cmd, "@disbursements_amount", DbType.Currency, consolidatedData.disbursements_amount);
                db.AddInParameter(cmd, "@disbursements_fees", DbType.Currency, consolidatedData.disbursements_fees);
                db.AddInParameter(cmd, "@repayments_principal", DbType.Currency, consolidatedData.repayments_principal);
                db.AddInParameter(cmd, "@repayments_interest", DbType.Currency, consolidatedData.repayments_interest);
                db.AddInParameter(cmd, "@repayments_commissions", DbType.Currency, consolidatedData.repayments_commissions);
                db.AddInParameter(cmd, "@repayments_penalties", DbType.Currency, consolidatedData.repayments_penalties);

                db.ExecuteNonQuery(cmd);
            }

            return consolidatedData;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ConsolidatedData table.
        /// </summary>
        /// <returns>A collection of ConsolidatedData objects.</returns>		
        public List<ConsolidatedData> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [branch], [date], [olb], [par], [number_of_clients], [number_of_contracts], [disbursements_amount]" +
                        ", [disbursements_fees], [repayments_principal], [repayments_interest], [repayments_commissions]" +
                        ", [repayments_penalties] " +
                "FROM dbo.ConsolidatedData ";

            List<ConsolidatedData> result = new List<ConsolidatedData>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ConsolidatedData
                        ConsolidatedData consolidatedData = new ConsolidatedData();

                        // Read values.
                        consolidatedData.branch = base.GetDataValue<string>(dr, "branch");
                        consolidatedData.date = base.GetDataValue<DateTime>(dr, "date");
                        consolidatedData.olb = base.GetDataValue<decimal>(dr, "olb");
                        consolidatedData.par = base.GetDataValue<decimal>(dr, "par");
                        consolidatedData.number_of_clients = base.GetDataValue<int>(dr, "number_of_clients");
                        consolidatedData.number_of_contracts = base.GetDataValue<int>(dr, "number_of_contracts");
                        consolidatedData.disbursements_amount = base.GetDataValue<decimal>(dr, "disbursements_amount");
                        consolidatedData.disbursements_fees = base.GetDataValue<decimal>(dr, "disbursements_fees");
                        consolidatedData.repayments_principal = base.GetDataValue<decimal>(dr, "repayments_principal");
                        consolidatedData.repayments_interest = base.GetDataValue<decimal>(dr, "repayments_interest");
                        consolidatedData.repayments_commissions = base.GetDataValue<decimal>(dr, "repayments_commissions");
                        consolidatedData.repayments_penalties = base.GetDataValue<decimal>(dr, "repayments_penalties");

                        // Add to List.
                        result.Add(consolidatedData);
                    }
                }
            }

            return result;
        }
    }
}

