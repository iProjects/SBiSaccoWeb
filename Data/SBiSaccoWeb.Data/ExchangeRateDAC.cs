//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ExchangeRates data access component. Manages CRUD operations for the ExchangeRates table.
    /// </summary>
    public partial class ExchangeRateDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ExchangeRates table.
        /// </summary>
        /// <param name="exchangeRate">A ExchangeRate object.</param>
        /// <returns>An updated ExchangeRate object.</returns>
        public ExchangeRate Create(ExchangeRate exchangeRate)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ExchangeRates ([exchange_date], [exchange_rate], [currency_id]) " +
                "VALUES(@exchange_date, @exchange_rate, @currency_id);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@exchange_date", DbType.DateTime, exchangeRate.exchange_date);
                db.AddInParameter(cmd, "@exchange_rate", DbType.Double, exchangeRate.exchange_rate);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, exchangeRate.currency_id);

                db.ExecuteNonQuery(cmd);
            }

            return exchangeRate;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ExchangeRates table.
        /// </summary>
        /// <returns>A collection of ExchangeRate objects.</returns>		
        public List<ExchangeRate> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [exchange_date], [exchange_rate], [currency_id] " +
                "FROM dbo.ExchangeRates ";

            List<ExchangeRate> result = new List<ExchangeRate>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ExchangeRate
                        ExchangeRate exchangeRate = new ExchangeRate();

                        // Read values.
                        exchangeRate.exchange_date = base.GetDataValue<DateTime>(dr, "exchange_date");
                        exchangeRate.exchange_rate = base.GetDataValue<double>(dr, "exchange_rate");
                        exchangeRate.currency_id = base.GetDataValue<int>(dr, "currency_id");

                        // Add to List.
                        result.Add(exchangeRate);
                    }
                }
            }

            return result;
        }
    }
}

