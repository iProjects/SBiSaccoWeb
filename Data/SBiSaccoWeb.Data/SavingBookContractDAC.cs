//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// SavingBookContracts data access component. Manages CRUD operations for the SavingBookContracts table.
    /// </summary>
    public partial class SavingBookContractDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the SavingBookContracts table.
        /// </summary>
        /// <param name="savingBookContract">A SavingBookContract object.</param>
        /// <returns>An updated SavingBookContract object.</returns>
        public SavingBookContract Create(SavingBookContract savingBookContract)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SavingBookContracts ([id], [flat_withdraw_fees], [rate_withdraw_fees], [flat_transfer_fees], [rate_transfer_fees], [flat_deposit_fees], [flat_close_fees], [flat_management_fees], [flat_overdraft_fees], [in_overdraft], [rate_agio_fees], [cheque_deposit_fees], [flat_reopen_fees], [flat_ibt_fee], [rate_ibt_fee], [use_term_deposit], [term_deposit_period], [term_deposit_period_min], [term_deposit_period_max], [transfer_account], [rollover], [next_maturity]) " +
                "VALUES(@id, @flat_withdraw_fees, @rate_withdraw_fees, @flat_transfer_fees, @rate_transfer_fees, @flat_deposit_fees, @flat_close_fees, @flat_management_fees, @flat_overdraft_fees, @in_overdraft, @rate_agio_fees, @cheque_deposit_fees, @flat_reopen_fees, @flat_ibt_fee, @rate_ibt_fee, @use_term_deposit, @term_deposit_period, @term_deposit_period_min, @term_deposit_period_max, @transfer_account, @rollover, @next_maturity);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, savingBookContract.id);
                db.AddInParameter(cmd, "@flat_withdraw_fees", DbType.Currency, savingBookContract.flat_withdraw_fees);
                db.AddInParameter(cmd, "@rate_withdraw_fees", DbType.Double, savingBookContract.rate_withdraw_fees);
                db.AddInParameter(cmd, "@flat_transfer_fees", DbType.Currency, savingBookContract.flat_transfer_fees);
                db.AddInParameter(cmd, "@rate_transfer_fees", DbType.Double, savingBookContract.rate_transfer_fees);
                db.AddInParameter(cmd, "@flat_deposit_fees", DbType.Currency, savingBookContract.flat_deposit_fees);
                db.AddInParameter(cmd, "@flat_close_fees", DbType.Currency, savingBookContract.flat_close_fees);
                db.AddInParameter(cmd, "@flat_management_fees", DbType.Currency, savingBookContract.flat_management_fees);
                db.AddInParameter(cmd, "@flat_overdraft_fees", DbType.Currency, savingBookContract.flat_overdraft_fees);
                db.AddInParameter(cmd, "@in_overdraft", DbType.Boolean, savingBookContract.in_overdraft);
                db.AddInParameter(cmd, "@rate_agio_fees", DbType.Double, savingBookContract.rate_agio_fees);
                db.AddInParameter(cmd, "@cheque_deposit_fees", DbType.Currency, savingBookContract.cheque_deposit_fees);
                db.AddInParameter(cmd, "@flat_reopen_fees", DbType.Currency, savingBookContract.flat_reopen_fees);
                db.AddInParameter(cmd, "@flat_ibt_fee", DbType.Currency, savingBookContract.flat_ibt_fee);
                db.AddInParameter(cmd, "@rate_ibt_fee", DbType.Double, savingBookContract.rate_ibt_fee);
                db.AddInParameter(cmd, "@use_term_deposit", DbType.Boolean, savingBookContract.use_term_deposit);
                db.AddInParameter(cmd, "@term_deposit_period", DbType.Int32, savingBookContract.term_deposit_period);
                db.AddInParameter(cmd, "@term_deposit_period_min", DbType.Int32, savingBookContract.term_deposit_period_min);
                db.AddInParameter(cmd, "@term_deposit_period_max", DbType.Int32, savingBookContract.term_deposit_period_max);
                db.AddInParameter(cmd, "@transfer_account", DbType.String, savingBookContract.transfer_account);
                db.AddInParameter(cmd, "@rollover", DbType.Int32, savingBookContract.rollover);
                db.AddInParameter(cmd, "@next_maturity", DbType.DateTime, savingBookContract.next_maturity);

                db.ExecuteNonQuery(cmd);
            }

            return savingBookContract;
        }

        /// <summary>
        /// Updates an existing row in the SavingBookContracts table.
        /// </summary>
        /// <param name="savingBookContract">A SavingBookContract entity object.</param>
        public void UpdateById(SavingBookContract savingBookContract)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SavingBookContracts " +
                "SET " +
                    "[flat_withdraw_fees]=@flat_withdraw_fees, " +
                    "[rate_withdraw_fees]=@rate_withdraw_fees, " +
                    "[flat_transfer_fees]=@flat_transfer_fees, " +
                    "[rate_transfer_fees]=@rate_transfer_fees, " +
                    "[flat_deposit_fees]=@flat_deposit_fees, " +
                    "[flat_close_fees]=@flat_close_fees, " +
                    "[flat_management_fees]=@flat_management_fees, " +
                    "[flat_overdraft_fees]=@flat_overdraft_fees, " +
                    "[in_overdraft]=@in_overdraft, " +
                    "[rate_agio_fees]=@rate_agio_fees, " +
                    "[cheque_deposit_fees]=@cheque_deposit_fees, " +
                    "[flat_reopen_fees]=@flat_reopen_fees, " +
                    "[flat_ibt_fee]=@flat_ibt_fee, " +
                    "[rate_ibt_fee]=@rate_ibt_fee, " +
                    "[use_term_deposit]=@use_term_deposit, " +
                    "[term_deposit_period]=@term_deposit_period, " +
                    "[term_deposit_period_min]=@term_deposit_period_min, " +
                    "[term_deposit_period_max]=@term_deposit_period_max, " +
                    "[transfer_account]=@transfer_account, " +
                    "[rollover]=@rollover, " +
                    "[next_maturity]=@next_maturity " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@flat_withdraw_fees", DbType.Currency, savingBookContract.flat_withdraw_fees);
                db.AddInParameter(cmd, "@rate_withdraw_fees", DbType.Double, savingBookContract.rate_withdraw_fees);
                db.AddInParameter(cmd, "@flat_transfer_fees", DbType.Currency, savingBookContract.flat_transfer_fees);
                db.AddInParameter(cmd, "@rate_transfer_fees", DbType.Double, savingBookContract.rate_transfer_fees);
                db.AddInParameter(cmd, "@flat_deposit_fees", DbType.Currency, savingBookContract.flat_deposit_fees);
                db.AddInParameter(cmd, "@flat_close_fees", DbType.Currency, savingBookContract.flat_close_fees);
                db.AddInParameter(cmd, "@flat_management_fees", DbType.Currency, savingBookContract.flat_management_fees);
                db.AddInParameter(cmd, "@flat_overdraft_fees", DbType.Currency, savingBookContract.flat_overdraft_fees);
                db.AddInParameter(cmd, "@in_overdraft", DbType.Boolean, savingBookContract.in_overdraft);
                db.AddInParameter(cmd, "@rate_agio_fees", DbType.Double, savingBookContract.rate_agio_fees);
                db.AddInParameter(cmd, "@cheque_deposit_fees", DbType.Currency, savingBookContract.cheque_deposit_fees);
                db.AddInParameter(cmd, "@flat_reopen_fees", DbType.Currency, savingBookContract.flat_reopen_fees);
                db.AddInParameter(cmd, "@flat_ibt_fee", DbType.Currency, savingBookContract.flat_ibt_fee);
                db.AddInParameter(cmd, "@rate_ibt_fee", DbType.Double, savingBookContract.rate_ibt_fee);
                db.AddInParameter(cmd, "@use_term_deposit", DbType.Boolean, savingBookContract.use_term_deposit);
                db.AddInParameter(cmd, "@term_deposit_period", DbType.Int32, savingBookContract.term_deposit_period);
                db.AddInParameter(cmd, "@term_deposit_period_min", DbType.Int32, savingBookContract.term_deposit_period_min);
                db.AddInParameter(cmd, "@term_deposit_period_max", DbType.Int32, savingBookContract.term_deposit_period_max);
                db.AddInParameter(cmd, "@transfer_account", DbType.String, savingBookContract.transfer_account);
                db.AddInParameter(cmd, "@rollover", DbType.Int32, savingBookContract.rollover);
                db.AddInParameter(cmd, "@next_maturity", DbType.DateTime, savingBookContract.next_maturity);
                db.AddInParameter(cmd, "@id", DbType.Int32, savingBookContract.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SavingBookContracts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SavingBookContracts " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SavingBookContracts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A SavingBookContract object with data populated from the database.</returns>
        public SavingBookContract SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [flat_withdraw_fees], [rate_withdraw_fees], [flat_transfer_fees], [rate_transfer_fees]" +
                        ", [flat_deposit_fees], [flat_close_fees], [flat_management_fees], [flat_overdraft_fees]" +
                        ", [in_overdraft], [rate_agio_fees], [cheque_deposit_fees], [flat_reopen_fees], [flat_ibt_fee]" +
                        ", [rate_ibt_fee], [use_term_deposit], [term_deposit_period], [term_deposit_period_min]" +
                        ", [term_deposit_period_max], [transfer_account], [rollover], [next_maturity] " +
                "FROM dbo.SavingBookContracts  " +
                "WHERE [id]=@id ";

            SavingBookContract savingBookContract = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SavingBookContract
                        savingBookContract = new SavingBookContract();

                        // Read values.
                        savingBookContract.id = base.GetDataValue<int>(dr, "id");
                        savingBookContract.flat_withdraw_fees = base.GetDataValue<decimal>(dr, "flat_withdraw_fees");
                        savingBookContract.rate_withdraw_fees = base.GetDataValue<double>(dr, "rate_withdraw_fees");
                        savingBookContract.flat_transfer_fees = base.GetDataValue<decimal>(dr, "flat_transfer_fees");
                        savingBookContract.rate_transfer_fees = base.GetDataValue<double>(dr, "rate_transfer_fees");
                        savingBookContract.flat_deposit_fees = base.GetDataValue<decimal>(dr, "flat_deposit_fees");
                        savingBookContract.flat_close_fees = base.GetDataValue<decimal>(dr, "flat_close_fees");
                        savingBookContract.flat_management_fees = base.GetDataValue<decimal>(dr, "flat_management_fees");
                        savingBookContract.flat_overdraft_fees = base.GetDataValue<decimal>(dr, "flat_overdraft_fees");
                        savingBookContract.in_overdraft = base.GetDataValue<bool>(dr, "in_overdraft");
                        savingBookContract.rate_agio_fees = base.GetDataValue<double>(dr, "rate_agio_fees");
                        savingBookContract.cheque_deposit_fees = base.GetDataValue<decimal>(dr, "cheque_deposit_fees");
                        savingBookContract.flat_reopen_fees = base.GetDataValue<decimal>(dr, "flat_reopen_fees");
                        savingBookContract.flat_ibt_fee = base.GetDataValue<decimal>(dr, "flat_ibt_fee");
                        savingBookContract.rate_ibt_fee = base.GetDataValue<double>(dr, "rate_ibt_fee");
                        savingBookContract.use_term_deposit = base.GetDataValue<bool>(dr, "use_term_deposit");
                        savingBookContract.term_deposit_period = base.GetDataValue<int>(dr, "term_deposit_period");
                        savingBookContract.term_deposit_period_min = base.GetDataValue<int>(dr, "term_deposit_period_min");
                        savingBookContract.term_deposit_period_max = base.GetDataValue<int>(dr, "term_deposit_period_max");
                        savingBookContract.transfer_account = base.GetDataValue<string>(dr, "transfer_account");
                        savingBookContract.rollover = base.GetDataValue<int>(dr, "rollover");
                        savingBookContract.next_maturity = base.GetDataValue<DateTime>(dr, "next_maturity");
                    }
                }
            }

            return savingBookContract;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SavingBookContracts table.
        /// </summary>
        /// <returns>A collection of SavingBookContract objects.</returns>		
        public List<SavingBookContract> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [flat_withdraw_fees], [rate_withdraw_fees], [flat_transfer_fees], [rate_transfer_fees]" +
                        ", [flat_deposit_fees], [flat_close_fees], [flat_management_fees], [flat_overdraft_fees]" +
                        ", [in_overdraft], [rate_agio_fees], [cheque_deposit_fees], [flat_reopen_fees], [flat_ibt_fee]" +
                        ", [rate_ibt_fee], [use_term_deposit], [term_deposit_period], [term_deposit_period_min]" +
                        ", [term_deposit_period_max], [transfer_account], [rollover], [next_maturity] " +
                "FROM dbo.SavingBookContracts ";

            List<SavingBookContract> result = new List<SavingBookContract>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SavingBookContract
                        SavingBookContract savingBookContract = new SavingBookContract();

                        // Read values.
                        savingBookContract.id = base.GetDataValue<int>(dr, "id");
                        savingBookContract.flat_withdraw_fees = base.GetDataValue<decimal>(dr, "flat_withdraw_fees");
                        savingBookContract.rate_withdraw_fees = base.GetDataValue<double>(dr, "rate_withdraw_fees");
                        savingBookContract.flat_transfer_fees = base.GetDataValue<decimal>(dr, "flat_transfer_fees");
                        savingBookContract.rate_transfer_fees = base.GetDataValue<double>(dr, "rate_transfer_fees");
                        savingBookContract.flat_deposit_fees = base.GetDataValue<decimal>(dr, "flat_deposit_fees");
                        savingBookContract.flat_close_fees = base.GetDataValue<decimal>(dr, "flat_close_fees");
                        savingBookContract.flat_management_fees = base.GetDataValue<decimal>(dr, "flat_management_fees");
                        savingBookContract.flat_overdraft_fees = base.GetDataValue<decimal>(dr, "flat_overdraft_fees");
                        savingBookContract.in_overdraft = base.GetDataValue<bool>(dr, "in_overdraft");
                        savingBookContract.rate_agio_fees = base.GetDataValue<double>(dr, "rate_agio_fees");
                        savingBookContract.cheque_deposit_fees = base.GetDataValue<decimal>(dr, "cheque_deposit_fees");
                        savingBookContract.flat_reopen_fees = base.GetDataValue<decimal>(dr, "flat_reopen_fees");
                        savingBookContract.flat_ibt_fee = base.GetDataValue<decimal>(dr, "flat_ibt_fee");
                        savingBookContract.rate_ibt_fee = base.GetDataValue<double>(dr, "rate_ibt_fee");
                        savingBookContract.use_term_deposit = base.GetDataValue<bool>(dr, "use_term_deposit");
                        savingBookContract.term_deposit_period = base.GetDataValue<int>(dr, "term_deposit_period");
                        savingBookContract.term_deposit_period_min = base.GetDataValue<int>(dr, "term_deposit_period_min");
                        savingBookContract.term_deposit_period_max = base.GetDataValue<int>(dr, "term_deposit_period_max");
                        savingBookContract.transfer_account = base.GetDataValue<string>(dr, "transfer_account");
                        savingBookContract.rollover = base.GetDataValue<int>(dr, "rollover");
                        savingBookContract.next_maturity = base.GetDataValue<DateTime>(dr, "next_maturity");

                        // Add to List.
                        result.Add(savingBookContract);
                    }
                }
            }

            return result;
        }
    }
}

