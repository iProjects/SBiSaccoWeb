//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Packages data access component. Manages CRUD operations for the Packages table.
    /// </summary>
    public partial class PackageDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Packages table.
        /// </summary>
        /// <param name="package">A Package object.</param>
        /// <returns>An updated Package object.</returns>
        public Package Create(Package package)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Packages ([deleted], [code], [name], [client_type], [amount], [amount_min], [amount_max], [interest_rate], [interest_rate_min], [interest_rate_max], [installment_type], [grace_period], [grace_period_min], [grace_period_max], [number_of_installments], [number_of_installments_min], [number_of_installments_max], [anticipated_total_repayment_penalties], [anticipated_total_repayment_penalties_min], [anticipated_total_repayment_penalties_max], [loan_type], [keep_expected_installment], [charge_interest_within_grace_period], [cycle_id], [non_repayment_penalties_based_on_overdue_interest], [non_repayment_penalties_based_on_initial_amount], [non_repayment_penalties_based_on_olb], [non_repayment_penalties_based_on_overdue_principal], [non_repayment_penalties_based_on_overdue_interest_min], [non_repayment_penalties_based_on_initial_amount_min], [non_repayment_penalties_based_on_olb_min], [non_repayment_penalties_based_on_overdue_principal_min], [non_repayment_penalties_based_on_overdue_interest_max], [non_repayment_penalties_based_on_initial_amount_max], [non_repayment_penalties_based_on_olb_max], [non_repayment_penalties_based_on_overdue_principal_max], [fundingLine_id], [currency_id], [rounding_type], [grace_period_of_latefees], [anticipated_partial_repayment_penalties], [anticipated_partial_repayment_penalties_min], [anticipated_partial_repayment_penalties_max], [anticipated_partial_repayment_base], [anticipated_total_repayment_base], [number_of_drawings_loc], [amount_under_loc], [amount_under_loc_min], [amount_under_loc_max], [maturity_loc], [maturity_loc_min], [maturity_loc_max], [activated_loc], [allow_flexible_schedule], [use_guarantor_collateral], [set_separate_guarantor_collateral], [percentage_total_guarantor_collateral], [percentage_separate_guarantor], [percentage_separate_collateral], [use_compulsory_savings], [compulsory_amount], [compulsory_amount_min], [compulsory_amount_max], [insurance_min], [insurance_max], [use_entry_fees_cycles], [is_balloon]) " +
                "VALUES(@deleted, @code, @name, @client_type, @amount, @amount_min, @amount_max, @interest_rate, @interest_rate_min, @interest_rate_max, @installment_type, @grace_period, @grace_period_min, @grace_period_max, @number_of_installments, @number_of_installments_min, @number_of_installments_max, @anticipated_total_repayment_penalties, @anticipated_total_repayment_penalties_min, @anticipated_total_repayment_penalties_max, @loan_type, @keep_expected_installment, @charge_interest_within_grace_period, @cycle_id, @non_repayment_penalties_based_on_overdue_interest, @non_repayment_penalties_based_on_initial_amount, @non_repayment_penalties_based_on_olb, @non_repayment_penalties_based_on_overdue_principal, @non_repayment_penalties_based_on_overdue_interest_min, @non_repayment_penalties_based_on_initial_amount_min, @non_repayment_penalties_based_on_olb_min, @non_repayment_penalties_based_on_overdue_principal_min, @non_repayment_penalties_based_on_overdue_interest_max, @non_repayment_penalties_based_on_initial_amount_max, @non_repayment_penalties_based_on_olb_max, @non_repayment_penalties_based_on_overdue_principal_max, @fundingLine_id, @currency_id, @rounding_type, @grace_period_of_latefees, @anticipated_partial_repayment_penalties, @anticipated_partial_repayment_penalties_min, @anticipated_partial_repayment_penalties_max, @anticipated_partial_repayment_base, @anticipated_total_repayment_base, @number_of_drawings_loc, @amount_under_loc, @amount_under_loc_min, @amount_under_loc_max, @maturity_loc, @maturity_loc_min, @maturity_loc_max, @activated_loc, @allow_flexible_schedule, @use_guarantor_collateral, @set_separate_guarantor_collateral, @percentage_total_guarantor_collateral, @percentage_separate_guarantor, @percentage_separate_collateral, @use_compulsory_savings, @compulsory_amount, @compulsory_amount_min, @compulsory_amount_max, @insurance_min, @insurance_max, @use_entry_fees_cycles, @is_balloon); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, package.deleted);
                db.AddInParameter(cmd, "@code", DbType.String, package.code);
                db.AddInParameter(cmd, "@name", DbType.String, package.name);
                db.AddInParameter(cmd, "@client_type", DbType.AnsiStringFixedLength, package.client_type);
                db.AddInParameter(cmd, "@amount", DbType.Currency, package.amount);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, package.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, package.amount_max);
                db.AddInParameter(cmd, "@interest_rate", DbType.Decimal, package.interest_rate);
                db.AddInParameter(cmd, "@interest_rate_min", DbType.Decimal, package.interest_rate_min);
                db.AddInParameter(cmd, "@interest_rate_max", DbType.Decimal, package.interest_rate_max);
                db.AddInParameter(cmd, "@installment_type", DbType.Int32, package.installment_type);
                db.AddInParameter(cmd, "@grace_period", DbType.Int32, package.grace_period);
                db.AddInParameter(cmd, "@grace_period_min", DbType.Int32, package.grace_period_min);
                db.AddInParameter(cmd, "@grace_period_max", DbType.Int32, package.grace_period_max);
                db.AddInParameter(cmd, "@number_of_installments", DbType.Int32, package.number_of_installments);
                db.AddInParameter(cmd, "@number_of_installments_min", DbType.Int32, package.number_of_installments_min);
                db.AddInParameter(cmd, "@number_of_installments_max", DbType.Int32, package.number_of_installments_max);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties", DbType.Double, package.anticipated_total_repayment_penalties);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties_min", DbType.Double, package.anticipated_total_repayment_penalties_min);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties_max", DbType.Double, package.anticipated_total_repayment_penalties_max);
                db.AddInParameter(cmd, "@loan_type", DbType.Int16, package.loan_type);
                db.AddInParameter(cmd, "@keep_expected_installment", DbType.Boolean, package.keep_expected_installment);
                db.AddInParameter(cmd, "@charge_interest_within_grace_period", DbType.Boolean, package.charge_interest_within_grace_period);
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, package.cycle_id);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest", DbType.Double, package.non_repayment_penalties_based_on_overdue_interest);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount", DbType.Double, package.non_repayment_penalties_based_on_initial_amount);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb", DbType.Double, package.non_repayment_penalties_based_on_olb);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal", DbType.Double, package.non_repayment_penalties_based_on_overdue_principal);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest_min", DbType.Double, package.non_repayment_penalties_based_on_overdue_interest_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount_min", DbType.Double, package.non_repayment_penalties_based_on_initial_amount_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb_min", DbType.Double, package.non_repayment_penalties_based_on_olb_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal_min", DbType.Double, package.non_repayment_penalties_based_on_overdue_principal_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest_max", DbType.Double, package.non_repayment_penalties_based_on_overdue_interest_max);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount_max", DbType.Double, package.non_repayment_penalties_based_on_initial_amount_max);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb_max", DbType.Double, package.non_repayment_penalties_based_on_olb_max);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal_max", DbType.Double, package.non_repayment_penalties_based_on_overdue_principal_max);
                db.AddInParameter(cmd, "@fundingLine_id", DbType.Int32, package.fundingLine_id);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, package.currency_id);
                db.AddInParameter(cmd, "@rounding_type", DbType.Int16, package.rounding_type);
                db.AddInParameter(cmd, "@grace_period_of_latefees", DbType.Int32, package.grace_period_of_latefees);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties", DbType.Double, package.anticipated_partial_repayment_penalties);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties_min", DbType.Double, package.anticipated_partial_repayment_penalties_min);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties_max", DbType.Double, package.anticipated_partial_repayment_penalties_max);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_base", DbType.Int16, package.anticipated_partial_repayment_base);
                db.AddInParameter(cmd, "@anticipated_total_repayment_base", DbType.Int16, package.anticipated_total_repayment_base);
                db.AddInParameter(cmd, "@number_of_drawings_loc", DbType.Int32, package.number_of_drawings_loc);
                db.AddInParameter(cmd, "@amount_under_loc", DbType.Currency, package.amount_under_loc);
                db.AddInParameter(cmd, "@amount_under_loc_min", DbType.Currency, package.amount_under_loc_min);
                db.AddInParameter(cmd, "@amount_under_loc_max", DbType.Currency, package.amount_under_loc_max);
                db.AddInParameter(cmd, "@maturity_loc", DbType.Int32, package.maturity_loc);
                db.AddInParameter(cmd, "@maturity_loc_min", DbType.Int32, package.maturity_loc_min);
                db.AddInParameter(cmd, "@maturity_loc_max", DbType.Int32, package.maturity_loc_max);
                db.AddInParameter(cmd, "@activated_loc", DbType.Boolean, package.activated_loc);
                db.AddInParameter(cmd, "@allow_flexible_schedule", DbType.Boolean, package.allow_flexible_schedule);
                db.AddInParameter(cmd, "@use_guarantor_collateral", DbType.Boolean, package.use_guarantor_collateral);
                db.AddInParameter(cmd, "@set_separate_guarantor_collateral", DbType.Boolean, package.set_separate_guarantor_collateral);
                db.AddInParameter(cmd, "@percentage_total_guarantor_collateral", DbType.Int32, package.percentage_total_guarantor_collateral);
                db.AddInParameter(cmd, "@percentage_separate_guarantor", DbType.Int32, package.percentage_separate_guarantor);
                db.AddInParameter(cmd, "@percentage_separate_collateral", DbType.Int32, package.percentage_separate_collateral);
                db.AddInParameter(cmd, "@use_compulsory_savings", DbType.Boolean, package.use_compulsory_savings);
                db.AddInParameter(cmd, "@compulsory_amount", DbType.Int32, package.compulsory_amount);
                db.AddInParameter(cmd, "@compulsory_amount_min", DbType.Int32, package.compulsory_amount_min);
                db.AddInParameter(cmd, "@compulsory_amount_max", DbType.Int32, package.compulsory_amount_max);
                db.AddInParameter(cmd, "@insurance_min", DbType.Decimal, package.insurance_min);
                db.AddInParameter(cmd, "@insurance_max", DbType.Decimal, package.insurance_max);
                db.AddInParameter(cmd, "@use_entry_fees_cycles", DbType.Boolean, package.use_entry_fees_cycles);
                db.AddInParameter(cmd, "@is_balloon", DbType.Boolean, package.is_balloon);

                // Get the primary key value.
                package.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return package;
        }

        /// <summary>
        /// Updates an existing row in the Packages table.
        /// </summary>
        /// <param name="package">A Package entity object.</param>
        public void UpdateById(Package package)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Packages " +
                "SET " +
                    "[deleted]=@deleted, " +
                    "[code]=@code, " +
                    "[name]=@name, " +
                    "[client_type]=@client_type, " +
                    "[amount]=@amount, " +
                    "[amount_min]=@amount_min, " +
                    "[amount_max]=@amount_max, " +
                    "[interest_rate]=@interest_rate, " +
                    "[interest_rate_min]=@interest_rate_min, " +
                    "[interest_rate_max]=@interest_rate_max, " +
                    "[installment_type]=@installment_type, " +
                    "[grace_period]=@grace_period, " +
                    "[grace_period_min]=@grace_period_min, " +
                    "[grace_period_max]=@grace_period_max, " +
                    "[number_of_installments]=@number_of_installments, " +
                    "[number_of_installments_min]=@number_of_installments_min, " +
                    "[number_of_installments_max]=@number_of_installments_max, " +
                    "[anticipated_total_repayment_penalties]=@anticipated_total_repayment_penalties, " +
                    "[anticipated_total_repayment_penalties_min]=@anticipated_total_repayment_penalties_min, " +
                    "[anticipated_total_repayment_penalties_max]=@anticipated_total_repayment_penalties_max, " +
                    "[loan_type]=@loan_type, " +
                    "[keep_expected_installment]=@keep_expected_installment, " +
                    "[charge_interest_within_grace_period]=@charge_interest_within_grace_period, " +
                    "[cycle_id]=@cycle_id, " +
                    "[non_repayment_penalties_based_on_overdue_interest]=@non_repayment_penalties_based_on_overdue_interest, " +
                    "[non_repayment_penalties_based_on_initial_amount]=@non_repayment_penalties_based_on_initial_amount, " +
                    "[non_repayment_penalties_based_on_olb]=@non_repayment_penalties_based_on_olb, " +
                    "[non_repayment_penalties_based_on_overdue_principal]=@non_repayment_penalties_based_on_overdue_principal, " +
                    "[non_repayment_penalties_based_on_overdue_interest_min]=@non_repayment_penalties_based_on_overdue_interest_min, " +
                    "[non_repayment_penalties_based_on_initial_amount_min]=@non_repayment_penalties_based_on_initial_amount_min, " +
                    "[non_repayment_penalties_based_on_olb_min]=@non_repayment_penalties_based_on_olb_min, " +
                    "[non_repayment_penalties_based_on_overdue_principal_min]=@non_repayment_penalties_based_on_overdue_principal_min, " +
                    "[non_repayment_penalties_based_on_overdue_interest_max]=@non_repayment_penalties_based_on_overdue_interest_max, " +
                    "[non_repayment_penalties_based_on_initial_amount_max]=@non_repayment_penalties_based_on_initial_amount_max, " +
                    "[non_repayment_penalties_based_on_olb_max]=@non_repayment_penalties_based_on_olb_max, " +
                    "[non_repayment_penalties_based_on_overdue_principal_max]=@non_repayment_penalties_based_on_overdue_principal_max, " +
                    "[fundingLine_id]=@fundingLine_id, " +
                    "[currency_id]=@currency_id, " +
                    "[rounding_type]=@rounding_type, " +
                    "[grace_period_of_latefees]=@grace_period_of_latefees, " +
                    "[anticipated_partial_repayment_penalties]=@anticipated_partial_repayment_penalties, " +
                    "[anticipated_partial_repayment_penalties_min]=@anticipated_partial_repayment_penalties_min, " +
                    "[anticipated_partial_repayment_penalties_max]=@anticipated_partial_repayment_penalties_max, " +
                    "[anticipated_partial_repayment_base]=@anticipated_partial_repayment_base, " +
                    "[anticipated_total_repayment_base]=@anticipated_total_repayment_base, " +
                    "[number_of_drawings_loc]=@number_of_drawings_loc, " +
                    "[amount_under_loc]=@amount_under_loc, " +
                    "[amount_under_loc_min]=@amount_under_loc_min, " +
                    "[amount_under_loc_max]=@amount_under_loc_max, " +
                    "[maturity_loc]=@maturity_loc, " +
                    "[maturity_loc_min]=@maturity_loc_min, " +
                    "[maturity_loc_max]=@maturity_loc_max, " +
                    "[activated_loc]=@activated_loc, " +
                    "[allow_flexible_schedule]=@allow_flexible_schedule, " +
                    "[use_guarantor_collateral]=@use_guarantor_collateral, " +
                    "[set_separate_guarantor_collateral]=@set_separate_guarantor_collateral, " +
                    "[percentage_total_guarantor_collateral]=@percentage_total_guarantor_collateral, " +
                    "[percentage_separate_guarantor]=@percentage_separate_guarantor, " +
                    "[percentage_separate_collateral]=@percentage_separate_collateral, " +
                    "[use_compulsory_savings]=@use_compulsory_savings, " +
                    "[compulsory_amount]=@compulsory_amount, " +
                    "[compulsory_amount_min]=@compulsory_amount_min, " +
                    "[compulsory_amount_max]=@compulsory_amount_max, " +
                    "[insurance_min]=@insurance_min, " +
                    "[insurance_max]=@insurance_max, " +
                    "[use_entry_fees_cycles]=@use_entry_fees_cycles, " +
                    "[is_balloon]=@is_balloon " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, package.deleted);
                db.AddInParameter(cmd, "@code", DbType.String, package.code);
                db.AddInParameter(cmd, "@name", DbType.String, package.name);
                db.AddInParameter(cmd, "@client_type", DbType.AnsiStringFixedLength, package.client_type);
                db.AddInParameter(cmd, "@amount", DbType.Currency, package.amount);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, package.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, package.amount_max);
                db.AddInParameter(cmd, "@interest_rate", DbType.Decimal, package.interest_rate);
                db.AddInParameter(cmd, "@interest_rate_min", DbType.Decimal, package.interest_rate_min);
                db.AddInParameter(cmd, "@interest_rate_max", DbType.Decimal, package.interest_rate_max);
                db.AddInParameter(cmd, "@installment_type", DbType.Int32, package.installment_type);
                db.AddInParameter(cmd, "@grace_period", DbType.Int32, package.grace_period);
                db.AddInParameter(cmd, "@grace_period_min", DbType.Int32, package.grace_period_min);
                db.AddInParameter(cmd, "@grace_period_max", DbType.Int32, package.grace_period_max);
                db.AddInParameter(cmd, "@number_of_installments", DbType.Int32, package.number_of_installments);
                db.AddInParameter(cmd, "@number_of_installments_min", DbType.Int32, package.number_of_installments_min);
                db.AddInParameter(cmd, "@number_of_installments_max", DbType.Int32, package.number_of_installments_max);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties", DbType.Double, package.anticipated_total_repayment_penalties);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties_min", DbType.Double, package.anticipated_total_repayment_penalties_min);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties_max", DbType.Double, package.anticipated_total_repayment_penalties_max);
                db.AddInParameter(cmd, "@loan_type", DbType.Int16, package.loan_type);
                db.AddInParameter(cmd, "@keep_expected_installment", DbType.Boolean, package.keep_expected_installment);
                db.AddInParameter(cmd, "@charge_interest_within_grace_period", DbType.Boolean, package.charge_interest_within_grace_period);
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, package.cycle_id);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest", DbType.Double, package.non_repayment_penalties_based_on_overdue_interest);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount", DbType.Double, package.non_repayment_penalties_based_on_initial_amount);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb", DbType.Double, package.non_repayment_penalties_based_on_olb);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal", DbType.Double, package.non_repayment_penalties_based_on_overdue_principal);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest_min", DbType.Double, package.non_repayment_penalties_based_on_overdue_interest_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount_min", DbType.Double, package.non_repayment_penalties_based_on_initial_amount_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb_min", DbType.Double, package.non_repayment_penalties_based_on_olb_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal_min", DbType.Double, package.non_repayment_penalties_based_on_overdue_principal_min);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest_max", DbType.Double, package.non_repayment_penalties_based_on_overdue_interest_max);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount_max", DbType.Double, package.non_repayment_penalties_based_on_initial_amount_max);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb_max", DbType.Double, package.non_repayment_penalties_based_on_olb_max);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal_max", DbType.Double, package.non_repayment_penalties_based_on_overdue_principal_max);
                db.AddInParameter(cmd, "@fundingLine_id", DbType.Int32, package.fundingLine_id);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, package.currency_id);
                db.AddInParameter(cmd, "@rounding_type", DbType.Int16, package.rounding_type);
                db.AddInParameter(cmd, "@grace_period_of_latefees", DbType.Int32, package.grace_period_of_latefees);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties", DbType.Double, package.anticipated_partial_repayment_penalties);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties_min", DbType.Double, package.anticipated_partial_repayment_penalties_min);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties_max", DbType.Double, package.anticipated_partial_repayment_penalties_max);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_base", DbType.Int16, package.anticipated_partial_repayment_base);
                db.AddInParameter(cmd, "@anticipated_total_repayment_base", DbType.Int16, package.anticipated_total_repayment_base);
                db.AddInParameter(cmd, "@number_of_drawings_loc", DbType.Int32, package.number_of_drawings_loc);
                db.AddInParameter(cmd, "@amount_under_loc", DbType.Currency, package.amount_under_loc);
                db.AddInParameter(cmd, "@amount_under_loc_min", DbType.Currency, package.amount_under_loc_min);
                db.AddInParameter(cmd, "@amount_under_loc_max", DbType.Currency, package.amount_under_loc_max);
                db.AddInParameter(cmd, "@maturity_loc", DbType.Int32, package.maturity_loc);
                db.AddInParameter(cmd, "@maturity_loc_min", DbType.Int32, package.maturity_loc_min);
                db.AddInParameter(cmd, "@maturity_loc_max", DbType.Int32, package.maturity_loc_max);
                db.AddInParameter(cmd, "@activated_loc", DbType.Boolean, package.activated_loc);
                db.AddInParameter(cmd, "@allow_flexible_schedule", DbType.Boolean, package.allow_flexible_schedule);
                db.AddInParameter(cmd, "@use_guarantor_collateral", DbType.Boolean, package.use_guarantor_collateral);
                db.AddInParameter(cmd, "@set_separate_guarantor_collateral", DbType.Boolean, package.set_separate_guarantor_collateral);
                db.AddInParameter(cmd, "@percentage_total_guarantor_collateral", DbType.Int32, package.percentage_total_guarantor_collateral);
                db.AddInParameter(cmd, "@percentage_separate_guarantor", DbType.Int32, package.percentage_separate_guarantor);
                db.AddInParameter(cmd, "@percentage_separate_collateral", DbType.Int32, package.percentage_separate_collateral);
                db.AddInParameter(cmd, "@use_compulsory_savings", DbType.Boolean, package.use_compulsory_savings);
                db.AddInParameter(cmd, "@compulsory_amount", DbType.Int32, package.compulsory_amount);
                db.AddInParameter(cmd, "@compulsory_amount_min", DbType.Int32, package.compulsory_amount_min);
                db.AddInParameter(cmd, "@compulsory_amount_max", DbType.Int32, package.compulsory_amount_max);
                db.AddInParameter(cmd, "@insurance_min", DbType.Decimal, package.insurance_min);
                db.AddInParameter(cmd, "@insurance_max", DbType.Decimal, package.insurance_max);
                db.AddInParameter(cmd, "@use_entry_fees_cycles", DbType.Boolean, package.use_entry_fees_cycles);
                db.AddInParameter(cmd, "@is_balloon", DbType.Boolean, package.is_balloon);
                db.AddInParameter(cmd, "@id", DbType.Int32, package.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Packages table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Packages " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Packages table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Package object with data populated from the database.</returns>
        public Package SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [deleted], [code], [name], [client_type], [amount], [amount_min], [amount_max]" +
                        ", [interest_rate], [interest_rate_min], [interest_rate_max], [installment_type], [grace_period]" +
                        ", [grace_period_min], [grace_period_max], [number_of_installments], [number_of_installments_min]" +
                        ", [number_of_installments_max], [anticipated_total_repayment_penalties], [anticipated_total_repayment_penalties_min]" +
                        ", [anticipated_total_repayment_penalties_max], [loan_type], [keep_expected_installment]" +
                        ", [charge_interest_within_grace_period], [cycle_id], [non_repayment_penalties_based_on_overdue_interest]" +
                        ", [non_repayment_penalties_based_on_initial_amount], [non_repayment_penalties_based_on_olb]" +
                        ", [non_repayment_penalties_based_on_overdue_principal], [non_repayment_penalties_based_on_overdue_interest_min]" +
                        ", [non_repayment_penalties_based_on_initial_amount_min], [non_repayment_penalties_based_on_olb_min]" +
                        ", [non_repayment_penalties_based_on_overdue_principal_min], [non_repayment_penalties_based_on_overdue_interest_max]" +
                        ", [non_repayment_penalties_based_on_initial_amount_max], [non_repayment_penalties_based_on_olb_max]" +
                        ", [non_repayment_penalties_based_on_overdue_principal_max], [fundingLine_id], [currency_id]" +
                        ", [rounding_type], [grace_period_of_latefees], [anticipated_partial_repayment_penalties]" +
                        ", [anticipated_partial_repayment_penalties_min], [anticipated_partial_repayment_penalties_max]" +
                        ", [anticipated_partial_repayment_base], [anticipated_total_repayment_base], [number_of_drawings_loc]" +
                        ", [amount_under_loc], [amount_under_loc_min], [amount_under_loc_max], [maturity_loc]" +
                        ", [maturity_loc_min], [maturity_loc_max], [activated_loc], [allow_flexible_schedule]" +
                        ", [use_guarantor_collateral], [set_separate_guarantor_collateral], [percentage_total_guarantor_collateral]" +
                        ", [percentage_separate_guarantor], [percentage_separate_collateral], [use_compulsory_savings]" +
                        ", [compulsory_amount], [compulsory_amount_min], [compulsory_amount_max], [insurance_min]" +
                        ", [insurance_max], [use_entry_fees_cycles], [is_balloon] " +
                "FROM dbo.Packages  " +
                "WHERE [id]=@id ";

            Package package = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Package
                        package = new Package();

                        // Read values.
                        package.id = base.GetDataValue<int>(dr, "id");
                        package.deleted = base.GetDataValue<bool>(dr, "deleted");
                        package.code = base.GetDataValue<string>(dr, "code");
                        package.name = base.GetDataValue<string>(dr, "name");
                        package.client_type = Convert.ToChar(base.GetDataValue<string>(dr, "client_type"));
                        package.amount = base.GetDataValue<decimal>(dr, "amount");
                        package.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        package.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                        package.interest_rate = base.GetDataValue<decimal>(dr, "interest_rate");
                        package.interest_rate_min = base.GetDataValue<decimal>(dr, "interest_rate_min");
                        package.interest_rate_max = base.GetDataValue<decimal>(dr, "interest_rate_max");
                        package.installment_type = base.GetDataValue<int>(dr, "installment_type");
                        package.grace_period = base.GetDataValue<int>(dr, "grace_period");
                        package.grace_period_min = base.GetDataValue<int>(dr, "grace_period_min");
                        package.grace_period_max = base.GetDataValue<int>(dr, "grace_period_max");
                        package.number_of_installments = base.GetDataValue<int>(dr, "number_of_installments");
                        package.number_of_installments_min = base.GetDataValue<int>(dr, "number_of_installments_min");
                        package.number_of_installments_max = base.GetDataValue<int>(dr, "number_of_installments_max");
                        package.anticipated_total_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties");
                        package.anticipated_total_repayment_penalties_min = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties_min");
                        package.anticipated_total_repayment_penalties_max = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties_max");
                        package.loan_type = base.GetDataValue<short>(dr, "loan_type");
                        package.keep_expected_installment = base.GetDataValue<bool>(dr, "keep_expected_installment");
                        package.charge_interest_within_grace_period = base.GetDataValue<bool>(dr, "charge_interest_within_grace_period");
                        package.cycle_id = base.GetDataValue<int>(dr, "cycle_id");
                        package.non_repayment_penalties_based_on_overdue_interest = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest");
                        package.non_repayment_penalties_based_on_initial_amount = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount");
                        package.non_repayment_penalties_based_on_olb = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb");
                        package.non_repayment_penalties_based_on_overdue_principal = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal");
                        package.non_repayment_penalties_based_on_overdue_interest_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest_min");
                        package.non_repayment_penalties_based_on_initial_amount_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount_min");
                        package.non_repayment_penalties_based_on_olb_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb_min");
                        package.non_repayment_penalties_based_on_overdue_principal_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal_min");
                        package.non_repayment_penalties_based_on_overdue_interest_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest_max");
                        package.non_repayment_penalties_based_on_initial_amount_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount_max");
                        package.non_repayment_penalties_based_on_olb_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb_max");
                        package.non_repayment_penalties_based_on_overdue_principal_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal_max");
                        package.fundingLine_id = base.GetDataValue<int>(dr, "fundingLine_id");
                        package.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        package.rounding_type = base.GetDataValue<short>(dr, "rounding_type");
                        package.grace_period_of_latefees = base.GetDataValue<int>(dr, "grace_period_of_latefees");
                        package.anticipated_partial_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties");
                        package.anticipated_partial_repayment_penalties_min = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties_min");
                        package.anticipated_partial_repayment_penalties_max = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties_max");
                        package.anticipated_partial_repayment_base = base.GetDataValue<short>(dr, "anticipated_partial_repayment_base");
                        package.anticipated_total_repayment_base = base.GetDataValue<short>(dr, "anticipated_total_repayment_base");
                        package.number_of_drawings_loc = base.GetDataValue<int>(dr, "number_of_drawings_loc");
                        package.amount_under_loc = base.GetDataValue<decimal>(dr, "amount_under_loc");
                        package.amount_under_loc_min = base.GetDataValue<decimal>(dr, "amount_under_loc_min");
                        package.amount_under_loc_max = base.GetDataValue<decimal>(dr, "amount_under_loc_max");
                        package.maturity_loc = base.GetDataValue<int>(dr, "maturity_loc");
                        package.maturity_loc_min = base.GetDataValue<int>(dr, "maturity_loc_min");
                        package.maturity_loc_max = base.GetDataValue<int>(dr, "maturity_loc_max");
                        package.activated_loc = base.GetDataValue<bool>(dr, "activated_loc");
                        package.allow_flexible_schedule = base.GetDataValue<bool>(dr, "allow_flexible_schedule");
                        package.use_guarantor_collateral = base.GetDataValue<bool>(dr, "use_guarantor_collateral");
                        package.set_separate_guarantor_collateral = base.GetDataValue<bool>(dr, "set_separate_guarantor_collateral");
                        package.percentage_total_guarantor_collateral = base.GetDataValue<int>(dr, "percentage_total_guarantor_collateral");
                        package.percentage_separate_guarantor = base.GetDataValue<int>(dr, "percentage_separate_guarantor");
                        package.percentage_separate_collateral = base.GetDataValue<int>(dr, "percentage_separate_collateral");
                        package.use_compulsory_savings = base.GetDataValue<bool>(dr, "use_compulsory_savings");
                        package.compulsory_amount = base.GetDataValue<int>(dr, "compulsory_amount");
                        package.compulsory_amount_min = base.GetDataValue<int>(dr, "compulsory_amount_min");
                        package.compulsory_amount_max = base.GetDataValue<int>(dr, "compulsory_amount_max");
                        package.insurance_min = base.GetDataValue<decimal>(dr, "insurance_min");
                        package.insurance_max = base.GetDataValue<decimal>(dr, "insurance_max");
                        package.use_entry_fees_cycles = base.GetDataValue<bool>(dr, "use_entry_fees_cycles");
                        package.is_balloon = base.GetDataValue<bool>(dr, "is_balloon");
                    }
                }
            }

            return package;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Packages table.
        /// </summary>
        /// <returns>A collection of Package objects.</returns>		
        public List<Package> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [deleted], [code], [name], [client_type], [amount], [amount_min], [amount_max]" +
                        ", [interest_rate], [interest_rate_min], [interest_rate_max], [installment_type], [grace_period]" +
                        ", [grace_period_min], [grace_period_max], [number_of_installments], [number_of_installments_min]" +
                        ", [number_of_installments_max], [anticipated_total_repayment_penalties], [anticipated_total_repayment_penalties_min]" +
                        ", [anticipated_total_repayment_penalties_max], [loan_type], [keep_expected_installment]" +
                        ", [charge_interest_within_grace_period], [cycle_id], [non_repayment_penalties_based_on_overdue_interest]" +
                        ", [non_repayment_penalties_based_on_initial_amount], [non_repayment_penalties_based_on_olb]" +
                        ", [non_repayment_penalties_based_on_overdue_principal], [non_repayment_penalties_based_on_overdue_interest_min]" +
                        ", [non_repayment_penalties_based_on_initial_amount_min], [non_repayment_penalties_based_on_olb_min]" +
                        ", [non_repayment_penalties_based_on_overdue_principal_min], [non_repayment_penalties_based_on_overdue_interest_max]" +
                        ", [non_repayment_penalties_based_on_initial_amount_max], [non_repayment_penalties_based_on_olb_max]" +
                        ", [non_repayment_penalties_based_on_overdue_principal_max], [fundingLine_id], [currency_id]" +
                        ", [rounding_type], [grace_period_of_latefees], [anticipated_partial_repayment_penalties]" +
                        ", [anticipated_partial_repayment_penalties_min], [anticipated_partial_repayment_penalties_max]" +
                        ", [anticipated_partial_repayment_base], [anticipated_total_repayment_base], [number_of_drawings_loc]" +
                        ", [amount_under_loc], [amount_under_loc_min], [amount_under_loc_max], [maturity_loc]" +
                        ", [maturity_loc_min], [maturity_loc_max], [activated_loc], [allow_flexible_schedule]" +
                        ", [use_guarantor_collateral], [set_separate_guarantor_collateral], [percentage_total_guarantor_collateral]" +
                        ", [percentage_separate_guarantor], [percentage_separate_collateral], [use_compulsory_savings]" +
                        ", [compulsory_amount], [compulsory_amount_min], [compulsory_amount_max], [insurance_min]" +
                        ", [insurance_max], [use_entry_fees_cycles], [is_balloon] " +
                "FROM dbo.Packages ";

            List<Package> result = new List<Package>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Package
                        Package package = new Package();

                        // Read values.
                        package.id = base.GetDataValue<int>(dr, "id");
                        package.deleted = base.GetDataValue<bool>(dr, "deleted");
                        package.code = base.GetDataValue<string>(dr, "code");
                        package.name = base.GetDataValue<string>(dr, "name");
                        package.client_type = Convert.ToChar(base.GetDataValue<string>(dr, "client_type"));
                        package.amount = base.GetDataValue<decimal>(dr, "amount");
                        package.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        package.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                        package.interest_rate = base.GetDataValue<decimal>(dr, "interest_rate");
                        package.interest_rate_min = base.GetDataValue<decimal>(dr, "interest_rate_min");
                        package.interest_rate_max = base.GetDataValue<decimal>(dr, "interest_rate_max");
                        package.installment_type = base.GetDataValue<int>(dr, "installment_type");
                        package.grace_period = base.GetDataValue<int>(dr, "grace_period");
                        package.grace_period_min = base.GetDataValue<int>(dr, "grace_period_min");
                        package.grace_period_max = base.GetDataValue<int>(dr, "grace_period_max");
                        package.number_of_installments = base.GetDataValue<int>(dr, "number_of_installments");
                        package.number_of_installments_min = base.GetDataValue<int>(dr, "number_of_installments_min");
                        package.number_of_installments_max = base.GetDataValue<int>(dr, "number_of_installments_max");
                        package.anticipated_total_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties");
                        package.anticipated_total_repayment_penalties_min = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties_min");
                        package.anticipated_total_repayment_penalties_max = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties_max");
                        package.loan_type = base.GetDataValue<short>(dr, "loan_type");
                        package.keep_expected_installment = base.GetDataValue<bool>(dr, "keep_expected_installment");
                        package.charge_interest_within_grace_period = base.GetDataValue<bool>(dr, "charge_interest_within_grace_period");
                        package.cycle_id = base.GetDataValue<int>(dr, "cycle_id");
                        package.non_repayment_penalties_based_on_overdue_interest = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest");
                        package.non_repayment_penalties_based_on_initial_amount = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount");
                        package.non_repayment_penalties_based_on_olb = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb");
                        package.non_repayment_penalties_based_on_overdue_principal = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal");
                        package.non_repayment_penalties_based_on_overdue_interest_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest_min");
                        package.non_repayment_penalties_based_on_initial_amount_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount_min");
                        package.non_repayment_penalties_based_on_olb_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb_min");
                        package.non_repayment_penalties_based_on_overdue_principal_min = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal_min");
                        package.non_repayment_penalties_based_on_overdue_interest_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest_max");
                        package.non_repayment_penalties_based_on_initial_amount_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount_max");
                        package.non_repayment_penalties_based_on_olb_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb_max");
                        package.non_repayment_penalties_based_on_overdue_principal_max = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal_max");
                        package.fundingLine_id = base.GetDataValue<int>(dr, "fundingLine_id");
                        package.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        package.rounding_type = base.GetDataValue<short>(dr, "rounding_type");
                        package.grace_period_of_latefees = base.GetDataValue<int>(dr, "grace_period_of_latefees");
                        package.anticipated_partial_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties");
                        package.anticipated_partial_repayment_penalties_min = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties_min");
                        package.anticipated_partial_repayment_penalties_max = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties_max");
                        package.anticipated_partial_repayment_base = base.GetDataValue<short>(dr, "anticipated_partial_repayment_base");
                        package.anticipated_total_repayment_base = base.GetDataValue<short>(dr, "anticipated_total_repayment_base");
                        package.number_of_drawings_loc = base.GetDataValue<int>(dr, "number_of_drawings_loc");
                        package.amount_under_loc = base.GetDataValue<decimal>(dr, "amount_under_loc");
                        package.amount_under_loc_min = base.GetDataValue<decimal>(dr, "amount_under_loc_min");
                        package.amount_under_loc_max = base.GetDataValue<decimal>(dr, "amount_under_loc_max");
                        package.maturity_loc = base.GetDataValue<int>(dr, "maturity_loc");
                        package.maturity_loc_min = base.GetDataValue<int>(dr, "maturity_loc_min");
                        package.maturity_loc_max = base.GetDataValue<int>(dr, "maturity_loc_max");
                        package.activated_loc = base.GetDataValue<bool>(dr, "activated_loc");
                        package.allow_flexible_schedule = base.GetDataValue<bool>(dr, "allow_flexible_schedule");
                        package.use_guarantor_collateral = base.GetDataValue<bool>(dr, "use_guarantor_collateral");
                        package.set_separate_guarantor_collateral = base.GetDataValue<bool>(dr, "set_separate_guarantor_collateral");
                        package.percentage_total_guarantor_collateral = base.GetDataValue<int>(dr, "percentage_total_guarantor_collateral");
                        package.percentage_separate_guarantor = base.GetDataValue<int>(dr, "percentage_separate_guarantor");
                        package.percentage_separate_collateral = base.GetDataValue<int>(dr, "percentage_separate_collateral");
                        package.use_compulsory_savings = base.GetDataValue<bool>(dr, "use_compulsory_savings");
                        package.compulsory_amount = base.GetDataValue<int>(dr, "compulsory_amount");
                        package.compulsory_amount_min = base.GetDataValue<int>(dr, "compulsory_amount_min");
                        package.compulsory_amount_max = base.GetDataValue<int>(dr, "compulsory_amount_max");
                        package.insurance_min = base.GetDataValue<decimal>(dr, "insurance_min");
                        package.insurance_max = base.GetDataValue<decimal>(dr, "insurance_max");
                        package.use_entry_fees_cycles = base.GetDataValue<bool>(dr, "use_entry_fees_cycles");
                        package.is_balloon = base.GetDataValue<bool>(dr, "is_balloon");

                        // Add to List.
                        result.Add(package);
                    }
                }
            }

            return result;
        }
    }
}

