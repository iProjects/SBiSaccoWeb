//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// TechnicalParameters data access component. Manages CRUD operations for the TechnicalParameters table.
    /// </summary>
    public partial class TechnicalParameterDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TechnicalParameters table.
        /// </summary>
        /// <param name="technicalParameter">A TechnicalParameter object.</param>
        /// <returns>An updated TechnicalParameter object.</returns>
        public TechnicalParameter Create(TechnicalParameter technicalParameter)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TechnicalParameters ([name], [value]) " +
                "VALUES(@name, @value);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, technicalParameter.name);
                db.AddInParameter(cmd, "@value", DbType.String, technicalParameter.value);

                db.ExecuteNonQuery(cmd);
            }

            return technicalParameter;
        }

        /// <summary>
        /// Updates an existing row in the TechnicalParameters table.
        /// </summary>
        /// <param name="technicalParameter">A TechnicalParameter entity object.</param>
        public void UpdateById(TechnicalParameter technicalParameter)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TechnicalParameters " +
                "SET " +
                    "[value]=@value " +
                "WHERE [name]=@name ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@value", DbType.String, technicalParameter.value);
                db.AddInParameter(cmd, "@name", DbType.String, technicalParameter.name);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TechnicalParameters table.
        /// </summary>
        /// <param name="name">A name value.</param>
        public void DeleteById(string name)
        {
            const string SQL_STATEMENT = "DELETE dbo.TechnicalParameters " +
                                         "WHERE [name]=@name ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, name);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TechnicalParameters table.
        /// </summary>
        /// <param name="name">A name value.</param>
        /// <returns>A TechnicalParameter object with data populated from the database.</returns>
        public TechnicalParameter SelectById(string name)
        {
            const string SQL_STATEMENT =
                "SELECT [name], [value] " +
                "FROM dbo.TechnicalParameters  " +
                "WHERE [name]=@name ";

            TechnicalParameter technicalParameter = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@name", DbType.String, name);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TechnicalParameter
                        technicalParameter = new TechnicalParameter();

                        // Read values.
                        technicalParameter.name = base.GetDataValue<string>(dr, "name");
                        technicalParameter.value = base.GetDataValue<string>(dr, "value");
                    }
                }
            }

            return technicalParameter;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TechnicalParameters table.
        /// </summary>
        /// <returns>A collection of TechnicalParameter objects.</returns>		
        public List<TechnicalParameter> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [name], [value] " +
                "FROM dbo.TechnicalParameters ";

            List<TechnicalParameter> result = new List<TechnicalParameter>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TechnicalParameter
                        TechnicalParameter technicalParameter = new TechnicalParameter();

                        // Read values.
                        technicalParameter.name = base.GetDataValue<string>(dr, "name");
                        technicalParameter.value = base.GetDataValue<string>(dr, "value");

                        // Add to List.
                        result.Add(technicalParameter);
                    }
                }
            }

            return result;
        }
    }
}

