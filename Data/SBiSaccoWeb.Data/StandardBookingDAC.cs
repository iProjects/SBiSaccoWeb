//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// StandardBookings data access component. Manages CRUD operations for the StandardBookings table.
    /// </summary>
    public partial class StandardBookingDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the StandardBookings table.
        /// </summary>
        /// <param name="standardBooking">A StandardBooking object.</param>
        /// <returns>An updated StandardBooking object.</returns>
        public StandardBooking Create(StandardBooking standardBooking)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.StandardBookings ([Name], [debit_account_id], [credit_account_id]) " +
                "VALUES(@Name, @debit_account_id, @credit_account_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.AnsiString, standardBooking.Name);
                db.AddInParameter(cmd, "@debit_account_id", DbType.Int32, standardBooking.debit_account_id);
                db.AddInParameter(cmd, "@credit_account_id", DbType.Int32, standardBooking.credit_account_id);

                // Get the primary key value.
                standardBooking.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return standardBooking;
        }

        /// <summary>
        /// Updates an existing row in the StandardBookings table.
        /// </summary>
        /// <param name="standardBooking">A StandardBooking entity object.</param>
        public void UpdateById(StandardBooking standardBooking)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.StandardBookings " +
                "SET " +
                    "[Name]=@Name, " +
                    "[debit_account_id]=@debit_account_id, " +
                    "[credit_account_id]=@credit_account_id " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.AnsiString, standardBooking.Name);
                db.AddInParameter(cmd, "@debit_account_id", DbType.Int32, standardBooking.debit_account_id);
                db.AddInParameter(cmd, "@credit_account_id", DbType.Int32, standardBooking.credit_account_id);
                db.AddInParameter(cmd, "@Id", DbType.Int32, standardBooking.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the StandardBookings table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.StandardBookings " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the StandardBookings table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A StandardBooking object with data populated from the database.</returns>
        public StandardBooking SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Name], [debit_account_id], [credit_account_id] " +
                "FROM dbo.StandardBookings  " +
                "WHERE [Id]=@Id ";

            StandardBooking standardBooking = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new StandardBooking
                        standardBooking = new StandardBooking();

                        // Read values.
                        standardBooking.Id = base.GetDataValue<int>(dr, "Id");
                        standardBooking.Name = base.GetDataValue<string>(dr, "Name");
                        standardBooking.debit_account_id = base.GetDataValue<int>(dr, "debit_account_id");
                        standardBooking.credit_account_id = base.GetDataValue<int>(dr, "credit_account_id");
                    }
                }
            }

            return standardBooking;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the StandardBookings table.
        /// </summary>
        /// <returns>A collection of StandardBooking objects.</returns>		
        public List<StandardBooking> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Name], [debit_account_id], [credit_account_id] " +
                "FROM dbo.StandardBookings ";

            List<StandardBooking> result = new List<StandardBooking>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new StandardBooking
                        StandardBooking standardBooking = new StandardBooking();

                        // Read values.
                        standardBooking.Id = base.GetDataValue<int>(dr, "Id");
                        standardBooking.Name = base.GetDataValue<string>(dr, "Name");
                        standardBooking.debit_account_id = base.GetDataValue<int>(dr, "debit_account_id");
                        standardBooking.credit_account_id = base.GetDataValue<int>(dr, "credit_account_id");

                        // Add to List.
                        result.Add(standardBooking);
                    }
                }
            }

            return result;
        }
    }
}

