//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// SavingProducts data access component. Manages CRUD operations for the SavingProducts table.
    /// </summary>
    public partial class SavingProductDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the SavingProducts table.
        /// </summary>
        /// <param name="savingProduct">A SavingProduct object.</param>
        /// <returns>An updated SavingProduct object.</returns>
        public SavingProduct Create(SavingProduct savingProduct)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SavingProducts ([deleted], [name], [client_type], [initial_amount_min], [initial_amount_max], [balance_min], [balance_max], [withdraw_min], [withdraw_max], [deposit_min], [deposit_max], [interest_rate], [interest_rate_min], [interest_rate_max], [currency_id], [entry_fees_min], [entry_fees_max], [entry_fees], [product_type], [code], [transfer_min], [transfer_max]) " +
                "VALUES(@deleted, @name, @client_type, @initial_amount_min, @initial_amount_max, @balance_min, @balance_max, @withdraw_min, @withdraw_max, @deposit_min, @deposit_max, @interest_rate, @interest_rate_min, @interest_rate_max, @currency_id, @entry_fees_min, @entry_fees_max, @entry_fees, @product_type, @code, @transfer_min, @transfer_max); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, savingProduct.deleted);
                db.AddInParameter(cmd, "@name", DbType.String, savingProduct.name);
                db.AddInParameter(cmd, "@client_type", DbType.AnsiStringFixedLength, savingProduct.client_type);
                db.AddInParameter(cmd, "@initial_amount_min", DbType.Currency, savingProduct.initial_amount_min);
                db.AddInParameter(cmd, "@initial_amount_max", DbType.Currency, savingProduct.initial_amount_max);
                db.AddInParameter(cmd, "@balance_min", DbType.Currency, savingProduct.balance_min);
                db.AddInParameter(cmd, "@balance_max", DbType.Currency, savingProduct.balance_max);
                db.AddInParameter(cmd, "@withdraw_min", DbType.Currency, savingProduct.withdraw_min);
                db.AddInParameter(cmd, "@withdraw_max", DbType.Currency, savingProduct.withdraw_max);
                db.AddInParameter(cmd, "@deposit_min", DbType.Currency, savingProduct.deposit_min);
                db.AddInParameter(cmd, "@deposit_max", DbType.Currency, savingProduct.deposit_max);
                db.AddInParameter(cmd, "@interest_rate", DbType.Double, savingProduct.interest_rate);
                db.AddInParameter(cmd, "@interest_rate_min", DbType.Double, savingProduct.interest_rate_min);
                db.AddInParameter(cmd, "@interest_rate_max", DbType.Double, savingProduct.interest_rate_max);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, savingProduct.currency_id);
                db.AddInParameter(cmd, "@entry_fees_min", DbType.Currency, savingProduct.entry_fees_min);
                db.AddInParameter(cmd, "@entry_fees_max", DbType.Currency, savingProduct.entry_fees_max);
                db.AddInParameter(cmd, "@entry_fees", DbType.Currency, savingProduct.entry_fees);
                db.AddInParameter(cmd, "@product_type", DbType.AnsiStringFixedLength, savingProduct.product_type);
                db.AddInParameter(cmd, "@code", DbType.String, savingProduct.code);
                db.AddInParameter(cmd, "@transfer_min", DbType.Currency, savingProduct.transfer_min);
                db.AddInParameter(cmd, "@transfer_max", DbType.Currency, savingProduct.transfer_max);

                // Get the primary key value.
                savingProduct.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return savingProduct;
        }

        /// <summary>
        /// Updates an existing row in the SavingProducts table.
        /// </summary>
        /// <param name="savingProduct">A SavingProduct entity object.</param>
        public void UpdateById(SavingProduct savingProduct)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SavingProducts " +
                "SET " +
                    "[deleted]=@deleted, " +
                    "[name]=@name, " +
                    "[client_type]=@client_type, " +
                    "[initial_amount_min]=@initial_amount_min, " +
                    "[initial_amount_max]=@initial_amount_max, " +
                    "[balance_min]=@balance_min, " +
                    "[balance_max]=@balance_max, " +
                    "[withdraw_min]=@withdraw_min, " +
                    "[withdraw_max]=@withdraw_max, " +
                    "[deposit_min]=@deposit_min, " +
                    "[deposit_max]=@deposit_max, " +
                    "[interest_rate]=@interest_rate, " +
                    "[interest_rate_min]=@interest_rate_min, " +
                    "[interest_rate_max]=@interest_rate_max, " +
                    "[currency_id]=@currency_id, " +
                    "[entry_fees_min]=@entry_fees_min, " +
                    "[entry_fees_max]=@entry_fees_max, " +
                    "[entry_fees]=@entry_fees, " +
                    "[product_type]=@product_type, " +
                    "[code]=@code, " +
                    "[transfer_min]=@transfer_min, " +
                    "[transfer_max]=@transfer_max " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, savingProduct.deleted);
                db.AddInParameter(cmd, "@name", DbType.String, savingProduct.name);
                db.AddInParameter(cmd, "@client_type", DbType.AnsiStringFixedLength, savingProduct.client_type);
                db.AddInParameter(cmd, "@initial_amount_min", DbType.Currency, savingProduct.initial_amount_min);
                db.AddInParameter(cmd, "@initial_amount_max", DbType.Currency, savingProduct.initial_amount_max);
                db.AddInParameter(cmd, "@balance_min", DbType.Currency, savingProduct.balance_min);
                db.AddInParameter(cmd, "@balance_max", DbType.Currency, savingProduct.balance_max);
                db.AddInParameter(cmd, "@withdraw_min", DbType.Currency, savingProduct.withdraw_min);
                db.AddInParameter(cmd, "@withdraw_max", DbType.Currency, savingProduct.withdraw_max);
                db.AddInParameter(cmd, "@deposit_min", DbType.Currency, savingProduct.deposit_min);
                db.AddInParameter(cmd, "@deposit_max", DbType.Currency, savingProduct.deposit_max);
                db.AddInParameter(cmd, "@interest_rate", DbType.Double, savingProduct.interest_rate);
                db.AddInParameter(cmd, "@interest_rate_min", DbType.Double, savingProduct.interest_rate_min);
                db.AddInParameter(cmd, "@interest_rate_max", DbType.Double, savingProduct.interest_rate_max);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, savingProduct.currency_id);
                db.AddInParameter(cmd, "@entry_fees_min", DbType.Currency, savingProduct.entry_fees_min);
                db.AddInParameter(cmd, "@entry_fees_max", DbType.Currency, savingProduct.entry_fees_max);
                db.AddInParameter(cmd, "@entry_fees", DbType.Currency, savingProduct.entry_fees);
                db.AddInParameter(cmd, "@product_type", DbType.AnsiStringFixedLength, savingProduct.product_type);
                db.AddInParameter(cmd, "@code", DbType.String, savingProduct.code);
                db.AddInParameter(cmd, "@transfer_min", DbType.Currency, savingProduct.transfer_min);
                db.AddInParameter(cmd, "@transfer_max", DbType.Currency, savingProduct.transfer_max);
                db.AddInParameter(cmd, "@id", DbType.Int32, savingProduct.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SavingProducts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SavingProducts " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SavingProducts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A SavingProduct object with data populated from the database.</returns>
        public SavingProduct SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [deleted], [name], [client_type], [initial_amount_min], [initial_amount_max]" +
                        ", [balance_min], [balance_max], [withdraw_min], [withdraw_max], [deposit_min], [deposit_max]" +
                        ", [interest_rate], [interest_rate_min], [interest_rate_max], [currency_id], [entry_fees_min]" +
                        ", [entry_fees_max], [entry_fees], [product_type], [code], [transfer_min], [transfer_max]" +
                        " " +
                "FROM dbo.SavingProducts  " +
                "WHERE [id]=@id ";

            SavingProduct savingProduct = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SavingProduct
                        savingProduct = new SavingProduct();

                        // Read values.
                        savingProduct.id = base.GetDataValue<int>(dr, "id");
                        savingProduct.deleted = base.GetDataValue<bool>(dr, "deleted");
                        savingProduct.name = base.GetDataValue<string>(dr, "name");
                        savingProduct.client_type = Convert.ToChar(base.GetDataValue<string>(dr, "client_type"));
                        savingProduct.initial_amount_min = base.GetDataValue<decimal>(dr, "initial_amount_min");
                        savingProduct.initial_amount_max = base.GetDataValue<decimal>(dr, "initial_amount_max");
                        savingProduct.balance_min = base.GetDataValue<decimal>(dr, "balance_min");
                        savingProduct.balance_max = base.GetDataValue<decimal>(dr, "balance_max");
                        savingProduct.withdraw_min = base.GetDataValue<decimal>(dr, "withdraw_min");
                        savingProduct.withdraw_max = base.GetDataValue<decimal>(dr, "withdraw_max");
                        savingProduct.deposit_min = base.GetDataValue<decimal>(dr, "deposit_min");
                        savingProduct.deposit_max = base.GetDataValue<decimal>(dr, "deposit_max");
                        savingProduct.interest_rate = base.GetDataValue<double>(dr, "interest_rate");
                        savingProduct.interest_rate_min = base.GetDataValue<double>(dr, "interest_rate_min");
                        savingProduct.interest_rate_max = base.GetDataValue<double>(dr, "interest_rate_max");
                        savingProduct.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        savingProduct.entry_fees_min = base.GetDataValue<decimal>(dr, "entry_fees_min");
                        savingProduct.entry_fees_max = base.GetDataValue<decimal>(dr, "entry_fees_max");
                        savingProduct.entry_fees = base.GetDataValue<decimal>(dr, "entry_fees");
                        savingProduct.product_type = Convert.ToChar(base.GetDataValue<string>(dr, "product_type"));
                        savingProduct.code = base.GetDataValue<string>(dr, "code");
                        savingProduct.transfer_min = base.GetDataValue<decimal>(dr, "transfer_min");
                        savingProduct.transfer_max = base.GetDataValue<decimal>(dr, "transfer_max");
                    }
                }
            }

            return savingProduct;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SavingProducts table.
        /// </summary>
        /// <returns>A collection of SavingProduct objects.</returns>		
        public List<SavingProduct> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [deleted], [name], [client_type], [initial_amount_min], [initial_amount_max]" +
                        ", [balance_min], [balance_max], [withdraw_min], [withdraw_max], [deposit_min], [deposit_max]" +
                        ", [interest_rate], [interest_rate_min], [interest_rate_max], [currency_id], [entry_fees_min]" +
                        ", [entry_fees_max], [entry_fees], [product_type], [code], [transfer_min], [transfer_max]" +
                        " " +
                "FROM dbo.SavingProducts ";

            List<SavingProduct> result = new List<SavingProduct>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SavingProduct
                        SavingProduct savingProduct = new SavingProduct();

                        // Read values.
                        savingProduct.id = base.GetDataValue<int>(dr, "id");
                        savingProduct.deleted = base.GetDataValue<bool>(dr, "deleted");
                        savingProduct.name = base.GetDataValue<string>(dr, "name");
                        savingProduct.client_type = Convert.ToChar(base.GetDataValue<string>(dr, "client_type"));
                        savingProduct.initial_amount_min = base.GetDataValue<decimal>(dr, "initial_amount_min");
                        savingProduct.initial_amount_max = base.GetDataValue<decimal>(dr, "initial_amount_max");
                        savingProduct.balance_min = base.GetDataValue<decimal>(dr, "balance_min");
                        savingProduct.balance_max = base.GetDataValue<decimal>(dr, "balance_max");
                        savingProduct.withdraw_min = base.GetDataValue<decimal>(dr, "withdraw_min");
                        savingProduct.withdraw_max = base.GetDataValue<decimal>(dr, "withdraw_max");
                        savingProduct.deposit_min = base.GetDataValue<decimal>(dr, "deposit_min");
                        savingProduct.deposit_max = base.GetDataValue<decimal>(dr, "deposit_max");
                        savingProduct.interest_rate = base.GetDataValue<double>(dr, "interest_rate");
                        savingProduct.interest_rate_min = base.GetDataValue<double>(dr, "interest_rate_min");
                        savingProduct.interest_rate_max = base.GetDataValue<double>(dr, "interest_rate_max");
                        savingProduct.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        savingProduct.entry_fees_min = base.GetDataValue<decimal>(dr, "entry_fees_min");
                        savingProduct.entry_fees_max = base.GetDataValue<decimal>(dr, "entry_fees_max");
                        savingProduct.entry_fees = base.GetDataValue<decimal>(dr, "entry_fees");
                        savingProduct.product_type = Convert.ToChar(base.GetDataValue<string>(dr, "product_type"));
                        savingProduct.code = base.GetDataValue<string>(dr, "code");
                        savingProduct.transfer_min = base.GetDataValue<decimal>(dr, "transfer_min");
                        savingProduct.transfer_max = base.GetDataValue<decimal>(dr, "transfer_max");

                        // Add to List.
                        result.Add(savingProduct);
                    }
                }
            }

            return result;
        }
    }
}

