//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// TermDepositProducts data access component. Manages CRUD operations for the TermDepositProducts table.
    /// </summary>
    public partial class TermDepositProductDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TermDepositProducts table.
        /// </summary>
        /// <param name="termDepositProduct">A TermDepositProduct object.</param>
        /// <returns>An updated TermDepositProduct object.</returns>
        public TermDepositProduct Create(TermDepositProduct termDepositProduct)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TermDepositProducts ([id], [installment_types_id], [number_period], [number_period_min], [number_period_max], [interest_frequency], [withdrawal_fees_type], [withdrawal_fees_min], [withdrawal_fees_max], [withdrawal_fees]) " +
                "VALUES(@id, @installment_types_id, @number_period, @number_period_min, @number_period_max, @interest_frequency, @withdrawal_fees_type, @withdrawal_fees_min, @withdrawal_fees_max, @withdrawal_fees);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, termDepositProduct.id);
                db.AddInParameter(cmd, "@installment_types_id", DbType.Int32, termDepositProduct.installment_types_id);
                db.AddInParameter(cmd, "@number_period", DbType.Int32, termDepositProduct.number_period);
                db.AddInParameter(cmd, "@number_period_min", DbType.Int32, termDepositProduct.number_period_min);
                db.AddInParameter(cmd, "@number_period_max", DbType.Int32, termDepositProduct.number_period_max);
                db.AddInParameter(cmd, "@interest_frequency", DbType.Int16, termDepositProduct.interest_frequency);
                db.AddInParameter(cmd, "@withdrawal_fees_type", DbType.Int16, termDepositProduct.withdrawal_fees_type);
                db.AddInParameter(cmd, "@withdrawal_fees_min", DbType.Double, termDepositProduct.withdrawal_fees_min);
                db.AddInParameter(cmd, "@withdrawal_fees_max", DbType.Double, termDepositProduct.withdrawal_fees_max);
                db.AddInParameter(cmd, "@withdrawal_fees", DbType.Double, termDepositProduct.withdrawal_fees);

                db.ExecuteNonQuery(cmd);
            }

            return termDepositProduct;
        }

        /// <summary>
        /// Updates an existing row in the TermDepositProducts table.
        /// </summary>
        /// <param name="termDepositProduct">A TermDepositProduct entity object.</param>
        public void UpdateById(TermDepositProduct termDepositProduct)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TermDepositProducts " +
                "SET " +
                    "[installment_types_id]=@installment_types_id, " +
                    "[number_period]=@number_period, " +
                    "[number_period_min]=@number_period_min, " +
                    "[number_period_max]=@number_period_max, " +
                    "[interest_frequency]=@interest_frequency, " +
                    "[withdrawal_fees_type]=@withdrawal_fees_type, " +
                    "[withdrawal_fees_min]=@withdrawal_fees_min, " +
                    "[withdrawal_fees_max]=@withdrawal_fees_max, " +
                    "[withdrawal_fees]=@withdrawal_fees " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@installment_types_id", DbType.Int32, termDepositProduct.installment_types_id);
                db.AddInParameter(cmd, "@number_period", DbType.Int32, termDepositProduct.number_period);
                db.AddInParameter(cmd, "@number_period_min", DbType.Int32, termDepositProduct.number_period_min);
                db.AddInParameter(cmd, "@number_period_max", DbType.Int32, termDepositProduct.number_period_max);
                db.AddInParameter(cmd, "@interest_frequency", DbType.Int16, termDepositProduct.interest_frequency);
                db.AddInParameter(cmd, "@withdrawal_fees_type", DbType.Int16, termDepositProduct.withdrawal_fees_type);
                db.AddInParameter(cmd, "@withdrawal_fees_min", DbType.Double, termDepositProduct.withdrawal_fees_min);
                db.AddInParameter(cmd, "@withdrawal_fees_max", DbType.Double, termDepositProduct.withdrawal_fees_max);
                db.AddInParameter(cmd, "@withdrawal_fees", DbType.Double, termDepositProduct.withdrawal_fees);
                db.AddInParameter(cmd, "@id", DbType.Int32, termDepositProduct.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TermDepositProducts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TermDepositProducts " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TermDepositProducts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A TermDepositProduct object with data populated from the database.</returns>
        public TermDepositProduct SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [installment_types_id], [number_period], [number_period_min], [number_period_max]" +
                        ", [interest_frequency], [withdrawal_fees_type], [withdrawal_fees_min], [withdrawal_fees_max]" +
                        ", [withdrawal_fees] " +
                "FROM dbo.TermDepositProducts  " +
                "WHERE [id]=@id ";

            TermDepositProduct termDepositProduct = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TermDepositProduct
                        termDepositProduct = new TermDepositProduct();

                        // Read values.
                        termDepositProduct.id = base.GetDataValue<int>(dr, "id");
                        termDepositProduct.installment_types_id = base.GetDataValue<int>(dr, "installment_types_id");
                        termDepositProduct.number_period = base.GetDataValue<int>(dr, "number_period");
                        termDepositProduct.number_period_min = base.GetDataValue<int>(dr, "number_period_min");
                        termDepositProduct.number_period_max = base.GetDataValue<int>(dr, "number_period_max");
                        termDepositProduct.interest_frequency = base.GetDataValue<short>(dr, "interest_frequency");
                        termDepositProduct.withdrawal_fees_type = base.GetDataValue<short>(dr, "withdrawal_fees_type");
                        termDepositProduct.withdrawal_fees_min = base.GetDataValue<double>(dr, "withdrawal_fees_min");
                        termDepositProduct.withdrawal_fees_max = base.GetDataValue<double>(dr, "withdrawal_fees_max");
                        termDepositProduct.withdrawal_fees = base.GetDataValue<double>(dr, "withdrawal_fees");
                    }
                }
            }

            return termDepositProduct;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TermDepositProducts table.
        /// </summary>
        /// <returns>A collection of TermDepositProduct objects.</returns>		
        public List<TermDepositProduct> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [installment_types_id], [number_period], [number_period_min], [number_period_max]" +
                        ", [interest_frequency], [withdrawal_fees_type], [withdrawal_fees_min], [withdrawal_fees_max]" +
                        ", [withdrawal_fees] " +
                "FROM dbo.TermDepositProducts ";

            List<TermDepositProduct> result = new List<TermDepositProduct>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TermDepositProduct
                        TermDepositProduct termDepositProduct = new TermDepositProduct();

                        // Read values.
                        termDepositProduct.id = base.GetDataValue<int>(dr, "id");
                        termDepositProduct.installment_types_id = base.GetDataValue<int>(dr, "installment_types_id");
                        termDepositProduct.number_period = base.GetDataValue<int>(dr, "number_period");
                        termDepositProduct.number_period_min = base.GetDataValue<int>(dr, "number_period_min");
                        termDepositProduct.number_period_max = base.GetDataValue<int>(dr, "number_period_max");
                        termDepositProduct.interest_frequency = base.GetDataValue<short>(dr, "interest_frequency");
                        termDepositProduct.withdrawal_fees_type = base.GetDataValue<short>(dr, "withdrawal_fees_type");
                        termDepositProduct.withdrawal_fees_min = base.GetDataValue<double>(dr, "withdrawal_fees_min");
                        termDepositProduct.withdrawal_fees_max = base.GetDataValue<double>(dr, "withdrawal_fees_max");
                        termDepositProduct.withdrawal_fees = base.GetDataValue<double>(dr, "withdrawal_fees");

                        // Add to List.
                        result.Add(termDepositProduct);
                    }
                }
            }

            return result;
        }
    }
}

