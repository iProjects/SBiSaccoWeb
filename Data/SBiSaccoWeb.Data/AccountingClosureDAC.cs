//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// AccountingClosure data access component. Manages CRUD operations for the AccountingClosure table.
    /// </summary>
    public partial class AccountingClosureDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the AccountingClosure table.
        /// </summary>
        /// <param name="accountingClosure">A AccountingClosure object.</param>
        /// <returns>An updated AccountingClosure object.</returns>
        public AccountingClosure Create(AccountingClosure accountingClosure)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.AccountingClosure ([user_id], [date_of_closure], [count_of_transactions], [is_deleted]) " +
                "VALUES(@user_id, @date_of_closure, @count_of_transactions, @is_deleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@user_id", DbType.Int32, accountingClosure.user_id);
                db.AddInParameter(cmd, "@date_of_closure", DbType.DateTime, accountingClosure.date_of_closure);
                db.AddInParameter(cmd, "@count_of_transactions", DbType.Int32, accountingClosure.count_of_transactions);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, accountingClosure.is_deleted);

                // Get the primary key value.
                accountingClosure.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return accountingClosure;
        }

        /// <summary>
        /// Updates an existing row in the AccountingClosure table.
        /// </summary>
        /// <param name="accountingClosure">A AccountingClosure entity object.</param>
        public void UpdateById(AccountingClosure accountingClosure)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.AccountingClosure " +
                "SET " +
                    "[user_id]=@user_id, " +
                    "[date_of_closure]=@date_of_closure, " +
                    "[count_of_transactions]=@count_of_transactions, " +
                    "[is_deleted]=@is_deleted " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@user_id", DbType.Int32, accountingClosure.user_id);
                db.AddInParameter(cmd, "@date_of_closure", DbType.DateTime, accountingClosure.date_of_closure);
                db.AddInParameter(cmd, "@count_of_transactions", DbType.Int32, accountingClosure.count_of_transactions);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, accountingClosure.is_deleted);
                db.AddInParameter(cmd, "@id", DbType.Int32, accountingClosure.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the AccountingClosure table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.AccountingClosure " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the AccountingClosure table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A AccountingClosure object with data populated from the database.</returns>
        public AccountingClosure SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [user_id], [date_of_closure], [count_of_transactions], [is_deleted] " +
                "FROM dbo.AccountingClosure  " +
                "WHERE [id]=@id ";

            AccountingClosure accountingClosure = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new AccountingClosure
                        accountingClosure = new AccountingClosure();

                        // Read values.
                        accountingClosure.id = base.GetDataValue<int>(dr, "id");
                        accountingClosure.user_id = base.GetDataValue<int>(dr, "user_id");
                        accountingClosure.date_of_closure = base.GetDataValue<DateTime>(dr, "date_of_closure");
                        accountingClosure.count_of_transactions = base.GetDataValue<int>(dr, "count_of_transactions");
                        accountingClosure.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");
                    }
                }
            }

            return accountingClosure;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the AccountingClosure table.
        /// </summary>
        /// <returns>A collection of AccountingClosure objects.</returns>		
        public List<AccountingClosure> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [user_id], [date_of_closure], [count_of_transactions], [is_deleted] " +
                "FROM dbo.AccountingClosure ";

            List<AccountingClosure> result = new List<AccountingClosure>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new AccountingClosure
                        AccountingClosure accountingClosure = new AccountingClosure();

                        // Read values.
                        accountingClosure.id = base.GetDataValue<int>(dr, "id");
                        accountingClosure.user_id = base.GetDataValue<int>(dr, "user_id");
                        accountingClosure.date_of_closure = base.GetDataValue<DateTime>(dr, "date_of_closure");
                        accountingClosure.count_of_transactions = base.GetDataValue<int>(dr, "count_of_transactions");
                        accountingClosure.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");

                        // Add to List.
                        result.Add(accountingClosure);
                    }
                }
            }

            return result;
        }
    }
}

