//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// CollateralPropertyValues data access component. Manages CRUD operations for the CollateralPropertyValues table.
    /// </summary>
    public partial class CollateralPropertyValueDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the CollateralPropertyValues table.
        /// </summary>
        /// <param name="collateralPropertyValue">A CollateralPropertyValue object.</param>
        /// <returns>An updated CollateralPropertyValue object.</returns>
        public CollateralPropertyValue Create(CollateralPropertyValue collateralPropertyValue)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.CollateralPropertyValues ([contract_collateral_id], [property_id], [value]) " +
                "VALUES(@contract_collateral_id, @property_id, @value); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_collateral_id", DbType.Int32, collateralPropertyValue.contract_collateral_id);
                db.AddInParameter(cmd, "@property_id", DbType.Int32, collateralPropertyValue.property_id);
                db.AddInParameter(cmd, "@value", DbType.String, collateralPropertyValue.value);

                // Get the primary key value.
                collateralPropertyValue.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return collateralPropertyValue;
        }

        /// <summary>
        /// Updates an existing row in the CollateralPropertyValues table.
        /// </summary>
        /// <param name="collateralPropertyValue">A CollateralPropertyValue entity object.</param>
        public void UpdateById(CollateralPropertyValue collateralPropertyValue)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.CollateralPropertyValues " +
                "SET " +
                    "[contract_collateral_id]=@contract_collateral_id, " +
                    "[property_id]=@property_id, " +
                    "[value]=@value " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_collateral_id", DbType.Int32, collateralPropertyValue.contract_collateral_id);
                db.AddInParameter(cmd, "@property_id", DbType.Int32, collateralPropertyValue.property_id);
                db.AddInParameter(cmd, "@value", DbType.String, collateralPropertyValue.value);
                db.AddInParameter(cmd, "@id", DbType.Int32, collateralPropertyValue.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the CollateralPropertyValues table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.CollateralPropertyValues " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the CollateralPropertyValues table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A CollateralPropertyValue object with data populated from the database.</returns>
        public CollateralPropertyValue SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [contract_collateral_id], [property_id], [value] " +
                "FROM dbo.CollateralPropertyValues  " +
                "WHERE [id]=@id ";

            CollateralPropertyValue collateralPropertyValue = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new CollateralPropertyValue
                        collateralPropertyValue = new CollateralPropertyValue();

                        // Read values.
                        collateralPropertyValue.id = base.GetDataValue<int>(dr, "id");
                        collateralPropertyValue.contract_collateral_id = base.GetDataValue<int>(dr, "contract_collateral_id");
                        collateralPropertyValue.property_id = base.GetDataValue<int>(dr, "property_id");
                        collateralPropertyValue.value = base.GetDataValue<string>(dr, "value");
                    }
                }
            }

            return collateralPropertyValue;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the CollateralPropertyValues table.
        /// </summary>
        /// <returns>A collection of CollateralPropertyValue objects.</returns>		
        public List<CollateralPropertyValue> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [contract_collateral_id], [property_id], [value] " +
                "FROM dbo.CollateralPropertyValues ";

            List<CollateralPropertyValue> result = new List<CollateralPropertyValue>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new CollateralPropertyValue
                        CollateralPropertyValue collateralPropertyValue = new CollateralPropertyValue();

                        // Read values.
                        collateralPropertyValue.id = base.GetDataValue<int>(dr, "id");
                        collateralPropertyValue.contract_collateral_id = base.GetDataValue<int>(dr, "contract_collateral_id");
                        collateralPropertyValue.property_id = base.GetDataValue<int>(dr, "property_id");
                        collateralPropertyValue.value = base.GetDataValue<string>(dr, "value");

                        // Add to List.
                        result.Add(collateralPropertyValue);
                    }
                }
            }

            return result;
        }
    }
}

