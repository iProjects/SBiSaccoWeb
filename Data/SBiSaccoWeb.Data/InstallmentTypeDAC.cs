//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// InstallmentTypes data access component. Manages CRUD operations for the InstallmentTypes table.
    /// </summary>
    public partial class InstallmentTypeDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the InstallmentTypes table.
        /// </summary>
        /// <param name="installmentType">A InstallmentType object.</param>
        /// <returns>An updated InstallmentType object.</returns>
        public InstallmentType Create(InstallmentType installmentType)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.InstallmentTypes ([name], [nb_of_days], [nb_of_months]) " +
                "VALUES(@name, @nb_of_days, @nb_of_months); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, installmentType.name);
                db.AddInParameter(cmd, "@nb_of_days", DbType.Int32, installmentType.nb_of_days);
                db.AddInParameter(cmd, "@nb_of_months", DbType.Int32, installmentType.nb_of_months);

                // Get the primary key value.
                installmentType.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return installmentType;
        }

        /// <summary>
        /// Updates an existing row in the InstallmentTypes table.
        /// </summary>
        /// <param name="installmentType">A InstallmentType entity object.</param>
        public void UpdateById(InstallmentType installmentType)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.InstallmentTypes " +
                "SET " +
                    "[name]=@name, " +
                    "[nb_of_days]=@nb_of_days, " +
                    "[nb_of_months]=@nb_of_months " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, installmentType.name);
                db.AddInParameter(cmd, "@nb_of_days", DbType.Int32, installmentType.nb_of_days);
                db.AddInParameter(cmd, "@nb_of_months", DbType.Int32, installmentType.nb_of_months);
                db.AddInParameter(cmd, "@id", DbType.Int32, installmentType.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the InstallmentTypes table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.InstallmentTypes " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the InstallmentTypes table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A InstallmentType object with data populated from the database.</returns>
        public InstallmentType SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [name], [nb_of_days], [nb_of_months] " +
                "FROM dbo.InstallmentTypes  " +
                "WHERE [id]=@id ";

            InstallmentType installmentType = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new InstallmentType
                        installmentType = new InstallmentType();

                        // Read values.
                        installmentType.id = base.GetDataValue<int>(dr, "id");
                        installmentType.name = base.GetDataValue<string>(dr, "name");
                        installmentType.nb_of_days = base.GetDataValue<int>(dr, "nb_of_days");
                        installmentType.nb_of_months = base.GetDataValue<int>(dr, "nb_of_months");
                    }
                }
            }

            return installmentType;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the InstallmentTypes table.
        /// </summary>
        /// <returns>A collection of InstallmentType objects.</returns>		
        public List<InstallmentType> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [name], [nb_of_days], [nb_of_months] " +
                "FROM dbo.InstallmentTypes ";

            List<InstallmentType> result = new List<InstallmentType>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new InstallmentType
                        InstallmentType installmentType = new InstallmentType();

                        // Read values.
                        installmentType.id = base.GetDataValue<int>(dr, "id");
                        installmentType.name = base.GetDataValue<string>(dr, "name");
                        installmentType.nb_of_days = base.GetDataValue<int>(dr, "nb_of_days");
                        installmentType.nb_of_months = base.GetDataValue<int>(dr, "nb_of_months");

                        // Add to List.
                        result.Add(installmentType);
                    }
                }
            }

            return result;
        }
    }
}

