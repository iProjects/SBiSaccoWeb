//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ExoticInstallments data access component. Manages CRUD operations for the ExoticInstallments table.
    /// </summary>
    public partial class ExoticInstallmentDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ExoticInstallments table.
        /// </summary>
        /// <param name="exoticInstallment">A ExoticInstallment object.</param>
        /// <returns>An updated ExoticInstallment object.</returns>
        public ExoticInstallment Create(ExoticInstallment exoticInstallment)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ExoticInstallments ([number], [exotic_id], [principal_coeff], [interest_coeff]) " +
                "VALUES(@number, @exotic_id, @principal_coeff, @interest_coeff);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@number", DbType.Int32, exoticInstallment.number);
                db.AddInParameter(cmd, "@exotic_id", DbType.Int32, exoticInstallment.exotic_id);
                db.AddInParameter(cmd, "@principal_coeff", DbType.Decimal, exoticInstallment.principal_coeff);
                db.AddInParameter(cmd, "@interest_coeff", DbType.Decimal, exoticInstallment.interest_coeff);

                db.ExecuteNonQuery(cmd);
            }

            return exoticInstallment;
        }

        /// <summary>
        /// Updates an existing row in the ExoticInstallments table.
        /// </summary>
        /// <param name="exoticInstallment">A ExoticInstallment entity object.</param>
        public void UpdateById(ExoticInstallment exoticInstallment)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ExoticInstallments " +
                "SET " +
                    "[principal_coeff]=@principal_coeff, " +
                    "[interest_coeff]=@interest_coeff " +
                "WHERE [number]=@number " +
                      "AND [exotic_id]=@exotic_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@principal_coeff", DbType.Decimal, exoticInstallment.principal_coeff);
                db.AddInParameter(cmd, "@interest_coeff", DbType.Decimal, exoticInstallment.interest_coeff);
                db.AddInParameter(cmd, "@number", DbType.Int32, exoticInstallment.number);
                db.AddInParameter(cmd, "@exotic_id", DbType.Int32, exoticInstallment.exotic_id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ExoticInstallments table.
        /// </summary>
        /// <param name="number">A number value.</param>
        public void DeleteById(int number)
        {
            const string SQL_STATEMENT = "DELETE dbo.ExoticInstallments " +
                                         "WHERE [number]=@number ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@number", DbType.Int32, number);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ExoticInstallments table.
        /// </summary>
        /// <param name="number">A number value.</param>
        /// <param name="exotic_id">A exotic_id value.</param>
        /// <returns>A ExoticInstallment object with data populated from the database.</returns>
        public ExoticInstallment SelectById(int number, int exotic_id)
        {
            const string SQL_STATEMENT =
                "SELECT [number], [exotic_id], [principal_coeff], [interest_coeff] " +
                "FROM dbo.ExoticInstallments  " +
                "WHERE [number]=@number " +
                      "AND [exotic_id]=@exotic_id ";

            ExoticInstallment exoticInstallment = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@number", DbType.Int32, number);
                db.AddInParameter(cmd, "@exotic_id", DbType.Int32, exotic_id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ExoticInstallment
                        exoticInstallment = new ExoticInstallment();

                        // Read values.
                        exoticInstallment.number = base.GetDataValue<int>(dr, "number");
                        exoticInstallment.exotic_id = base.GetDataValue<int>(dr, "exotic_id");
                        exoticInstallment.principal_coeff = base.GetDataValue<decimal>(dr, "principal_coeff");
                        exoticInstallment.interest_coeff = base.GetDataValue<decimal>(dr, "interest_coeff");
                    }
                }
            }

            return exoticInstallment;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ExoticInstallments table.
        /// </summary>
        /// <returns>A collection of ExoticInstallment objects.</returns>		
        public List<ExoticInstallment> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [number], [exotic_id], [principal_coeff], [interest_coeff] " +
                "FROM dbo.ExoticInstallments ";

            List<ExoticInstallment> result = new List<ExoticInstallment>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ExoticInstallment
                        ExoticInstallment exoticInstallment = new ExoticInstallment();

                        // Read values.
                        exoticInstallment.number = base.GetDataValue<int>(dr, "number");
                        exoticInstallment.exotic_id = base.GetDataValue<int>(dr, "exotic_id");
                        exoticInstallment.principal_coeff = base.GetDataValue<decimal>(dr, "principal_coeff");
                        exoticInstallment.interest_coeff = base.GetDataValue<decimal>(dr, "interest_coeff");

                        // Add to List.
                        result.Add(exoticInstallment);
                    }
                }
            }

            return result;
        }
    }
}

