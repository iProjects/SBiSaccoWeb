//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ContractAccountingRules data access component. Manages CRUD operations for the ContractAccountingRules table.
    /// </summary>
    public partial class ContractAccountingRuleDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ContractAccountingRules table.
        /// </summary>
        /// <param name="contractAccountingRule">A ContractAccountingRule object.</param>
        /// <returns>An updated ContractAccountingRule object.</returns>
        public ContractAccountingRule Create(ContractAccountingRule contractAccountingRule)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ContractAccountingRules ([id], [product_type], [loan_product_id], [savings_product_id], [client_type], [activity_id], [currency_id]) " +
                "VALUES(@id, @product_type, @loan_product_id, @savings_product_id, @client_type, @activity_id, @currency_id);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, contractAccountingRule.id);
                db.AddInParameter(cmd, "@product_type", DbType.Int16, contractAccountingRule.product_type);
                db.AddInParameter(cmd, "@loan_product_id", DbType.Int32, contractAccountingRule.loan_product_id);
                db.AddInParameter(cmd, "@savings_product_id", DbType.Int32, contractAccountingRule.savings_product_id);
                db.AddInParameter(cmd, "@client_type", DbType.AnsiStringFixedLength, contractAccountingRule.client_type);
                db.AddInParameter(cmd, "@activity_id", DbType.Int32, contractAccountingRule.activity_id);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, contractAccountingRule.currency_id);

                db.ExecuteNonQuery(cmd);
            }

            return contractAccountingRule;
        }

        /// <summary>
        /// Updates an existing row in the ContractAccountingRules table.
        /// </summary>
        /// <param name="contractAccountingRule">A ContractAccountingRule entity object.</param>
        public void UpdateById(ContractAccountingRule contractAccountingRule)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ContractAccountingRules " +
                "SET " +
                    "[product_type]=@product_type, " +
                    "[loan_product_id]=@loan_product_id, " +
                    "[savings_product_id]=@savings_product_id, " +
                    "[client_type]=@client_type, " +
                    "[activity_id]=@activity_id, " +
                    "[currency_id]=@currency_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@product_type", DbType.Int16, contractAccountingRule.product_type);
                db.AddInParameter(cmd, "@loan_product_id", DbType.Int32, contractAccountingRule.loan_product_id);
                db.AddInParameter(cmd, "@savings_product_id", DbType.Int32, contractAccountingRule.savings_product_id);
                db.AddInParameter(cmd, "@client_type", DbType.AnsiStringFixedLength, contractAccountingRule.client_type);
                db.AddInParameter(cmd, "@activity_id", DbType.Int32, contractAccountingRule.activity_id);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, contractAccountingRule.currency_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, contractAccountingRule.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ContractAccountingRules table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ContractAccountingRules " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ContractAccountingRules table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A ContractAccountingRule object with data populated from the database.</returns>
        public ContractAccountingRule SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [product_type], [loan_product_id], [savings_product_id], [client_type], [activity_id]" +
                        ", [currency_id] " +
                "FROM dbo.ContractAccountingRules  " +
                "WHERE [id]=@id ";

            ContractAccountingRule contractAccountingRule = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ContractAccountingRule
                        contractAccountingRule = new ContractAccountingRule();

                        // Read values.
                        contractAccountingRule.id = base.GetDataValue<int>(dr, "id");
                        contractAccountingRule.product_type = base.GetDataValue<short>(dr, "product_type");
                        contractAccountingRule.loan_product_id = base.GetDataValue<int>(dr, "loan_product_id");
                        contractAccountingRule.savings_product_id = base.GetDataValue<int>(dr, "savings_product_id");
                        contractAccountingRule.client_type = Convert.ToChar(base.GetDataValue<string>(dr, "client_type"));
                        contractAccountingRule.activity_id = base.GetDataValue<int>(dr, "activity_id");
                        contractAccountingRule.currency_id = base.GetDataValue<int>(dr, "currency_id");
                    }
                }
            }

            return contractAccountingRule;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ContractAccountingRules table.
        /// </summary>
        /// <returns>A collection of ContractAccountingRule objects.</returns>		
        public List<ContractAccountingRule> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [product_type], [loan_product_id], [savings_product_id], [client_type], [activity_id]" +
                        ", [currency_id] " +
                "FROM dbo.ContractAccountingRules ";

            List<ContractAccountingRule> result = new List<ContractAccountingRule>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ContractAccountingRule
                        ContractAccountingRule contractAccountingRule = new ContractAccountingRule();

                        // Read values.
                        contractAccountingRule.id = base.GetDataValue<int>(dr, "id");
                        contractAccountingRule.product_type = base.GetDataValue<short>(dr, "product_type");
                        contractAccountingRule.loan_product_id = base.GetDataValue<int>(dr, "loan_product_id");
                        contractAccountingRule.savings_product_id = base.GetDataValue<int>(dr, "savings_product_id");
                        contractAccountingRule.client_type = Convert.ToChar(base.GetDataValue<string>(dr, "client_type"));
                        contractAccountingRule.activity_id = base.GetDataValue<int>(dr, "activity_id");
                        contractAccountingRule.currency_id = base.GetDataValue<int>(dr, "currency_id");

                        // Add to List.
                        result.Add(contractAccountingRule);
                    }
                }
            }

            return result;
        }
    }
}

