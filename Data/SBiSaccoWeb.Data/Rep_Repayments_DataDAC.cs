//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Rep_Repayments_Data data access component. Manages CRUD operations for the Rep_Repayments_Data table.
    /// </summary>
    public partial class Rep_Repayments_DataDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Rep_Repayments_Data table.
        /// </summary>
        /// <param name="rep_Repayments_Data">A Rep_Repayments_Data object.</param>
        /// <returns>An updated Rep_Repayments_Data object.</returns>
        public Rep_Repayments_Data Create(Rep_Repayments_Data rep_Repayments_Data)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Rep_Repayments_Data ([id], [branch_name], [load_date], [event_id], [contract_code], [client_name], [district_name], [loan_officer_name], [loan_product_name], [early_fee], [late_fee], [principal], [interest], [total], [written_off]) " +
                "VALUES(@id, @branch_name, @load_date, @event_id, @contract_code, @client_name, @district_name, @loan_officer_name, @loan_product_name, @early_fee, @late_fee, @principal, @interest, @total, @written_off);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, rep_Repayments_Data.id);
                db.AddInParameter(cmd, "@branch_name", DbType.String, rep_Repayments_Data.branch_name);
                db.AddInParameter(cmd, "@load_date", DbType.DateTime, rep_Repayments_Data.load_date);
                db.AddInParameter(cmd, "@event_id", DbType.Int32, rep_Repayments_Data.event_id);
                db.AddInParameter(cmd, "@contract_code", DbType.String, rep_Repayments_Data.contract_code);
                db.AddInParameter(cmd, "@client_name", DbType.String, rep_Repayments_Data.client_name);
                db.AddInParameter(cmd, "@district_name", DbType.String, rep_Repayments_Data.district_name);
                db.AddInParameter(cmd, "@loan_officer_name", DbType.String, rep_Repayments_Data.loan_officer_name);
                db.AddInParameter(cmd, "@loan_product_name", DbType.String, rep_Repayments_Data.loan_product_name);
                db.AddInParameter(cmd, "@early_fee", DbType.Currency, rep_Repayments_Data.early_fee);
                db.AddInParameter(cmd, "@late_fee", DbType.Currency, rep_Repayments_Data.late_fee);
                db.AddInParameter(cmd, "@principal", DbType.Currency, rep_Repayments_Data.principal);
                db.AddInParameter(cmd, "@interest", DbType.Currency, rep_Repayments_Data.interest);
                db.AddInParameter(cmd, "@total", DbType.Currency, rep_Repayments_Data.total);
                db.AddInParameter(cmd, "@written_off", DbType.Boolean, rep_Repayments_Data.written_off);

                db.ExecuteNonQuery(cmd);
            }

            return rep_Repayments_Data;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Rep_Repayments_Data table.
        /// </summary>
        /// <returns>A collection of Rep_Repayments_Data objects.</returns>		
        public List<Rep_Repayments_Data> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [branch_name], [load_date], [event_id], [contract_code], [client_name], [district_name]" +
                        ", [loan_officer_name], [loan_product_name], [early_fee], [late_fee], [principal], [interest]" +
                        ", [total], [written_off] " +
                "FROM dbo.Rep_Repayments_Data ";

            List<Rep_Repayments_Data> result = new List<Rep_Repayments_Data>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Rep_Repayments_Data
                        Rep_Repayments_Data rep_Repayments_Data = new Rep_Repayments_Data();

                        // Read values.
                        rep_Repayments_Data.id = base.GetDataValue<int>(dr, "id");
                        rep_Repayments_Data.branch_name = base.GetDataValue<string>(dr, "branch_name");
                        rep_Repayments_Data.load_date = base.GetDataValue<DateTime>(dr, "load_date");
                        rep_Repayments_Data.event_id = base.GetDataValue<int>(dr, "event_id");
                        rep_Repayments_Data.contract_code = base.GetDataValue<string>(dr, "contract_code");
                        rep_Repayments_Data.client_name = base.GetDataValue<string>(dr, "client_name");
                        rep_Repayments_Data.district_name = base.GetDataValue<string>(dr, "district_name");
                        rep_Repayments_Data.loan_officer_name = base.GetDataValue<string>(dr, "loan_officer_name");
                        rep_Repayments_Data.loan_product_name = base.GetDataValue<string>(dr, "loan_product_name");
                        rep_Repayments_Data.early_fee = base.GetDataValue<decimal>(dr, "early_fee");
                        rep_Repayments_Data.late_fee = base.GetDataValue<decimal>(dr, "late_fee");
                        rep_Repayments_Data.principal = base.GetDataValue<decimal>(dr, "principal");
                        rep_Repayments_Data.interest = base.GetDataValue<decimal>(dr, "interest");
                        rep_Repayments_Data.total = base.GetDataValue<decimal>(dr, "total");
                        rep_Repayments_Data.written_off = base.GetDataValue<bool>(dr, "written_off");

                        // Add to List.
                        result.Add(rep_Repayments_Data);
                    }
                }
            }

            return result;
        }
    }
}

