//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// SavingEvents data access component. Manages CRUD operations for the SavingEvents table.
    /// </summary>
    public partial class SavingEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the SavingEvents table.
        /// </summary>
        /// <param name="savingEvent">A SavingEvent object.</param>
        /// <returns>An updated SavingEvent object.</returns>
        public SavingEvent Create(SavingEvent savingEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SavingEvents ([user_id], [contract_id], [code], [amount], [description], [deleted], [creation_date], [cancelable], [is_fired], [related_contract_code], [fees], [is_exported], [savings_method], [pending], [pending_event_id], [teller_id], [loan_event_id], [cancel_date]) " +
                "VALUES(@user_id, @contract_id, @code, @amount, @description, @deleted, @creation_date, @cancelable, @is_fired, @related_contract_code, @fees, @is_exported, @savings_method, @pending, @pending_event_id, @teller_id, @loan_event_id, @cancel_date); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@user_id", DbType.Int32, savingEvent.user_id);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, savingEvent.contract_id);
                db.AddInParameter(cmd, "@code", DbType.AnsiStringFixedLength, savingEvent.code);
                db.AddInParameter(cmd, "@amount", DbType.Currency, savingEvent.amount);
                db.AddInParameter(cmd, "@description", DbType.String, savingEvent.description);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, savingEvent.deleted);
                db.AddInParameter(cmd, "@creation_date", DbType.DateTime, savingEvent.creation_date);
                db.AddInParameter(cmd, "@cancelable", DbType.Boolean, savingEvent.cancelable);
                db.AddInParameter(cmd, "@is_fired", DbType.Boolean, savingEvent.is_fired);
                db.AddInParameter(cmd, "@related_contract_code", DbType.String, savingEvent.related_contract_code);
                db.AddInParameter(cmd, "@fees", DbType.Currency, savingEvent.fees);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, savingEvent.is_exported);
                db.AddInParameter(cmd, "@savings_method", DbType.Int16, savingEvent.savings_method);
                db.AddInParameter(cmd, "@pending", DbType.Boolean, savingEvent.pending);
                db.AddInParameter(cmd, "@pending_event_id", DbType.Int32, savingEvent.pending_event_id);
                db.AddInParameter(cmd, "@teller_id", DbType.Int32, savingEvent.teller_id);
                db.AddInParameter(cmd, "@loan_event_id", DbType.Int32, savingEvent.loan_event_id);
                db.AddInParameter(cmd, "@cancel_date", DbType.DateTime, savingEvent.cancel_date);

                // Get the primary key value.
                savingEvent.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return savingEvent;
        }

        /// <summary>
        /// Updates an existing row in the SavingEvents table.
        /// </summary>
        /// <param name="savingEvent">A SavingEvent entity object.</param>
        public void UpdateById(SavingEvent savingEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SavingEvents " +
                "SET " +
                    "[user_id]=@user_id, " +
                    "[contract_id]=@contract_id, " +
                    "[code]=@code, " +
                    "[amount]=@amount, " +
                    "[description]=@description, " +
                    "[deleted]=@deleted, " +
                    "[creation_date]=@creation_date, " +
                    "[cancelable]=@cancelable, " +
                    "[is_fired]=@is_fired, " +
                    "[related_contract_code]=@related_contract_code, " +
                    "[fees]=@fees, " +
                    "[is_exported]=@is_exported, " +
                    "[savings_method]=@savings_method, " +
                    "[pending]=@pending, " +
                    "[pending_event_id]=@pending_event_id, " +
                    "[teller_id]=@teller_id, " +
                    "[loan_event_id]=@loan_event_id, " +
                    "[cancel_date]=@cancel_date " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@user_id", DbType.Int32, savingEvent.user_id);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, savingEvent.contract_id);
                db.AddInParameter(cmd, "@code", DbType.AnsiStringFixedLength, savingEvent.code);
                db.AddInParameter(cmd, "@amount", DbType.Currency, savingEvent.amount);
                db.AddInParameter(cmd, "@description", DbType.String, savingEvent.description);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, savingEvent.deleted);
                db.AddInParameter(cmd, "@creation_date", DbType.DateTime, savingEvent.creation_date);
                db.AddInParameter(cmd, "@cancelable", DbType.Boolean, savingEvent.cancelable);
                db.AddInParameter(cmd, "@is_fired", DbType.Boolean, savingEvent.is_fired);
                db.AddInParameter(cmd, "@related_contract_code", DbType.String, savingEvent.related_contract_code);
                db.AddInParameter(cmd, "@fees", DbType.Currency, savingEvent.fees);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, savingEvent.is_exported);
                db.AddInParameter(cmd, "@savings_method", DbType.Int16, savingEvent.savings_method);
                db.AddInParameter(cmd, "@pending", DbType.Boolean, savingEvent.pending);
                db.AddInParameter(cmd, "@pending_event_id", DbType.Int32, savingEvent.pending_event_id);
                db.AddInParameter(cmd, "@teller_id", DbType.Int32, savingEvent.teller_id);
                db.AddInParameter(cmd, "@loan_event_id", DbType.Int32, savingEvent.loan_event_id);
                db.AddInParameter(cmd, "@cancel_date", DbType.DateTime, savingEvent.cancel_date);
                db.AddInParameter(cmd, "@id", DbType.Int32, savingEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SavingEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SavingEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SavingEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A SavingEvent object with data populated from the database.</returns>
        public SavingEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [user_id], [contract_id], [code], [amount], [description], [deleted], [creation_date]" +
                        ", [cancelable], [is_fired], [related_contract_code], [fees], [is_exported], [savings_method]" +
                        ", [pending], [pending_event_id], [teller_id], [loan_event_id], [cancel_date] " +
                "FROM dbo.SavingEvents  " +
                "WHERE [id]=@id ";

            SavingEvent savingEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SavingEvent
                        savingEvent = new SavingEvent();

                        // Read values.
                        savingEvent.id = base.GetDataValue<int>(dr, "id");
                        savingEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                        savingEvent.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        savingEvent.code = base.GetDataValue<string>(dr, "code");
                        savingEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        savingEvent.description = base.GetDataValue<string>(dr, "description");
                        savingEvent.deleted = base.GetDataValue<bool>(dr, "deleted");
                        savingEvent.creation_date = base.GetDataValue<DateTime>(dr, "creation_date");
                        savingEvent.cancelable = base.GetDataValue<bool>(dr, "cancelable");
                        savingEvent.is_fired = base.GetDataValue<bool>(dr, "is_fired");
                        savingEvent.related_contract_code = base.GetDataValue<string>(dr, "related_contract_code");
                        savingEvent.fees = base.GetDataValue<decimal>(dr, "fees");
                        savingEvent.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        savingEvent.savings_method = base.GetDataValue<short>(dr, "savings_method");
                        savingEvent.pending = base.GetDataValue<bool>(dr, "pending");
                        savingEvent.pending_event_id = base.GetDataValue<int>(dr, "pending_event_id");
                        savingEvent.teller_id = base.GetDataValue<int>(dr, "teller_id");
                        savingEvent.loan_event_id = base.GetDataValue<int>(dr, "loan_event_id");
                        savingEvent.cancel_date = base.GetDataValue<DateTime>(dr, "cancel_date");
                    }
                }
            }

            return savingEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SavingEvents table.
        /// </summary>
        /// <returns>A collection of SavingEvent objects.</returns>		
        public List<SavingEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [user_id], [contract_id], [code], [amount], [description], [deleted], [creation_date]" +
                        ", [cancelable], [is_fired], [related_contract_code], [fees], [is_exported], [savings_method]" +
                        ", [pending], [pending_event_id], [teller_id], [loan_event_id], [cancel_date] " +
                "FROM dbo.SavingEvents ";

            List<SavingEvent> result = new List<SavingEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SavingEvent
                        SavingEvent savingEvent = new SavingEvent();

                        // Read values.
                        savingEvent.id = base.GetDataValue<int>(dr, "id");
                        savingEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                        savingEvent.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        savingEvent.code = base.GetDataValue<string>(dr, "code");
                        savingEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        savingEvent.description = base.GetDataValue<string>(dr, "description");
                        savingEvent.deleted = base.GetDataValue<bool>(dr, "deleted");
                        savingEvent.creation_date = base.GetDataValue<DateTime>(dr, "creation_date");
                        savingEvent.cancelable = base.GetDataValue<bool>(dr, "cancelable");
                        savingEvent.is_fired = base.GetDataValue<bool>(dr, "is_fired");
                        savingEvent.related_contract_code = base.GetDataValue<string>(dr, "related_contract_code");
                        savingEvent.fees = base.GetDataValue<decimal>(dr, "fees");
                        savingEvent.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        savingEvent.savings_method = base.GetDataValue<short>(dr, "savings_method");
                        savingEvent.pending = base.GetDataValue<bool>(dr, "pending");
                        savingEvent.pending_event_id = base.GetDataValue<int>(dr, "pending_event_id");
                        savingEvent.teller_id = base.GetDataValue<int>(dr, "teller_id");
                        savingEvent.loan_event_id = base.GetDataValue<int>(dr, "loan_event_id");
                        savingEvent.cancel_date = base.GetDataValue<DateTime>(dr, "cancel_date");

                        // Add to List.
                        result.Add(savingEvent);
                    }
                }
            }

            return result;
        }
    }
}

