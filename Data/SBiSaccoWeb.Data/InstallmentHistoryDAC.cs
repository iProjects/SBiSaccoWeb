//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// InstallmentHistory data access component. Manages CRUD operations for the InstallmentHistory table.
    /// </summary>
    public partial class InstallmentHistoryDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the InstallmentHistory table.
        /// </summary>
        /// <param name="installmentHistory">A InstallmentHistory object.</param>
        /// <returns>An updated InstallmentHistory object.</returns>
        public InstallmentHistory Create(InstallmentHistory installmentHistory)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.InstallmentHistory ([contract_id], [event_id], [number], [expected_date], [capital_repayment], [interest_repayment], [paid_interest], [paid_capital], [paid_fees], [fees_unpaid], [paid_date], [delete_date], [comment], [pending], [start_date], [olb]) " +
                "VALUES(@contract_id, @event_id, @number, @expected_date, @capital_repayment, @interest_repayment, @paid_interest, @paid_capital, @paid_fees, @fees_unpaid, @paid_date, @delete_date, @comment, @pending, @start_date, @olb); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, installmentHistory.contract_id);
                db.AddInParameter(cmd, "@event_id", DbType.Int32, installmentHistory.event_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, installmentHistory.number);
                db.AddInParameter(cmd, "@expected_date", DbType.DateTime, installmentHistory.expected_date);
                db.AddInParameter(cmd, "@capital_repayment", DbType.Currency, installmentHistory.capital_repayment);
                db.AddInParameter(cmd, "@interest_repayment", DbType.Currency, installmentHistory.interest_repayment);
                db.AddInParameter(cmd, "@paid_interest", DbType.Currency, installmentHistory.paid_interest);
                db.AddInParameter(cmd, "@paid_capital", DbType.Currency, installmentHistory.paid_capital);
                db.AddInParameter(cmd, "@paid_fees", DbType.Currency, installmentHistory.paid_fees);
                db.AddInParameter(cmd, "@fees_unpaid", DbType.Currency, installmentHistory.fees_unpaid);
                db.AddInParameter(cmd, "@paid_date", DbType.DateTime, installmentHistory.paid_date);
                db.AddInParameter(cmd, "@delete_date", DbType.DateTime, installmentHistory.delete_date);
                db.AddInParameter(cmd, "@comment", DbType.String, installmentHistory.comment);
                db.AddInParameter(cmd, "@pending", DbType.Boolean, installmentHistory.pending);
                db.AddInParameter(cmd, "@start_date", DbType.DateTime, installmentHistory.start_date);
                db.AddInParameter(cmd, "@olb", DbType.Currency, installmentHistory.olb);

                // Get the primary key value.
                installmentHistory.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return installmentHistory;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the InstallmentHistory table.
        /// </summary>
        /// <returns>A collection of InstallmentHistory objects.</returns>		
        public List<InstallmentHistory> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [contract_id], [event_id], [number], [expected_date], [capital_repayment]" +
                        ", [interest_repayment], [paid_interest], [paid_capital], [paid_fees], [fees_unpaid]" +
                        ", [paid_date], [delete_date], [comment], [pending], [start_date], [olb] " +
                "FROM dbo.InstallmentHistory ";

            List<InstallmentHistory> result = new List<InstallmentHistory>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new InstallmentHistory
                        InstallmentHistory installmentHistory = new InstallmentHistory();

                        // Read values.
                        installmentHistory.id = base.GetDataValue<int>(dr, "id");
                        installmentHistory.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        installmentHistory.event_id = base.GetDataValue<int>(dr, "event_id");
                        installmentHistory.number = base.GetDataValue<int>(dr, "number");
                        installmentHistory.expected_date = base.GetDataValue<DateTime>(dr, "expected_date");
                        installmentHistory.capital_repayment = base.GetDataValue<decimal>(dr, "capital_repayment");
                        installmentHistory.interest_repayment = base.GetDataValue<decimal>(dr, "interest_repayment");
                        installmentHistory.paid_interest = base.GetDataValue<decimal>(dr, "paid_interest");
                        installmentHistory.paid_capital = base.GetDataValue<decimal>(dr, "paid_capital");
                        installmentHistory.paid_fees = base.GetDataValue<decimal>(dr, "paid_fees");
                        installmentHistory.fees_unpaid = base.GetDataValue<decimal>(dr, "fees_unpaid");
                        installmentHistory.paid_date = base.GetDataValue<DateTime>(dr, "paid_date");
                        installmentHistory.delete_date = base.GetDataValue<DateTime>(dr, "delete_date");
                        installmentHistory.comment = base.GetDataValue<string>(dr, "comment");
                        installmentHistory.pending = base.GetDataValue<bool>(dr, "pending");
                        installmentHistory.start_date = base.GetDataValue<DateTime>(dr, "start_date");
                        installmentHistory.olb = base.GetDataValue<decimal>(dr, "olb");

                        // Add to List.
                        result.Add(installmentHistory);
                    }
                }
            }

            return result;
        }
    }
}

