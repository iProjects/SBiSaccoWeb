//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ManualAccountingMovements data access component. Manages CRUD operations for the ManualAccountingMovements table.
    /// </summary>
    public partial class ManualAccountingMovementDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ManualAccountingMovements table.
        /// </summary>
        /// <param name="manualAccountingMovement">A ManualAccountingMovement object.</param>
        /// <returns>An updated ManualAccountingMovement object.</returns>
        public ManualAccountingMovement Create(ManualAccountingMovement manualAccountingMovement)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ManualAccountingMovements ([debit_account_number_id], [credit_account_number_id], [amount], [transaction_date], [export_date], [is_exported], [currency_id], [exchange_rate], [description], [user_id], [event_id], [branch_id], [closure_id], [fiscal_year_id]) " +
                "VALUES(@debit_account_number_id, @credit_account_number_id, @amount, @transaction_date, @export_date, @is_exported, @currency_id, @exchange_rate, @description, @user_id, @event_id, @branch_id, @closure_id, @fiscal_year_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@debit_account_number_id", DbType.Int32, manualAccountingMovement.debit_account_number_id);
                db.AddInParameter(cmd, "@credit_account_number_id", DbType.Int32, manualAccountingMovement.credit_account_number_id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, manualAccountingMovement.amount);
                db.AddInParameter(cmd, "@transaction_date", DbType.DateTime, manualAccountingMovement.transaction_date);
                db.AddInParameter(cmd, "@export_date", DbType.DateTime, manualAccountingMovement.export_date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, manualAccountingMovement.is_exported);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, manualAccountingMovement.currency_id);
                db.AddInParameter(cmd, "@exchange_rate", DbType.Double, manualAccountingMovement.exchange_rate);
                db.AddInParameter(cmd, "@description", DbType.String, manualAccountingMovement.description);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, manualAccountingMovement.user_id);
                db.AddInParameter(cmd, "@event_id", DbType.Int32, manualAccountingMovement.event_id);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, manualAccountingMovement.branch_id);
                db.AddInParameter(cmd, "@closure_id", DbType.Int32, manualAccountingMovement.closure_id);
                db.AddInParameter(cmd, "@fiscal_year_id", DbType.Int32, manualAccountingMovement.fiscal_year_id);

                // Get the primary key value.
                manualAccountingMovement.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return manualAccountingMovement;
        }

        /// <summary>
        /// Updates an existing row in the ManualAccountingMovements table.
        /// </summary>
        /// <param name="manualAccountingMovement">A ManualAccountingMovement entity object.</param>
        public void UpdateById(ManualAccountingMovement manualAccountingMovement)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ManualAccountingMovements " +
                "SET " +
                    "[debit_account_number_id]=@debit_account_number_id, " +
                    "[credit_account_number_id]=@credit_account_number_id, " +
                    "[amount]=@amount, " +
                    "[transaction_date]=@transaction_date, " +
                    "[export_date]=@export_date, " +
                    "[is_exported]=@is_exported, " +
                    "[currency_id]=@currency_id, " +
                    "[exchange_rate]=@exchange_rate, " +
                    "[description]=@description, " +
                    "[user_id]=@user_id, " +
                    "[event_id]=@event_id, " +
                    "[branch_id]=@branch_id, " +
                    "[closure_id]=@closure_id, " +
                    "[fiscal_year_id]=@fiscal_year_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@debit_account_number_id", DbType.Int32, manualAccountingMovement.debit_account_number_id);
                db.AddInParameter(cmd, "@credit_account_number_id", DbType.Int32, manualAccountingMovement.credit_account_number_id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, manualAccountingMovement.amount);
                db.AddInParameter(cmd, "@transaction_date", DbType.DateTime, manualAccountingMovement.transaction_date);
                db.AddInParameter(cmd, "@export_date", DbType.DateTime, manualAccountingMovement.export_date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, manualAccountingMovement.is_exported);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, manualAccountingMovement.currency_id);
                db.AddInParameter(cmd, "@exchange_rate", DbType.Double, manualAccountingMovement.exchange_rate);
                db.AddInParameter(cmd, "@description", DbType.String, manualAccountingMovement.description);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, manualAccountingMovement.user_id);
                db.AddInParameter(cmd, "@event_id", DbType.Int32, manualAccountingMovement.event_id);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, manualAccountingMovement.branch_id);
                db.AddInParameter(cmd, "@closure_id", DbType.Int32, manualAccountingMovement.closure_id);
                db.AddInParameter(cmd, "@fiscal_year_id", DbType.Int32, manualAccountingMovement.fiscal_year_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, manualAccountingMovement.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ManualAccountingMovements table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ManualAccountingMovements " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ManualAccountingMovements table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A ManualAccountingMovement object with data populated from the database.</returns>
        public ManualAccountingMovement SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [debit_account_number_id], [credit_account_number_id], [amount], [transaction_date]" +
                        ", [export_date], [is_exported], [currency_id], [exchange_rate], [description], [user_id]" +
                        ", [event_id], [branch_id], [closure_id], [fiscal_year_id] " +
                "FROM dbo.ManualAccountingMovements  " +
                "WHERE [id]=@id ";

            ManualAccountingMovement manualAccountingMovement = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ManualAccountingMovement
                        manualAccountingMovement = new ManualAccountingMovement();

                        // Read values.
                        manualAccountingMovement.id = base.GetDataValue<int>(dr, "id");
                        manualAccountingMovement.debit_account_number_id = base.GetDataValue<int>(dr, "debit_account_number_id");
                        manualAccountingMovement.credit_account_number_id = base.GetDataValue<int>(dr, "credit_account_number_id");
                        manualAccountingMovement.amount = base.GetDataValue<decimal>(dr, "amount");
                        manualAccountingMovement.transaction_date = base.GetDataValue<DateTime>(dr, "transaction_date");
                        manualAccountingMovement.export_date = base.GetDataValue<DateTime>(dr, "export_date");
                        manualAccountingMovement.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        manualAccountingMovement.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        manualAccountingMovement.exchange_rate = base.GetDataValue<double>(dr, "exchange_rate");
                        manualAccountingMovement.description = base.GetDataValue<string>(dr, "description");
                        manualAccountingMovement.user_id = base.GetDataValue<int>(dr, "user_id");
                        manualAccountingMovement.event_id = base.GetDataValue<int>(dr, "event_id");
                        manualAccountingMovement.branch_id = base.GetDataValue<int>(dr, "branch_id");
                        manualAccountingMovement.closure_id = base.GetDataValue<int>(dr, "closure_id");
                        manualAccountingMovement.fiscal_year_id = base.GetDataValue<int>(dr, "fiscal_year_id");
                    }
                }
            }

            return manualAccountingMovement;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ManualAccountingMovements table.
        /// </summary>
        /// <returns>A collection of ManualAccountingMovement objects.</returns>		
        public List<ManualAccountingMovement> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [debit_account_number_id], [credit_account_number_id], [amount], [transaction_date]" +
                        ", [export_date], [is_exported], [currency_id], [exchange_rate], [description], [user_id]" +
                        ", [event_id], [branch_id], [closure_id], [fiscal_year_id] " +
                "FROM dbo.ManualAccountingMovements ";

            List<ManualAccountingMovement> result = new List<ManualAccountingMovement>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ManualAccountingMovement
                        ManualAccountingMovement manualAccountingMovement = new ManualAccountingMovement();

                        // Read values.
                        manualAccountingMovement.id = base.GetDataValue<int>(dr, "id");
                        manualAccountingMovement.debit_account_number_id = base.GetDataValue<int>(dr, "debit_account_number_id");
                        manualAccountingMovement.credit_account_number_id = base.GetDataValue<int>(dr, "credit_account_number_id");
                        manualAccountingMovement.amount = base.GetDataValue<decimal>(dr, "amount");
                        manualAccountingMovement.transaction_date = base.GetDataValue<DateTime>(dr, "transaction_date");
                        manualAccountingMovement.export_date = base.GetDataValue<DateTime>(dr, "export_date");
                        manualAccountingMovement.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        manualAccountingMovement.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        manualAccountingMovement.exchange_rate = base.GetDataValue<double>(dr, "exchange_rate");
                        manualAccountingMovement.description = base.GetDataValue<string>(dr, "description");
                        manualAccountingMovement.user_id = base.GetDataValue<int>(dr, "user_id");
                        manualAccountingMovement.event_id = base.GetDataValue<int>(dr, "event_id");
                        manualAccountingMovement.branch_id = base.GetDataValue<int>(dr, "branch_id");
                        manualAccountingMovement.closure_id = base.GetDataValue<int>(dr, "closure_id");
                        manualAccountingMovement.fiscal_year_id = base.GetDataValue<int>(dr, "fiscal_year_id");

                        // Add to List.
                        result.Add(manualAccountingMovement);
                    }
                }
            }

            return result;
        }
    }
}

