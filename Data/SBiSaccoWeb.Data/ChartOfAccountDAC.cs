//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ChartOfAccounts data access component. Manages CRUD operations for the ChartOfAccounts table.
    /// </summary>
    public partial class ChartOfAccountDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ChartOfAccounts table.
        /// </summary>
        /// <param name="chartOfAccount">A ChartOfAccount object.</param>
        /// <returns>An updated ChartOfAccount object.</returns>
        public ChartOfAccount Create(ChartOfAccount chartOfAccount)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ChartOfAccounts ([account_number], [label], [debit_plus], [type_code], [account_category_id], [type], [parent_account_id], [lft], [rgt]) " +
                "VALUES(@account_number, @label, @debit_plus, @type_code, @account_category_id, @type, @parent_account_id, @lft, @rgt); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@account_number", DbType.String, chartOfAccount.account_number);
                db.AddInParameter(cmd, "@label", DbType.String, chartOfAccount.label);
                db.AddInParameter(cmd, "@debit_plus", DbType.Boolean, chartOfAccount.debit_plus);
                db.AddInParameter(cmd, "@type_code", DbType.AnsiString, chartOfAccount.type_code);
                db.AddInParameter(cmd, "@account_category_id", DbType.Int16, chartOfAccount.account_category_id);
                db.AddInParameter(cmd, "@type", DbType.Boolean, chartOfAccount.type);
                db.AddInParameter(cmd, "@parent_account_id", DbType.Int32, chartOfAccount.parent_account_id);
                db.AddInParameter(cmd, "@lft", DbType.Int32, chartOfAccount.lft);
                db.AddInParameter(cmd, "@rgt", DbType.Int32, chartOfAccount.rgt);

                // Get the primary key value.
                chartOfAccount.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return chartOfAccount;
        }

        /// <summary>
        /// Updates an existing row in the ChartOfAccounts table.
        /// </summary>
        /// <param name="chartOfAccount">A ChartOfAccount entity object.</param>
        public void UpdateById(ChartOfAccount chartOfAccount)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ChartOfAccounts " +
                "SET " +
                    "[account_number]=@account_number, " +
                    "[label]=@label, " +
                    "[debit_plus]=@debit_plus, " +
                    "[type_code]=@type_code, " +
                    "[account_category_id]=@account_category_id, " +
                    "[type]=@type, " +
                    "[parent_account_id]=@parent_account_id, " +
                    "[lft]=@lft, " +
                    "[rgt]=@rgt " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@account_number", DbType.String, chartOfAccount.account_number);
                db.AddInParameter(cmd, "@label", DbType.String, chartOfAccount.label);
                db.AddInParameter(cmd, "@debit_plus", DbType.Boolean, chartOfAccount.debit_plus);
                db.AddInParameter(cmd, "@type_code", DbType.AnsiString, chartOfAccount.type_code);
                db.AddInParameter(cmd, "@account_category_id", DbType.Int16, chartOfAccount.account_category_id);
                db.AddInParameter(cmd, "@type", DbType.Boolean, chartOfAccount.type);
                db.AddInParameter(cmd, "@parent_account_id", DbType.Int32, chartOfAccount.parent_account_id);
                db.AddInParameter(cmd, "@lft", DbType.Int32, chartOfAccount.lft);
                db.AddInParameter(cmd, "@rgt", DbType.Int32, chartOfAccount.rgt);
                db.AddInParameter(cmd, "@id", DbType.Int32, chartOfAccount.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ChartOfAccounts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ChartOfAccounts " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ChartOfAccounts table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A ChartOfAccount object with data populated from the database.</returns>
        public ChartOfAccount SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [account_number], [label], [debit_plus], [type_code], [account_category_id]" +
                        ", [type], [parent_account_id], [lft], [rgt] " +
                "FROM dbo.ChartOfAccounts  " +
                "WHERE [id]=@id ";

            ChartOfAccount chartOfAccount = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ChartOfAccount
                        chartOfAccount = new ChartOfAccount();

                        // Read values.
                        chartOfAccount.id = base.GetDataValue<int>(dr, "id");
                        chartOfAccount.account_number = base.GetDataValue<string>(dr, "account_number");
                        chartOfAccount.label = base.GetDataValue<string>(dr, "label");
                        chartOfAccount.debit_plus = base.GetDataValue<bool>(dr, "debit_plus");
                        chartOfAccount.type_code = base.GetDataValue<string>(dr, "type_code");
                        chartOfAccount.account_category_id = base.GetDataValue<short>(dr, "account_category_id");
                        chartOfAccount.type = base.GetDataValue<bool>(dr, "type");
                        chartOfAccount.parent_account_id = base.GetDataValue<int>(dr, "parent_account_id");
                        chartOfAccount.lft = base.GetDataValue<int>(dr, "lft");
                        chartOfAccount.rgt = base.GetDataValue<int>(dr, "rgt");
                    }
                }
            }

            return chartOfAccount;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ChartOfAccounts table.
        /// </summary>
        /// <returns>A collection of ChartOfAccount objects.</returns>		
        public List<ChartOfAccount> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [account_number], [label], [debit_plus], [type_code], [account_category_id]" +
                        ", [type], [parent_account_id], [lft], [rgt] " +
                "FROM dbo.ChartOfAccounts ";

            List<ChartOfAccount> result = new List<ChartOfAccount>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ChartOfAccount
                        ChartOfAccount chartOfAccount = new ChartOfAccount();

                        // Read values.
                        chartOfAccount.id = base.GetDataValue<int>(dr, "id");
                        chartOfAccount.account_number = base.GetDataValue<string>(dr, "account_number");
                        chartOfAccount.label = base.GetDataValue<string>(dr, "label");
                        chartOfAccount.debit_plus = base.GetDataValue<bool>(dr, "debit_plus");
                        chartOfAccount.type_code = base.GetDataValue<string>(dr, "type_code");
                        chartOfAccount.account_category_id = base.GetDataValue<short>(dr, "account_category_id");
                        chartOfAccount.type = base.GetDataValue<bool>(dr, "type");
                        chartOfAccount.parent_account_id = base.GetDataValue<int>(dr, "parent_account_id");
                        chartOfAccount.lft = base.GetDataValue<int>(dr, "lft");
                        chartOfAccount.rgt = base.GetDataValue<int>(dr, "rgt");

                        // Add to List.
                        result.Add(chartOfAccount);
                    }
                }
            }

            return result;
        }
    }
}

