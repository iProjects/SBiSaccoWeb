//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Installments data access component. Manages CRUD operations for the Installments table.
    /// </summary>
    public partial class InstallmentDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Installments table.
        /// </summary>
        /// <param name="installment">A Installment object.</param>
        /// <returns>An updated Installment object.</returns>
        public Installment Create(Installment installment)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Installments ([expected_date], [interest_repayment], [capital_repayment], [contract_id], [number], [paid_interest], [paid_capital], [fees_unpaid], [paid_date], [paid_fees], [comment], [pending], [start_date], [olb]) " +
                "VALUES(@expected_date, @interest_repayment, @capital_repayment, @contract_id, @number, @paid_interest, @paid_capital, @fees_unpaid, @paid_date, @paid_fees, @comment, @pending, @start_date, @olb);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@expected_date", DbType.DateTime, installment.expected_date);
                db.AddInParameter(cmd, "@interest_repayment", DbType.Currency, installment.interest_repayment);
                db.AddInParameter(cmd, "@capital_repayment", DbType.Currency, installment.capital_repayment);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, installment.contract_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, installment.number);
                db.AddInParameter(cmd, "@paid_interest", DbType.Currency, installment.paid_interest);
                db.AddInParameter(cmd, "@paid_capital", DbType.Currency, installment.paid_capital);
                db.AddInParameter(cmd, "@fees_unpaid", DbType.Currency, installment.fees_unpaid);
                db.AddInParameter(cmd, "@paid_date", DbType.DateTime, installment.paid_date);
                db.AddInParameter(cmd, "@paid_fees", DbType.Currency, installment.paid_fees);
                db.AddInParameter(cmd, "@comment", DbType.String, installment.comment);
                db.AddInParameter(cmd, "@pending", DbType.Boolean, installment.pending);
                db.AddInParameter(cmd, "@start_date", DbType.DateTime, installment.start_date);
                db.AddInParameter(cmd, "@olb", DbType.Currency, installment.olb);

                db.ExecuteNonQuery(cmd);
            }

            return installment;
        }

        /// <summary>
        /// Updates an existing row in the Installments table.
        /// </summary>
        /// <param name="installment">A Installment entity object.</param>
        public void UpdateById(Installment installment)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Installments " +
                "SET " +
                    "[expected_date]=@expected_date, " +
                    "[interest_repayment]=@interest_repayment, " +
                    "[capital_repayment]=@capital_repayment, " +
                    "[paid_interest]=@paid_interest, " +
                    "[paid_capital]=@paid_capital, " +
                    "[fees_unpaid]=@fees_unpaid, " +
                    "[paid_date]=@paid_date, " +
                    "[paid_fees]=@paid_fees, " +
                    "[comment]=@comment, " +
                    "[pending]=@pending, " +
                    "[start_date]=@start_date, " +
                    "[olb]=@olb " +
                "WHERE [contract_id]=@contract_id " +
                      "AND [number]=@number ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@expected_date", DbType.DateTime, installment.expected_date);
                db.AddInParameter(cmd, "@interest_repayment", DbType.Currency, installment.interest_repayment);
                db.AddInParameter(cmd, "@capital_repayment", DbType.Currency, installment.capital_repayment);
                db.AddInParameter(cmd, "@paid_interest", DbType.Currency, installment.paid_interest);
                db.AddInParameter(cmd, "@paid_capital", DbType.Currency, installment.paid_capital);
                db.AddInParameter(cmd, "@fees_unpaid", DbType.Currency, installment.fees_unpaid);
                db.AddInParameter(cmd, "@paid_date", DbType.DateTime, installment.paid_date);
                db.AddInParameter(cmd, "@paid_fees", DbType.Currency, installment.paid_fees);
                db.AddInParameter(cmd, "@comment", DbType.String, installment.comment);
                db.AddInParameter(cmd, "@pending", DbType.Boolean, installment.pending);
                db.AddInParameter(cmd, "@start_date", DbType.DateTime, installment.start_date);
                db.AddInParameter(cmd, "@olb", DbType.Currency, installment.olb);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, installment.contract_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, installment.number);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Installments table.
        /// </summary>
        /// <param name="contract_id">A contract_id value.</param>
        public void DeleteById(int contract_id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Installments " +
                                         "WHERE [contract_id]=@contract_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, contract_id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Installments table.
        /// </summary>
        /// <param name="contract_id">A contract_id value.</param>
        /// <param name="number">A number value.</param>
        /// <returns>A Installment object with data populated from the database.</returns>
        public Installment SelectById(int contract_id, int number)
        {
            const string SQL_STATEMENT =
                "SELECT [expected_date], [interest_repayment], [capital_repayment], [contract_id], [number]" +
                        ", [paid_interest], [paid_capital], [fees_unpaid], [paid_date], [paid_fees], [comment]" +
                        ", [pending], [start_date], [olb] " +
                "FROM dbo.Installments  " +
                "WHERE [contract_id]=@contract_id " +
                      "AND [number]=@number ";

            Installment installment = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, contract_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, number);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Installment
                        installment = new Installment();

                        // Read values.
                        installment.expected_date = base.GetDataValue<DateTime>(dr, "expected_date");
                        installment.interest_repayment = base.GetDataValue<decimal>(dr, "interest_repayment");
                        installment.capital_repayment = base.GetDataValue<decimal>(dr, "capital_repayment");
                        installment.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        installment.number = base.GetDataValue<int>(dr, "number");
                        installment.paid_interest = base.GetDataValue<decimal>(dr, "paid_interest");
                        installment.paid_capital = base.GetDataValue<decimal>(dr, "paid_capital");
                        installment.fees_unpaid = base.GetDataValue<decimal>(dr, "fees_unpaid");
                        installment.paid_date = base.GetDataValue<DateTime>(dr, "paid_date");
                        installment.paid_fees = base.GetDataValue<decimal>(dr, "paid_fees");
                        installment.comment = base.GetDataValue<string>(dr, "comment");
                        installment.pending = base.GetDataValue<bool>(dr, "pending");
                        installment.start_date = base.GetDataValue<DateTime>(dr, "start_date");
                        installment.olb = base.GetDataValue<decimal>(dr, "olb");
                    }
                }
            }

            return installment;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Installments table.
        /// </summary>
        /// <returns>A collection of Installment objects.</returns>		
        public List<Installment> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [expected_date], [interest_repayment], [capital_repayment], [contract_id], [number]" +
                        ", [paid_interest], [paid_capital], [fees_unpaid], [paid_date], [paid_fees], [comment]" +
                        ", [pending], [start_date], [olb] " +
                "FROM dbo.Installments ";

            List<Installment> result = new List<Installment>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Installment
                        Installment installment = new Installment();

                        // Read values.
                        installment.expected_date = base.GetDataValue<DateTime>(dr, "expected_date");
                        installment.interest_repayment = base.GetDataValue<decimal>(dr, "interest_repayment");
                        installment.capital_repayment = base.GetDataValue<decimal>(dr, "capital_repayment");
                        installment.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        installment.number = base.GetDataValue<int>(dr, "number");
                        installment.paid_interest = base.GetDataValue<decimal>(dr, "paid_interest");
                        installment.paid_capital = base.GetDataValue<decimal>(dr, "paid_capital");
                        installment.fees_unpaid = base.GetDataValue<decimal>(dr, "fees_unpaid");
                        installment.paid_date = base.GetDataValue<DateTime>(dr, "paid_date");
                        installment.paid_fees = base.GetDataValue<decimal>(dr, "paid_fees");
                        installment.comment = base.GetDataValue<string>(dr, "comment");
                        installment.pending = base.GetDataValue<bool>(dr, "pending");
                        installment.start_date = base.GetDataValue<DateTime>(dr, "start_date");
                        installment.olb = base.GetDataValue<decimal>(dr, "olb");

                        // Add to List.
                        result.Add(installment);
                    }
                }
            }

            return result;
        }
    }
}

