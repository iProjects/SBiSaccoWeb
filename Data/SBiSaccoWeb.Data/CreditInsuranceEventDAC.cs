//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// CreditInsuranceEvents data access component. Manages CRUD operations for the CreditInsuranceEvents table.
    /// </summary>
    public partial class CreditInsuranceEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the CreditInsuranceEvents table.
        /// </summary>
        /// <param name="creditInsuranceEvent">A CreditInsuranceEvent object.</param>
        /// <returns>An updated CreditInsuranceEvent object.</returns>
        public CreditInsuranceEvent Create(CreditInsuranceEvent creditInsuranceEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.CreditInsuranceEvents ([id], [commission], [principal]) " +
                "VALUES(@id, @commission, @principal);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, creditInsuranceEvent.id);
                db.AddInParameter(cmd, "@commission", DbType.Decimal, creditInsuranceEvent.commission);
                db.AddInParameter(cmd, "@principal", DbType.Decimal, creditInsuranceEvent.principal);

                db.ExecuteNonQuery(cmd);
            }

            return creditInsuranceEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the CreditInsuranceEvents table.
        /// </summary>
        /// <returns>A collection of CreditInsuranceEvent objects.</returns>		
        public List<CreditInsuranceEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [commission], [principal] " +
                "FROM dbo.CreditInsuranceEvents ";

            List<CreditInsuranceEvent> result = new List<CreditInsuranceEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new CreditInsuranceEvent
                        CreditInsuranceEvent creditInsuranceEvent = new CreditInsuranceEvent();

                        // Read values.
                        creditInsuranceEvent.id = base.GetDataValue<int>(dr, "id");
                        creditInsuranceEvent.commission = base.GetDataValue<decimal>(dr, "commission");
                        creditInsuranceEvent.principal = base.GetDataValue<decimal>(dr, "principal");

                        // Add to List.
                        result.Add(creditInsuranceEvent);
                    }
                }
            }

            return result;
        }
    }
}

