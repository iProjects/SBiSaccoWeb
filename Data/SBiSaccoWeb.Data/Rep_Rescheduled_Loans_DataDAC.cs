//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Rep_Rescheduled_Loans_Data data access component. Manages CRUD operations for the Rep_Rescheduled_Loans_Data table.
    /// </summary>
    public partial class Rep_Rescheduled_Loans_DataDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Rep_Rescheduled_Loans_Data table.
        /// </summary>
        /// <param name="rep_Rescheduled_Loans_Data">A Rep_Rescheduled_Loans_Data object.</param>
        /// <returns>An updated Rep_Rescheduled_Loans_Data object.</returns>
        public Rep_Rescheduled_Loans_Data Create(Rep_Rescheduled_Loans_Data rep_Rescheduled_Loans_Data)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Rep_Rescheduled_Loans_Data ([id], [branch_name], [load_date], [loan_officer], [client_name], [contract_code], [package_name], [loan_amount], [amount_rescheduled], [maturity], [reschedule_date], [olb]) " +
                "VALUES(@id, @branch_name, @load_date, @loan_officer, @client_name, @contract_code, @package_name, @loan_amount, @amount_rescheduled, @maturity, @reschedule_date, @olb);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, rep_Rescheduled_Loans_Data.id);
                db.AddInParameter(cmd, "@branch_name", DbType.String, rep_Rescheduled_Loans_Data.branch_name);
                db.AddInParameter(cmd, "@load_date", DbType.DateTime, rep_Rescheduled_Loans_Data.load_date);
                db.AddInParameter(cmd, "@loan_officer", DbType.String, rep_Rescheduled_Loans_Data.loan_officer);
                db.AddInParameter(cmd, "@client_name", DbType.String, rep_Rescheduled_Loans_Data.client_name);
                db.AddInParameter(cmd, "@contract_code", DbType.String, rep_Rescheduled_Loans_Data.contract_code);
                db.AddInParameter(cmd, "@package_name", DbType.String, rep_Rescheduled_Loans_Data.package_name);
                db.AddInParameter(cmd, "@loan_amount", DbType.Currency, rep_Rescheduled_Loans_Data.loan_amount);
                db.AddInParameter(cmd, "@amount_rescheduled", DbType.Currency, rep_Rescheduled_Loans_Data.amount_rescheduled);
                db.AddInParameter(cmd, "@maturity", DbType.Int32, rep_Rescheduled_Loans_Data.maturity);
                db.AddInParameter(cmd, "@reschedule_date", DbType.DateTime, rep_Rescheduled_Loans_Data.reschedule_date);
                db.AddInParameter(cmd, "@olb", DbType.Currency, rep_Rescheduled_Loans_Data.olb);

                db.ExecuteNonQuery(cmd);
            }

            return rep_Rescheduled_Loans_Data;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Rep_Rescheduled_Loans_Data table.
        /// </summary>
        /// <returns>A collection of Rep_Rescheduled_Loans_Data objects.</returns>		
        public List<Rep_Rescheduled_Loans_Data> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [branch_name], [load_date], [loan_officer], [client_name], [contract_code]" +
                        ", [package_name], [loan_amount], [amount_rescheduled], [maturity], [reschedule_date]" +
                        ", [olb] " +
                "FROM dbo.Rep_Rescheduled_Loans_Data ";

            List<Rep_Rescheduled_Loans_Data> result = new List<Rep_Rescheduled_Loans_Data>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Rep_Rescheduled_Loans_Data
                        Rep_Rescheduled_Loans_Data rep_Rescheduled_Loans_Data = new Rep_Rescheduled_Loans_Data();

                        // Read values.
                        rep_Rescheduled_Loans_Data.id = base.GetDataValue<int>(dr, "id");
                        rep_Rescheduled_Loans_Data.branch_name = base.GetDataValue<string>(dr, "branch_name");
                        rep_Rescheduled_Loans_Data.load_date = base.GetDataValue<DateTime>(dr, "load_date");
                        rep_Rescheduled_Loans_Data.loan_officer = base.GetDataValue<string>(dr, "loan_officer");
                        rep_Rescheduled_Loans_Data.client_name = base.GetDataValue<string>(dr, "client_name");
                        rep_Rescheduled_Loans_Data.contract_code = base.GetDataValue<string>(dr, "contract_code");
                        rep_Rescheduled_Loans_Data.package_name = base.GetDataValue<string>(dr, "package_name");
                        rep_Rescheduled_Loans_Data.loan_amount = base.GetDataValue<decimal>(dr, "loan_amount");
                        rep_Rescheduled_Loans_Data.amount_rescheduled = base.GetDataValue<decimal>(dr, "amount_rescheduled");
                        rep_Rescheduled_Loans_Data.maturity = base.GetDataValue<int>(dr, "maturity");
                        rep_Rescheduled_Loans_Data.reschedule_date = base.GetDataValue<DateTime>(dr, "reschedule_date");
                        rep_Rescheduled_Loans_Data.olb = base.GetDataValue<decimal>(dr, "olb");

                        // Add to List.
                        result.Add(rep_Rescheduled_Loans_Data);
                    }
                }
            }

            return result;
        }
    }
}

