//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// EntryFees data access component. Manages CRUD operations for the EntryFees table.
    /// </summary>
    public partial class EntryFeeDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the EntryFees table.
        /// </summary>
        /// <param name="entryFee">A EntryFee object.</param>
        /// <returns>An updated EntryFee object.</returns>
        public EntryFee Create(EntryFee entryFee)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.EntryFees ([id_product], [name_of_fee], [min], [max], [value], [rate], [is_deleted], [fee_index], [cycle_id]) " +
                "VALUES(@id_product, @name_of_fee, @min, @max, @value, @rate, @is_deleted, @fee_index, @cycle_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id_product", DbType.Int32, entryFee.id_product);
                db.AddInParameter(cmd, "@name_of_fee", DbType.String, entryFee.name_of_fee);
                db.AddInParameter(cmd, "@min", DbType.Decimal, entryFee.min);
                db.AddInParameter(cmd, "@max", DbType.Decimal, entryFee.max);
                db.AddInParameter(cmd, "@value", DbType.Decimal, entryFee.value);
                db.AddInParameter(cmd, "@rate", DbType.Boolean, entryFee.rate);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, entryFee.is_deleted);
                db.AddInParameter(cmd, "@fee_index", DbType.Int32, entryFee.fee_index);
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, entryFee.cycle_id);

                // Get the primary key value.
                entryFee.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return entryFee;
        }

        /// <summary>
        /// Updates an existing row in the EntryFees table.
        /// </summary>
        /// <param name="entryFee">A EntryFee entity object.</param>
        public void UpdateById(EntryFee entryFee)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.EntryFees " +
                "SET " +
                    "[id_product]=@id_product, " +
                    "[name_of_fee]=@name_of_fee, " +
                    "[min]=@min, " +
                    "[max]=@max, " +
                    "[value]=@value, " +
                    "[rate]=@rate, " +
                    "[is_deleted]=@is_deleted, " +
                    "[fee_index]=@fee_index, " +
                    "[cycle_id]=@cycle_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id_product", DbType.Int32, entryFee.id_product);
                db.AddInParameter(cmd, "@name_of_fee", DbType.String, entryFee.name_of_fee);
                db.AddInParameter(cmd, "@min", DbType.Decimal, entryFee.min);
                db.AddInParameter(cmd, "@max", DbType.Decimal, entryFee.max);
                db.AddInParameter(cmd, "@value", DbType.Decimal, entryFee.value);
                db.AddInParameter(cmd, "@rate", DbType.Boolean, entryFee.rate);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, entryFee.is_deleted);
                db.AddInParameter(cmd, "@fee_index", DbType.Int32, entryFee.fee_index);
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, entryFee.cycle_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, entryFee.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the EntryFees table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.EntryFees " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the EntryFees table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A EntryFee object with data populated from the database.</returns>
        public EntryFee SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [id_product], [name_of_fee], [min], [max], [value], [rate], [is_deleted], [fee_index]" +
                        ", [cycle_id] " +
                "FROM dbo.EntryFees  " +
                "WHERE [id]=@id ";

            EntryFee entryFee = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new EntryFee
                        entryFee = new EntryFee();

                        // Read values.
                        entryFee.id = base.GetDataValue<int>(dr, "id");
                        entryFee.id_product = base.GetDataValue<int>(dr, "id_product");
                        entryFee.name_of_fee = base.GetDataValue<string>(dr, "name_of_fee");
                        entryFee.min = base.GetDataValue<decimal>(dr, "min");
                        entryFee.max = base.GetDataValue<decimal>(dr, "max");
                        entryFee.value = base.GetDataValue<decimal>(dr, "value");
                        entryFee.rate = base.GetDataValue<bool>(dr, "rate");
                        entryFee.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");
                        entryFee.fee_index = base.GetDataValue<int>(dr, "fee_index");
                        entryFee.cycle_id = base.GetDataValue<int>(dr, "cycle_id");
                    }
                }
            }

            return entryFee;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the EntryFees table.
        /// </summary>
        /// <returns>A collection of EntryFee objects.</returns>		
        public List<EntryFee> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [id_product], [name_of_fee], [min], [max], [value], [rate], [is_deleted], [fee_index]" +
                        ", [cycle_id] " +
                "FROM dbo.EntryFees ";

            List<EntryFee> result = new List<EntryFee>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new EntryFee
                        EntryFee entryFee = new EntryFee();

                        // Read values.
                        entryFee.id = base.GetDataValue<int>(dr, "id");
                        entryFee.id_product = base.GetDataValue<int>(dr, "id_product");
                        entryFee.name_of_fee = base.GetDataValue<string>(dr, "name_of_fee");
                        entryFee.min = base.GetDataValue<decimal>(dr, "min");
                        entryFee.max = base.GetDataValue<decimal>(dr, "max");
                        entryFee.value = base.GetDataValue<decimal>(dr, "value");
                        entryFee.rate = base.GetDataValue<bool>(dr, "rate");
                        entryFee.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");
                        entryFee.fee_index = base.GetDataValue<int>(dr, "fee_index");
                        entryFee.cycle_id = base.GetDataValue<int>(dr, "cycle_id");

                        // Add to List.
                        result.Add(entryFee);
                    }
                }
            }

            return result;
        }
    }
}

