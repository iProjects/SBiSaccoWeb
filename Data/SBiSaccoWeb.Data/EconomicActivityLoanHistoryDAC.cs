//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// EconomicActivityLoanHistory data access component. Manages CRUD operations for the EconomicActivityLoanHistory table.
    /// </summary>
    public partial class EconomicActivityLoanHistoryDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the EconomicActivityLoanHistory table.
        /// </summary>
        /// <param name="economicActivityLoanHistory">A EconomicActivityLoanHistory object.</param>
        /// <returns>An updated EconomicActivityLoanHistory object.</returns>
        public EconomicActivityLoanHistory Create(EconomicActivityLoanHistory economicActivityLoanHistory)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.EconomicActivityLoanHistory ([contract_id], [person_id], [group_id], [economic_activity_id], [deleted]) " +
                "VALUES(@contract_id, @person_id, @group_id, @economic_activity_id, @deleted);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, economicActivityLoanHistory.contract_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, economicActivityLoanHistory.person_id);
                db.AddInParameter(cmd, "@group_id", DbType.Int32, economicActivityLoanHistory.group_id);
                db.AddInParameter(cmd, "@economic_activity_id", DbType.Int32, economicActivityLoanHistory.economic_activity_id);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, economicActivityLoanHistory.deleted);

                db.ExecuteNonQuery(cmd);
            }

            return economicActivityLoanHistory;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the EconomicActivityLoanHistory table.
        /// </summary>
        /// <returns>A collection of EconomicActivityLoanHistory objects.</returns>		
        public List<EconomicActivityLoanHistory> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [contract_id], [person_id], [group_id], [economic_activity_id], [deleted] " +
                "FROM dbo.EconomicActivityLoanHistory ";

            List<EconomicActivityLoanHistory> result = new List<EconomicActivityLoanHistory>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new EconomicActivityLoanHistory
                        EconomicActivityLoanHistory economicActivityLoanHistory = new EconomicActivityLoanHistory();

                        // Read values.
                        economicActivityLoanHistory.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        economicActivityLoanHistory.person_id = base.GetDataValue<int>(dr, "person_id");
                        economicActivityLoanHistory.group_id = base.GetDataValue<int>(dr, "group_id");
                        economicActivityLoanHistory.economic_activity_id = base.GetDataValue<int>(dr, "economic_activity_id");
                        economicActivityLoanHistory.deleted = base.GetDataValue<bool>(dr, "deleted");

                        // Add to List.
                        result.Add(economicActivityLoanHistory);
                    }
                }
            }

            return result;
        }
    }
}

