//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// AmountCycles data access component. Manages CRUD operations for the AmountCycles table.
    /// </summary>
    public partial class AmountCycleDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the AmountCycles table.
        /// </summary>
        /// <param name="amountCycle">A AmountCycle object.</param>
        /// <returns>An updated AmountCycle object.</returns>
        public AmountCycle Create(AmountCycle amountCycle)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.AmountCycles ([cycle_id], [number], [amount_min], [amount_max]) " +
                "VALUES(@cycle_id, @number, @amount_min, @amount_max);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, amountCycle.cycle_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, amountCycle.number);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, amountCycle.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, amountCycle.amount_max);

                db.ExecuteNonQuery(cmd);
            }

            return amountCycle;
        }

        /// <summary>
        /// Updates an existing row in the AmountCycles table.
        /// </summary>
        /// <param name="amountCycle">A AmountCycle entity object.</param>
        public void UpdateById(AmountCycle amountCycle)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.AmountCycles " +
                "SET " +
                    "[amount_min]=@amount_min, " +
                    "[amount_max]=@amount_max " +
                "WHERE [cycle_id]=@cycle_id " +
                      "AND [number]=@number ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, amountCycle.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, amountCycle.amount_max);
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, amountCycle.cycle_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, amountCycle.number);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the AmountCycles table.
        /// </summary>
        /// <param name="cycle_id">A cycle_id value.</param>
        public void DeleteById(int cycle_id)
        {
            const string SQL_STATEMENT = "DELETE dbo.AmountCycles " +
                                         "WHERE [cycle_id]=@cycle_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, cycle_id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the AmountCycles table.
        /// </summary>
        /// <param name="cycle_id">A cycle_id value.</param>
        /// <param name="number">A number value.</param>
        /// <returns>A AmountCycle object with data populated from the database.</returns>
        public AmountCycle SelectById(int cycle_id, int number)
        {
            const string SQL_STATEMENT =
                "SELECT [cycle_id], [number], [amount_min], [amount_max] " +
                "FROM dbo.AmountCycles  " +
                "WHERE [cycle_id]=@cycle_id " +
                      "AND [number]=@number ";

            AmountCycle amountCycle = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@cycle_id", DbType.Int32, cycle_id);
                db.AddInParameter(cmd, "@number", DbType.Int32, number);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new AmountCycle
                        amountCycle = new AmountCycle();

                        // Read values.
                        amountCycle.cycle_id = base.GetDataValue<int>(dr, "cycle_id");
                        amountCycle.number = base.GetDataValue<int>(dr, "number");
                        amountCycle.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        amountCycle.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                    }
                }
            }

            return amountCycle;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the AmountCycles table.
        /// </summary>
        /// <returns>A collection of AmountCycle objects.</returns>		
        public List<AmountCycle> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [cycle_id], [number], [amount_min], [amount_max] " +
                "FROM dbo.AmountCycles ";

            List<AmountCycle> result = new List<AmountCycle>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new AmountCycle
                        AmountCycle amountCycle = new AmountCycle();

                        // Read values.
                        amountCycle.cycle_id = base.GetDataValue<int>(dr, "cycle_id");
                        amountCycle.number = base.GetDataValue<int>(dr, "number");
                        amountCycle.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        amountCycle.amount_max = base.GetDataValue<decimal>(dr, "amount_max");

                        // Add to List.
                        result.Add(amountCycle);
                    }
                }
            }

            return result;
        }
    }
}

