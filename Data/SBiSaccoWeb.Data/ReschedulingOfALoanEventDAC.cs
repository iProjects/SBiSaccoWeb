//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ReschedulingOfALoanEvents data access component. Manages CRUD operations for the ReschedulingOfALoanEvents table.
    /// </summary>
    public partial class ReschedulingOfALoanEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ReschedulingOfALoanEvents table.
        /// </summary>
        /// <param name="reschedulingOfALoanEvent">A ReschedulingOfALoanEvent object.</param>
        /// <returns>An updated ReschedulingOfALoanEvent object.</returns>
        public ReschedulingOfALoanEvent Create(ReschedulingOfALoanEvent reschedulingOfALoanEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ReschedulingOfALoanEvents ([id], [amount], [interest], [nb_of_maturity], [date_offset], [grace_period], [charge_interest_during_shift], [charge_interest_during_grace_period]) " +
                "VALUES(@id, @amount, @interest, @nb_of_maturity, @date_offset, @grace_period, @charge_interest_during_shift, @charge_interest_during_grace_period);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, reschedulingOfALoanEvent.id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, reschedulingOfALoanEvent.amount);
                db.AddInParameter(cmd, "@interest", DbType.Currency, reschedulingOfALoanEvent.interest);
                db.AddInParameter(cmd, "@nb_of_maturity", DbType.Int32, reschedulingOfALoanEvent.nb_of_maturity);
                db.AddInParameter(cmd, "@date_offset", DbType.Int32, reschedulingOfALoanEvent.date_offset);
                db.AddInParameter(cmd, "@grace_period", DbType.Int32, reschedulingOfALoanEvent.grace_period);
                db.AddInParameter(cmd, "@charge_interest_during_shift", DbType.Boolean, reschedulingOfALoanEvent.charge_interest_during_shift);
                db.AddInParameter(cmd, "@charge_interest_during_grace_period", DbType.Boolean, reschedulingOfALoanEvent.charge_interest_during_grace_period);

                db.ExecuteNonQuery(cmd);
            }

            return reschedulingOfALoanEvent;
        }

        /// <summary>
        /// Updates an existing row in the ReschedulingOfALoanEvents table.
        /// </summary>
        /// <param name="reschedulingOfALoanEvent">A ReschedulingOfALoanEvent entity object.</param>
        public void UpdateById(ReschedulingOfALoanEvent reschedulingOfALoanEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ReschedulingOfALoanEvents " +
                "SET " +
                    "[amount]=@amount, " +
                    "[interest]=@interest, " +
                    "[nb_of_maturity]=@nb_of_maturity, " +
                    "[date_offset]=@date_offset, " +
                    "[grace_period]=@grace_period, " +
                    "[charge_interest_during_shift]=@charge_interest_during_shift, " +
                    "[charge_interest_during_grace_period]=@charge_interest_during_grace_period " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@amount", DbType.Currency, reschedulingOfALoanEvent.amount);
                db.AddInParameter(cmd, "@interest", DbType.Currency, reschedulingOfALoanEvent.interest);
                db.AddInParameter(cmd, "@nb_of_maturity", DbType.Int32, reschedulingOfALoanEvent.nb_of_maturity);
                db.AddInParameter(cmd, "@date_offset", DbType.Int32, reschedulingOfALoanEvent.date_offset);
                db.AddInParameter(cmd, "@grace_period", DbType.Int32, reschedulingOfALoanEvent.grace_period);
                db.AddInParameter(cmd, "@charge_interest_during_shift", DbType.Boolean, reschedulingOfALoanEvent.charge_interest_during_shift);
                db.AddInParameter(cmd, "@charge_interest_during_grace_period", DbType.Boolean, reschedulingOfALoanEvent.charge_interest_during_grace_period);
                db.AddInParameter(cmd, "@id", DbType.Int32, reschedulingOfALoanEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ReschedulingOfALoanEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ReschedulingOfALoanEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ReschedulingOfALoanEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A ReschedulingOfALoanEvent object with data populated from the database.</returns>
        public ReschedulingOfALoanEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [amount], [interest], [nb_of_maturity], [date_offset], [grace_period], [charge_interest_during_shift]" +
                        ", [charge_interest_during_grace_period] " +
                "FROM dbo.ReschedulingOfALoanEvents  " +
                "WHERE [id]=@id ";

            ReschedulingOfALoanEvent reschedulingOfALoanEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ReschedulingOfALoanEvent
                        reschedulingOfALoanEvent = new ReschedulingOfALoanEvent();

                        // Read values.
                        reschedulingOfALoanEvent.id = base.GetDataValue<int>(dr, "id");
                        reschedulingOfALoanEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        reschedulingOfALoanEvent.interest = base.GetDataValue<decimal>(dr, "interest");
                        reschedulingOfALoanEvent.nb_of_maturity = base.GetDataValue<int>(dr, "nb_of_maturity");
                        reschedulingOfALoanEvent.date_offset = base.GetDataValue<int>(dr, "date_offset");
                        reschedulingOfALoanEvent.grace_period = base.GetDataValue<int>(dr, "grace_period");
                        reschedulingOfALoanEvent.charge_interest_during_shift = base.GetDataValue<bool>(dr, "charge_interest_during_shift");
                        reschedulingOfALoanEvent.charge_interest_during_grace_period = base.GetDataValue<bool>(dr, "charge_interest_during_grace_period");
                    }
                }
            }

            return reschedulingOfALoanEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ReschedulingOfALoanEvents table.
        /// </summary>
        /// <returns>A collection of ReschedulingOfALoanEvent objects.</returns>		
        public List<ReschedulingOfALoanEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [amount], [interest], [nb_of_maturity], [date_offset], [grace_period], [charge_interest_during_shift]" +
                        ", [charge_interest_during_grace_period] " +
                "FROM dbo.ReschedulingOfALoanEvents ";

            List<ReschedulingOfALoanEvent> result = new List<ReschedulingOfALoanEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ReschedulingOfALoanEvent
                        ReschedulingOfALoanEvent reschedulingOfALoanEvent = new ReschedulingOfALoanEvent();

                        // Read values.
                        reschedulingOfALoanEvent.id = base.GetDataValue<int>(dr, "id");
                        reschedulingOfALoanEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        reschedulingOfALoanEvent.interest = base.GetDataValue<decimal>(dr, "interest");
                        reschedulingOfALoanEvent.nb_of_maturity = base.GetDataValue<int>(dr, "nb_of_maturity");
                        reschedulingOfALoanEvent.date_offset = base.GetDataValue<int>(dr, "date_offset");
                        reschedulingOfALoanEvent.grace_period = base.GetDataValue<int>(dr, "grace_period");
                        reschedulingOfALoanEvent.charge_interest_during_shift = base.GetDataValue<bool>(dr, "charge_interest_during_shift");
                        reschedulingOfALoanEvent.charge_interest_during_grace_period = base.GetDataValue<bool>(dr, "charge_interest_during_grace_period");

                        // Add to List.
                        result.Add(reschedulingOfALoanEvent);
                    }
                }
            }

            return result;
        }
    }
}

