//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Tellers data access component. Manages CRUD operations for the Tellers table.
    /// </summary>
    public partial class TellerDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Tellers table.
        /// </summary>
        /// <param name="teller">A Teller object.</param>
        /// <returns>An updated Teller object.</returns>
        public Teller Create(Teller teller)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Tellers ([name], [desc], [account_id], [deleted], [branch_id], [currency_id], [user_id], [amount_min], [amount_max], [deposit_amount_min], [deposit_amount_max], [withdrawal_amount_min], [withdrawal_amount_max], [cash_in_min], [cash_in_max], [cash_out_min], [cash_out_max], [balance_min], [balance_max]) " +
                "VALUES(@name, @desc, @account_id, @deleted, @branch_id, @currency_id, @user_id, @amount_min, @amount_max, @deposit_amount_min, @deposit_amount_max, @withdrawal_amount_min, @withdrawal_amount_max, @cash_in_min, @cash_in_max, @cash_out_min, @cash_out_max, @balance_min, @balance_max); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, teller.name);
                db.AddInParameter(cmd, "@desc", DbType.String, teller.desc);
                db.AddInParameter(cmd, "@account_id", DbType.Int32, teller.account_id);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, teller.deleted);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, teller.branch_id);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, teller.currency_id);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, teller.user_id);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, teller.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, teller.amount_max);
                db.AddInParameter(cmd, "@deposit_amount_min", DbType.Currency, teller.deposit_amount_min);
                db.AddInParameter(cmd, "@deposit_amount_max", DbType.Currency, teller.deposit_amount_max);
                db.AddInParameter(cmd, "@withdrawal_amount_min", DbType.Currency, teller.withdrawal_amount_min);
                db.AddInParameter(cmd, "@withdrawal_amount_max", DbType.Currency, teller.withdrawal_amount_max);
                db.AddInParameter(cmd, "@cash_in_min", DbType.Currency, teller.cash_in_min);
                db.AddInParameter(cmd, "@cash_in_max", DbType.Currency, teller.cash_in_max);
                db.AddInParameter(cmd, "@cash_out_min", DbType.Currency, teller.cash_out_min);
                db.AddInParameter(cmd, "@cash_out_max", DbType.Currency, teller.cash_out_max);
                db.AddInParameter(cmd, "@balance_min", DbType.Currency, teller.balance_min);
                db.AddInParameter(cmd, "@balance_max", DbType.Currency, teller.balance_max);

                // Get the primary key value.
                teller.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return teller;
        }

        /// <summary>
        /// Updates an existing row in the Tellers table.
        /// </summary>
        /// <param name="teller">A Teller entity object.</param>
        public void UpdateById(Teller teller)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Tellers " +
                "SET " +
                    "[name]=@name, " +
                    "[desc]=@desc, " +
                    "[account_id]=@account_id, " +
                    "[deleted]=@deleted, " +
                    "[branch_id]=@branch_id, " +
                    "[currency_id]=@currency_id, " +
                    "[user_id]=@user_id, " +
                    "[amount_min]=@amount_min, " +
                    "[amount_max]=@amount_max, " +
                    "[deposit_amount_min]=@deposit_amount_min, " +
                    "[deposit_amount_max]=@deposit_amount_max, " +
                    "[withdrawal_amount_min]=@withdrawal_amount_min, " +
                    "[withdrawal_amount_max]=@withdrawal_amount_max, " +
                    "[cash_in_min]=@cash_in_min, " +
                    "[cash_in_max]=@cash_in_max, " +
                    "[cash_out_min]=@cash_out_min, " +
                    "[cash_out_max]=@cash_out_max, " +
                    "[balance_min]=@balance_min, " +
                    "[balance_max]=@balance_max " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, teller.name);
                db.AddInParameter(cmd, "@desc", DbType.String, teller.desc);
                db.AddInParameter(cmd, "@account_id", DbType.Int32, teller.account_id);
                db.AddInParameter(cmd, "@deleted", DbType.Boolean, teller.deleted);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, teller.branch_id);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, teller.currency_id);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, teller.user_id);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, teller.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, teller.amount_max);
                db.AddInParameter(cmd, "@deposit_amount_min", DbType.Currency, teller.deposit_amount_min);
                db.AddInParameter(cmd, "@deposit_amount_max", DbType.Currency, teller.deposit_amount_max);
                db.AddInParameter(cmd, "@withdrawal_amount_min", DbType.Currency, teller.withdrawal_amount_min);
                db.AddInParameter(cmd, "@withdrawal_amount_max", DbType.Currency, teller.withdrawal_amount_max);
                db.AddInParameter(cmd, "@cash_in_min", DbType.Currency, teller.cash_in_min);
                db.AddInParameter(cmd, "@cash_in_max", DbType.Currency, teller.cash_in_max);
                db.AddInParameter(cmd, "@cash_out_min", DbType.Currency, teller.cash_out_min);
                db.AddInParameter(cmd, "@cash_out_max", DbType.Currency, teller.cash_out_max);
                db.AddInParameter(cmd, "@balance_min", DbType.Currency, teller.balance_min);
                db.AddInParameter(cmd, "@balance_max", DbType.Currency, teller.balance_max);
                db.AddInParameter(cmd, "@id", DbType.Int32, teller.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Tellers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Tellers " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Tellers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Teller object with data populated from the database.</returns>
        public Teller SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [name], [desc], [account_id], [deleted], [branch_id], [currency_id], [user_id]" +
                        ", [amount_min], [amount_max], [deposit_amount_min], [deposit_amount_max], [withdrawal_amount_min]" +
                        ", [withdrawal_amount_max], [cash_in_min], [cash_in_max], [cash_out_min], [cash_out_max]" +
                        ", [balance_min], [balance_max] " +
                "FROM dbo.Tellers  " +
                "WHERE [id]=@id ";

            Teller teller = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Teller
                        teller = new Teller();

                        // Read values.
                        teller.id = base.GetDataValue<int>(dr, "id");
                        teller.name = base.GetDataValue<string>(dr, "name");
                        teller.desc = base.GetDataValue<string>(dr, "desc");
                        teller.account_id = base.GetDataValue<int>(dr, "account_id");
                        teller.deleted = base.GetDataValue<bool>(dr, "deleted");
                        teller.branch_id = base.GetDataValue<int>(dr, "branch_id");
                        teller.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        teller.user_id = base.GetDataValue<int>(dr, "user_id");
                        teller.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        teller.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                        teller.deposit_amount_min = base.GetDataValue<decimal>(dr, "deposit_amount_min");
                        teller.deposit_amount_max = base.GetDataValue<decimal>(dr, "deposit_amount_max");
                        teller.withdrawal_amount_min = base.GetDataValue<decimal>(dr, "withdrawal_amount_min");
                        teller.withdrawal_amount_max = base.GetDataValue<decimal>(dr, "withdrawal_amount_max");
                        teller.cash_in_min = base.GetDataValue<decimal>(dr, "cash_in_min");
                        teller.cash_in_max = base.GetDataValue<decimal>(dr, "cash_in_max");
                        teller.cash_out_min = base.GetDataValue<decimal>(dr, "cash_out_min");
                        teller.cash_out_max = base.GetDataValue<decimal>(dr, "cash_out_max");
                        teller.balance_min = base.GetDataValue<decimal>(dr, "balance_min");
                        teller.balance_max = base.GetDataValue<decimal>(dr, "balance_max");
                    }
                }
            }

            return teller;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Tellers table.
        /// </summary>
        /// <returns>A collection of Teller objects.</returns>		
        public List<Teller> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [name], [desc], [account_id], [deleted], [branch_id], [currency_id], [user_id]" +
                        ", [amount_min], [amount_max], [deposit_amount_min], [deposit_amount_max], [withdrawal_amount_min]" +
                        ", [withdrawal_amount_max], [cash_in_min], [cash_in_max], [cash_out_min], [cash_out_max]" +
                        ", [balance_min], [balance_max] " +
                "FROM dbo.Tellers ";

            List<Teller> result = new List<Teller>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Teller
                        Teller teller = new Teller();

                        // Read values.
                        teller.id = base.GetDataValue<int>(dr, "id");
                        teller.name = base.GetDataValue<string>(dr, "name");
                        teller.desc = base.GetDataValue<string>(dr, "desc");
                        teller.account_id = base.GetDataValue<int>(dr, "account_id");
                        teller.deleted = base.GetDataValue<bool>(dr, "deleted");
                        teller.branch_id = base.GetDataValue<int>(dr, "branch_id");
                        teller.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        teller.user_id = base.GetDataValue<int>(dr, "user_id");
                        teller.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        teller.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                        teller.deposit_amount_min = base.GetDataValue<decimal>(dr, "deposit_amount_min");
                        teller.deposit_amount_max = base.GetDataValue<decimal>(dr, "deposit_amount_max");
                        teller.withdrawal_amount_min = base.GetDataValue<decimal>(dr, "withdrawal_amount_min");
                        teller.withdrawal_amount_max = base.GetDataValue<decimal>(dr, "withdrawal_amount_max");
                        teller.cash_in_min = base.GetDataValue<decimal>(dr, "cash_in_min");
                        teller.cash_in_max = base.GetDataValue<decimal>(dr, "cash_in_max");
                        teller.cash_out_min = base.GetDataValue<decimal>(dr, "cash_out_min");
                        teller.cash_out_max = base.GetDataValue<decimal>(dr, "cash_out_max");
                        teller.balance_min = base.GetDataValue<decimal>(dr, "balance_min");
                        teller.balance_max = base.GetDataValue<decimal>(dr, "balance_max");

                        // Add to List.
                        result.Add(teller);
                    }
                }
            }

            return result;
        }
    }
}

