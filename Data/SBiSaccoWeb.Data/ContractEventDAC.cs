//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ContractEvents data access component. Manages CRUD operations for the ContractEvents table.
    /// </summary>
    public partial class ContractEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ContractEvents table.
        /// </summary>
        /// <param name="contractEvent">A ContractEvent object.</param>
        /// <returns>An updated ContractEvent object.</returns>
        public ContractEvent Create(ContractEvent contractEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ContractEvents ([event_type], [contract_id], [event_date], [user_id], [is_deleted], [entry_date], [is_exported], [comment], [teller_id], [parent_id], [cancel_date], [payment_method_id]) " +
                "VALUES(@event_type, @contract_id, @event_date, @user_id, @is_deleted, @entry_date, @is_exported, @comment, @teller_id, @parent_id, @cancel_date, @payment_method_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@event_type", DbType.String, contractEvent.event_type);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, contractEvent.contract_id);
                db.AddInParameter(cmd, "@event_date", DbType.DateTime, contractEvent.event_date);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, contractEvent.user_id);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, contractEvent.is_deleted);
                db.AddInParameter(cmd, "@entry_date", DbType.DateTime, contractEvent.entry_date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, contractEvent.is_exported);
                db.AddInParameter(cmd, "@comment", DbType.String, contractEvent.comment);
                db.AddInParameter(cmd, "@teller_id", DbType.Int32, contractEvent.teller_id);
                db.AddInParameter(cmd, "@parent_id", DbType.Int32, contractEvent.parent_id);
                db.AddInParameter(cmd, "@cancel_date", DbType.DateTime, contractEvent.cancel_date);
                db.AddInParameter(cmd, "@payment_method_id", DbType.Int32, contractEvent.payment_method_id);

                // Get the primary key value.
                contractEvent.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return contractEvent;
        }

        /// <summary>
        /// Updates an existing row in the ContractEvents table.
        /// </summary>
        /// <param name="contractEvent">A ContractEvent entity object.</param>
        public void UpdateById(ContractEvent contractEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ContractEvents " +
                "SET " +
                    "[event_type]=@event_type, " +
                    "[contract_id]=@contract_id, " +
                    "[event_date]=@event_date, " +
                    "[user_id]=@user_id, " +
                    "[is_deleted]=@is_deleted, " +
                    "[entry_date]=@entry_date, " +
                    "[is_exported]=@is_exported, " +
                    "[comment]=@comment, " +
                    "[teller_id]=@teller_id, " +
                    "[parent_id]=@parent_id, " +
                    "[cancel_date]=@cancel_date, " +
                    "[payment_method_id]=@payment_method_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@event_type", DbType.String, contractEvent.event_type);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, contractEvent.contract_id);
                db.AddInParameter(cmd, "@event_date", DbType.DateTime, contractEvent.event_date);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, contractEvent.user_id);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, contractEvent.is_deleted);
                db.AddInParameter(cmd, "@entry_date", DbType.DateTime, contractEvent.entry_date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, contractEvent.is_exported);
                db.AddInParameter(cmd, "@comment", DbType.String, contractEvent.comment);
                db.AddInParameter(cmd, "@teller_id", DbType.Int32, contractEvent.teller_id);
                db.AddInParameter(cmd, "@parent_id", DbType.Int32, contractEvent.parent_id);
                db.AddInParameter(cmd, "@cancel_date", DbType.DateTime, contractEvent.cancel_date);
                db.AddInParameter(cmd, "@payment_method_id", DbType.Int32, contractEvent.payment_method_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, contractEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ContractEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ContractEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ContractEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A ContractEvent object with data populated from the database.</returns>
        public ContractEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [event_type], [contract_id], [event_date], [user_id], [is_deleted], [entry_date]" +
                        ", [is_exported], [comment], [teller_id], [parent_id], [cancel_date], [payment_method_id]" +
                        " " +
                "FROM dbo.ContractEvents  " +
                "WHERE [id]=@id ";

            ContractEvent contractEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ContractEvent
                        contractEvent = new ContractEvent();

                        // Read values.
                        contractEvent.id = base.GetDataValue<int>(dr, "id");
                        contractEvent.event_type = base.GetDataValue<string>(dr, "event_type");
                        contractEvent.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        contractEvent.event_date = base.GetDataValue<DateTime>(dr, "event_date");
                        contractEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                        contractEvent.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");
                        contractEvent.entry_date = base.GetDataValue<DateTime>(dr, "entry_date");
                        contractEvent.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        contractEvent.comment = base.GetDataValue<string>(dr, "comment");
                        contractEvent.teller_id = base.GetDataValue<int>(dr, "teller_id");
                        contractEvent.parent_id = base.GetDataValue<int>(dr, "parent_id");
                        contractEvent.cancel_date = base.GetDataValue<DateTime>(dr, "cancel_date");
                        contractEvent.payment_method_id = base.GetDataValue<int>(dr, "payment_method_id");
                    }
                }
            }

            return contractEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ContractEvents table.
        /// </summary>
        /// <returns>A collection of ContractEvent objects.</returns>		
        public List<ContractEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [event_type], [contract_id], [event_date], [user_id], [is_deleted], [entry_date]" +
                        ", [is_exported], [comment], [teller_id], [parent_id], [cancel_date], [payment_method_id]" +
                        " " +
                "FROM dbo.ContractEvents ";

            List<ContractEvent> result = new List<ContractEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ContractEvent
                        ContractEvent contractEvent = new ContractEvent();

                        // Read values.
                        contractEvent.id = base.GetDataValue<int>(dr, "id");
                        contractEvent.event_type = base.GetDataValue<string>(dr, "event_type");
                        contractEvent.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        contractEvent.event_date = base.GetDataValue<DateTime>(dr, "event_date");
                        contractEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                        contractEvent.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");
                        contractEvent.entry_date = base.GetDataValue<DateTime>(dr, "entry_date");
                        contractEvent.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        contractEvent.comment = base.GetDataValue<string>(dr, "comment");
                        contractEvent.teller_id = base.GetDataValue<int>(dr, "teller_id");
                        contractEvent.parent_id = base.GetDataValue<int>(dr, "parent_id");
                        contractEvent.cancel_date = base.GetDataValue<DateTime>(dr, "cancel_date");
                        contractEvent.payment_method_id = base.GetDataValue<int>(dr, "payment_method_id");

                        // Add to List.
                        result.Add(contractEvent);
                    }
                }
            }

            return result;
        }
    }
}

