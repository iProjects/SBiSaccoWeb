//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Credit data access component. Manages CRUD operations for the Credit table.
    /// </summary>
    public partial class CreditDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Credit table.
        /// </summary>
        /// <param name="credit">A Credit object.</param>
        /// <returns>An updated Credit object.</returns>
        public Credit Create(Credit credit)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Credit ([id], [package_id], [amount], [interest_rate], [installment_type], [nb_of_installment], [anticipated_total_repayment_penalties], [disbursed], [loanofficer_id], [grace_period], [written_off], [rescheduled], [bad_loan], [non_repayment_penalties_based_on_overdue_principal], [non_repayment_penalties_based_on_initial_amount], [non_repayment_penalties_based_on_olb], [non_repayment_penalties_based_on_overdue_interest], [fundingLine_id], [synchronize], [interest], [grace_period_of_latefees], [anticipated_partial_repayment_penalties], [number_of_drawings_loc], [amount_under_loc], [maturity_loc], [anticipated_partial_repayment_base], [anticipated_total_repayment_base], [schedule_changed], [amount_min], [amount_max], [ir_min], [ir_max], [nmb_of_inst_min], [nmb_of_inst_max], [loan_cycle], [insurance], [exotic_id]) " +
                "VALUES(@id, @package_id, @amount, @interest_rate, @installment_type, @nb_of_installment, @anticipated_total_repayment_penalties, @disbursed, @loanofficer_id, @grace_period, @written_off, @rescheduled, @bad_loan, @non_repayment_penalties_based_on_overdue_principal, @non_repayment_penalties_based_on_initial_amount, @non_repayment_penalties_based_on_olb, @non_repayment_penalties_based_on_overdue_interest, @fundingLine_id, @synchronize, @interest, @grace_period_of_latefees, @anticipated_partial_repayment_penalties, @number_of_drawings_loc, @amount_under_loc, @maturity_loc, @anticipated_partial_repayment_base, @anticipated_total_repayment_base, @schedule_changed, @amount_min, @amount_max, @ir_min, @ir_max, @nmb_of_inst_min, @nmb_of_inst_max, @loan_cycle, @insurance, @exotic_id);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, credit.id);
                db.AddInParameter(cmd, "@package_id", DbType.Int32, credit.package_id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, credit.amount);
                db.AddInParameter(cmd, "@interest_rate", DbType.Decimal, credit.interest_rate);
                db.AddInParameter(cmd, "@installment_type", DbType.Int32, credit.installment_type);
                db.AddInParameter(cmd, "@nb_of_installment", DbType.Int32, credit.nb_of_installment);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties", DbType.Double, credit.anticipated_total_repayment_penalties);
                db.AddInParameter(cmd, "@disbursed", DbType.Boolean, credit.disbursed);
                db.AddInParameter(cmd, "@loanofficer_id", DbType.Int32, credit.loanofficer_id);
                db.AddInParameter(cmd, "@grace_period", DbType.Int32, credit.grace_period);
                db.AddInParameter(cmd, "@written_off", DbType.Boolean, credit.written_off);
                db.AddInParameter(cmd, "@rescheduled", DbType.Boolean, credit.rescheduled);
                db.AddInParameter(cmd, "@bad_loan", DbType.Boolean, credit.bad_loan);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal", DbType.Double, credit.non_repayment_penalties_based_on_overdue_principal);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount", DbType.Double, credit.non_repayment_penalties_based_on_initial_amount);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb", DbType.Double, credit.non_repayment_penalties_based_on_olb);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest", DbType.Double, credit.non_repayment_penalties_based_on_overdue_interest);
                db.AddInParameter(cmd, "@fundingLine_id", DbType.Int32, credit.fundingLine_id);
                db.AddInParameter(cmd, "@synchronize", DbType.Boolean, credit.synchronize);
                db.AddInParameter(cmd, "@interest", DbType.Currency, credit.interest);
                db.AddInParameter(cmd, "@grace_period_of_latefees", DbType.Int32, credit.grace_period_of_latefees);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties", DbType.Double, credit.anticipated_partial_repayment_penalties);
                db.AddInParameter(cmd, "@number_of_drawings_loc", DbType.Int32, credit.number_of_drawings_loc);
                db.AddInParameter(cmd, "@amount_under_loc", DbType.Currency, credit.amount_under_loc);
                db.AddInParameter(cmd, "@maturity_loc", DbType.Int32, credit.maturity_loc);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_base", DbType.Int16, credit.anticipated_partial_repayment_base);
                db.AddInParameter(cmd, "@anticipated_total_repayment_base", DbType.Int16, credit.anticipated_total_repayment_base);
                db.AddInParameter(cmd, "@schedule_changed", DbType.Boolean, credit.schedule_changed);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, credit.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, credit.amount_max);
                db.AddInParameter(cmd, "@ir_min", DbType.Decimal, credit.ir_min);
                db.AddInParameter(cmd, "@ir_max", DbType.Decimal, credit.ir_max);
                db.AddInParameter(cmd, "@nmb_of_inst_min", DbType.Int32, credit.nmb_of_inst_min);
                db.AddInParameter(cmd, "@nmb_of_inst_max", DbType.Int32, credit.nmb_of_inst_max);
                db.AddInParameter(cmd, "@loan_cycle", DbType.Int32, credit.loan_cycle);
                db.AddInParameter(cmd, "@insurance", DbType.Decimal, credit.insurance);
                db.AddInParameter(cmd, "@exotic_id", DbType.Int32, credit.exotic_id);

                db.ExecuteNonQuery(cmd);
            }

            return credit;
        }

        /// <summary>
        /// Updates an existing row in the Credit table.
        /// </summary>
        /// <param name="credit">A Credit entity object.</param>
        public void UpdateById(Credit credit)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Credit " +
                "SET " +
                    "[package_id]=@package_id, " +
                    "[amount]=@amount, " +
                    "[interest_rate]=@interest_rate, " +
                    "[installment_type]=@installment_type, " +
                    "[nb_of_installment]=@nb_of_installment, " +
                    "[anticipated_total_repayment_penalties]=@anticipated_total_repayment_penalties, " +
                    "[disbursed]=@disbursed, " +
                    "[loanofficer_id]=@loanofficer_id, " +
                    "[grace_period]=@grace_period, " +
                    "[written_off]=@written_off, " +
                    "[rescheduled]=@rescheduled, " +
                    "[bad_loan]=@bad_loan, " +
                    "[non_repayment_penalties_based_on_overdue_principal]=@non_repayment_penalties_based_on_overdue_principal, " +
                    "[non_repayment_penalties_based_on_initial_amount]=@non_repayment_penalties_based_on_initial_amount, " +
                    "[non_repayment_penalties_based_on_olb]=@non_repayment_penalties_based_on_olb, " +
                    "[non_repayment_penalties_based_on_overdue_interest]=@non_repayment_penalties_based_on_overdue_interest, " +
                    "[fundingLine_id]=@fundingLine_id, " +
                    "[synchronize]=@synchronize, " +
                    "[interest]=@interest, " +
                    "[grace_period_of_latefees]=@grace_period_of_latefees, " +
                    "[anticipated_partial_repayment_penalties]=@anticipated_partial_repayment_penalties, " +
                    "[number_of_drawings_loc]=@number_of_drawings_loc, " +
                    "[amount_under_loc]=@amount_under_loc, " +
                    "[maturity_loc]=@maturity_loc, " +
                    "[anticipated_partial_repayment_base]=@anticipated_partial_repayment_base, " +
                    "[anticipated_total_repayment_base]=@anticipated_total_repayment_base, " +
                    "[schedule_changed]=@schedule_changed, " +
                    "[amount_min]=@amount_min, " +
                    "[amount_max]=@amount_max, " +
                    "[ir_min]=@ir_min, " +
                    "[ir_max]=@ir_max, " +
                    "[nmb_of_inst_min]=@nmb_of_inst_min, " +
                    "[nmb_of_inst_max]=@nmb_of_inst_max, " +
                    "[loan_cycle]=@loan_cycle, " +
                    "[insurance]=@insurance, " +
                    "[exotic_id]=@exotic_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@package_id", DbType.Int32, credit.package_id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, credit.amount);
                db.AddInParameter(cmd, "@interest_rate", DbType.Decimal, credit.interest_rate);
                db.AddInParameter(cmd, "@installment_type", DbType.Int32, credit.installment_type);
                db.AddInParameter(cmd, "@nb_of_installment", DbType.Int32, credit.nb_of_installment);
                db.AddInParameter(cmd, "@anticipated_total_repayment_penalties", DbType.Double, credit.anticipated_total_repayment_penalties);
                db.AddInParameter(cmd, "@disbursed", DbType.Boolean, credit.disbursed);
                db.AddInParameter(cmd, "@loanofficer_id", DbType.Int32, credit.loanofficer_id);
                db.AddInParameter(cmd, "@grace_period", DbType.Int32, credit.grace_period);
                db.AddInParameter(cmd, "@written_off", DbType.Boolean, credit.written_off);
                db.AddInParameter(cmd, "@rescheduled", DbType.Boolean, credit.rescheduled);
                db.AddInParameter(cmd, "@bad_loan", DbType.Boolean, credit.bad_loan);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_principal", DbType.Double, credit.non_repayment_penalties_based_on_overdue_principal);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_initial_amount", DbType.Double, credit.non_repayment_penalties_based_on_initial_amount);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_olb", DbType.Double, credit.non_repayment_penalties_based_on_olb);
                db.AddInParameter(cmd, "@non_repayment_penalties_based_on_overdue_interest", DbType.Double, credit.non_repayment_penalties_based_on_overdue_interest);
                db.AddInParameter(cmd, "@fundingLine_id", DbType.Int32, credit.fundingLine_id);
                db.AddInParameter(cmd, "@synchronize", DbType.Boolean, credit.synchronize);
                db.AddInParameter(cmd, "@interest", DbType.Currency, credit.interest);
                db.AddInParameter(cmd, "@grace_period_of_latefees", DbType.Int32, credit.grace_period_of_latefees);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_penalties", DbType.Double, credit.anticipated_partial_repayment_penalties);
                db.AddInParameter(cmd, "@number_of_drawings_loc", DbType.Int32, credit.number_of_drawings_loc);
                db.AddInParameter(cmd, "@amount_under_loc", DbType.Currency, credit.amount_under_loc);
                db.AddInParameter(cmd, "@maturity_loc", DbType.Int32, credit.maturity_loc);
                db.AddInParameter(cmd, "@anticipated_partial_repayment_base", DbType.Int16, credit.anticipated_partial_repayment_base);
                db.AddInParameter(cmd, "@anticipated_total_repayment_base", DbType.Int16, credit.anticipated_total_repayment_base);
                db.AddInParameter(cmd, "@schedule_changed", DbType.Boolean, credit.schedule_changed);
                db.AddInParameter(cmd, "@amount_min", DbType.Currency, credit.amount_min);
                db.AddInParameter(cmd, "@amount_max", DbType.Currency, credit.amount_max);
                db.AddInParameter(cmd, "@ir_min", DbType.Decimal, credit.ir_min);
                db.AddInParameter(cmd, "@ir_max", DbType.Decimal, credit.ir_max);
                db.AddInParameter(cmd, "@nmb_of_inst_min", DbType.Int32, credit.nmb_of_inst_min);
                db.AddInParameter(cmd, "@nmb_of_inst_max", DbType.Int32, credit.nmb_of_inst_max);
                db.AddInParameter(cmd, "@loan_cycle", DbType.Int32, credit.loan_cycle);
                db.AddInParameter(cmd, "@insurance", DbType.Decimal, credit.insurance);
                db.AddInParameter(cmd, "@exotic_id", DbType.Int32, credit.exotic_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, credit.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Credit table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Credit " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Credit table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Credit object with data populated from the database.</returns>
        public Credit SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [package_id], [amount], [interest_rate], [installment_type], [nb_of_installment]" +
                        ", [anticipated_total_repayment_penalties], [disbursed], [loanofficer_id], [grace_period]" +
                        ", [written_off], [rescheduled], [bad_loan], [non_repayment_penalties_based_on_overdue_principal]" +
                        ", [non_repayment_penalties_based_on_initial_amount], [non_repayment_penalties_based_on_olb]" +
                        ", [non_repayment_penalties_based_on_overdue_interest], [fundingLine_id], [synchronize]" +
                        ", [interest], [grace_period_of_latefees], [anticipated_partial_repayment_penalties]" +
                        ", [number_of_drawings_loc], [amount_under_loc], [maturity_loc], [anticipated_partial_repayment_base]" +
                        ", [anticipated_total_repayment_base], [schedule_changed], [amount_min], [amount_max]" +
                        ", [ir_min], [ir_max], [nmb_of_inst_min], [nmb_of_inst_max], [loan_cycle], [insurance]" +
                        ", [exotic_id] " +
                "FROM dbo.Credit  " +
                "WHERE [id]=@id ";

            Credit credit = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Credit
                        credit = new Credit();

                        // Read values.
                        credit.id = base.GetDataValue<int>(dr, "id");
                        credit.package_id = base.GetDataValue<int>(dr, "package_id");
                        credit.amount = base.GetDataValue<decimal>(dr, "amount");
                        credit.interest_rate = base.GetDataValue<decimal>(dr, "interest_rate");
                        credit.installment_type = base.GetDataValue<int>(dr, "installment_type");
                        credit.nb_of_installment = base.GetDataValue<int>(dr, "nb_of_installment");
                        credit.anticipated_total_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties");
                        credit.disbursed = base.GetDataValue<bool>(dr, "disbursed");
                        credit.loanofficer_id = base.GetDataValue<int>(dr, "loanofficer_id");
                        credit.grace_period = base.GetDataValue<int>(dr, "grace_period");
                        credit.written_off = base.GetDataValue<bool>(dr, "written_off");
                        credit.rescheduled = base.GetDataValue<bool>(dr, "rescheduled");
                        credit.bad_loan = base.GetDataValue<bool>(dr, "bad_loan");
                        credit.non_repayment_penalties_based_on_overdue_principal = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal");
                        credit.non_repayment_penalties_based_on_initial_amount = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount");
                        credit.non_repayment_penalties_based_on_olb = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb");
                        credit.non_repayment_penalties_based_on_overdue_interest = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest");
                        credit.fundingLine_id = base.GetDataValue<int>(dr, "fundingLine_id");
                        credit.synchronize = base.GetDataValue<bool>(dr, "synchronize");
                        credit.interest = base.GetDataValue<decimal>(dr, "interest");
                        credit.grace_period_of_latefees = base.GetDataValue<int>(dr, "grace_period_of_latefees");
                        credit.anticipated_partial_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties");
                        credit.number_of_drawings_loc = base.GetDataValue<int>(dr, "number_of_drawings_loc");
                        credit.amount_under_loc = base.GetDataValue<decimal>(dr, "amount_under_loc");
                        credit.maturity_loc = base.GetDataValue<int>(dr, "maturity_loc");
                        credit.anticipated_partial_repayment_base = base.GetDataValue<short>(dr, "anticipated_partial_repayment_base");
                        credit.anticipated_total_repayment_base = base.GetDataValue<short>(dr, "anticipated_total_repayment_base");
                        credit.schedule_changed = base.GetDataValue<bool>(dr, "schedule_changed");
                        credit.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        credit.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                        credit.ir_min = base.GetDataValue<decimal>(dr, "ir_min");
                        credit.ir_max = base.GetDataValue<decimal>(dr, "ir_max");
                        credit.nmb_of_inst_min = base.GetDataValue<int>(dr, "nmb_of_inst_min");
                        credit.nmb_of_inst_max = base.GetDataValue<int>(dr, "nmb_of_inst_max");
                        credit.loan_cycle = base.GetDataValue<int>(dr, "loan_cycle");
                        credit.insurance = base.GetDataValue<decimal>(dr, "insurance");
                        credit.exotic_id = base.GetDataValue<int>(dr, "exotic_id");
                    }
                }
            }

            return credit;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Credit table.
        /// </summary>
        /// <returns>A collection of Credit objects.</returns>		
        public List<Credit> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [package_id], [amount], [interest_rate], [installment_type], [nb_of_installment]" +
                        ", [anticipated_total_repayment_penalties], [disbursed], [loanofficer_id], [grace_period]" +
                        ", [written_off], [rescheduled], [bad_loan], [non_repayment_penalties_based_on_overdue_principal]" +
                        ", [non_repayment_penalties_based_on_initial_amount], [non_repayment_penalties_based_on_olb]" +
                        ", [non_repayment_penalties_based_on_overdue_interest], [fundingLine_id], [synchronize]" +
                        ", [interest], [grace_period_of_latefees], [anticipated_partial_repayment_penalties]" +
                        ", [number_of_drawings_loc], [amount_under_loc], [maturity_loc], [anticipated_partial_repayment_base]" +
                        ", [anticipated_total_repayment_base], [schedule_changed], [amount_min], [amount_max]" +
                        ", [ir_min], [ir_max], [nmb_of_inst_min], [nmb_of_inst_max], [loan_cycle], [insurance]" +
                        ", [exotic_id] " +
                "FROM dbo.Credit ";

            List<Credit> result = new List<Credit>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Credit
                        Credit credit = new Credit();

                        // Read values.
                        credit.id = base.GetDataValue<int>(dr, "id");
                        credit.package_id = base.GetDataValue<int>(dr, "package_id");
                        credit.amount = base.GetDataValue<decimal>(dr, "amount");
                        credit.interest_rate = base.GetDataValue<decimal>(dr, "interest_rate");
                        credit.installment_type = base.GetDataValue<int>(dr, "installment_type");
                        credit.nb_of_installment = base.GetDataValue<int>(dr, "nb_of_installment");
                        credit.anticipated_total_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_total_repayment_penalties");
                        credit.disbursed = base.GetDataValue<bool>(dr, "disbursed");
                        credit.loanofficer_id = base.GetDataValue<int>(dr, "loanofficer_id");
                        credit.grace_period = base.GetDataValue<int>(dr, "grace_period");
                        credit.written_off = base.GetDataValue<bool>(dr, "written_off");
                        credit.rescheduled = base.GetDataValue<bool>(dr, "rescheduled");
                        credit.bad_loan = base.GetDataValue<bool>(dr, "bad_loan");
                        credit.non_repayment_penalties_based_on_overdue_principal = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_principal");
                        credit.non_repayment_penalties_based_on_initial_amount = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_initial_amount");
                        credit.non_repayment_penalties_based_on_olb = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_olb");
                        credit.non_repayment_penalties_based_on_overdue_interest = base.GetDataValue<double>(dr, "non_repayment_penalties_based_on_overdue_interest");
                        credit.fundingLine_id = base.GetDataValue<int>(dr, "fundingLine_id");
                        credit.synchronize = base.GetDataValue<bool>(dr, "synchronize");
                        credit.interest = base.GetDataValue<decimal>(dr, "interest");
                        credit.grace_period_of_latefees = base.GetDataValue<int>(dr, "grace_period_of_latefees");
                        credit.anticipated_partial_repayment_penalties = base.GetDataValue<double>(dr, "anticipated_partial_repayment_penalties");
                        credit.number_of_drawings_loc = base.GetDataValue<int>(dr, "number_of_drawings_loc");
                        credit.amount_under_loc = base.GetDataValue<decimal>(dr, "amount_under_loc");
                        credit.maturity_loc = base.GetDataValue<int>(dr, "maturity_loc");
                        credit.anticipated_partial_repayment_base = base.GetDataValue<short>(dr, "anticipated_partial_repayment_base");
                        credit.anticipated_total_repayment_base = base.GetDataValue<short>(dr, "anticipated_total_repayment_base");
                        credit.schedule_changed = base.GetDataValue<bool>(dr, "schedule_changed");
                        credit.amount_min = base.GetDataValue<decimal>(dr, "amount_min");
                        credit.amount_max = base.GetDataValue<decimal>(dr, "amount_max");
                        credit.ir_min = base.GetDataValue<decimal>(dr, "ir_min");
                        credit.ir_max = base.GetDataValue<decimal>(dr, "ir_max");
                        credit.nmb_of_inst_min = base.GetDataValue<int>(dr, "nmb_of_inst_min");
                        credit.nmb_of_inst_max = base.GetDataValue<int>(dr, "nmb_of_inst_max");
                        credit.loan_cycle = base.GetDataValue<int>(dr, "loan_cycle");
                        credit.insurance = base.GetDataValue<decimal>(dr, "insurance");
                        credit.exotic_id = base.GetDataValue<int>(dr, "exotic_id");

                        // Add to List.
                        result.Add(credit);
                    }
                }
            }

            return result;
        }
    }
}

