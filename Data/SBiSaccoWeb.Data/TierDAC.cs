//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Tiers data access component. Manages CRUD operations for the Tiers table.
    /// </summary>
    public partial class TierDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Tiers table.
        /// </summary>
        /// <param name="tier">A Tier object.</param>
        /// <returns>An updated Tier object.</returns>
        public Tier Create(Tier tier)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Tiers ([client_type_code], [scoring], [loan_cycle], [active], [other_org_name], [other_org_amount], [other_org_debts], [district_id], [city], [address], [secondary_district_id], [secondary_city], [secondary_address], [cash_input_voucher_number], [cash_output_voucher_number], [creation_date], [home_phone], [personal_phone], [secondary_home_phone], [secondary_personal_phone], [e_mail], [secondary_e_mail], [status], [other_org_comment], [sponsor1], [sponsor1_comment], [sponsor2], [sponsor2_comment], [follow_up_comment], [home_type], [secondary_homeType], [zipCode], [secondary_zipCode], [branch_id]) " +
                "VALUES(@client_type_code, @scoring, @loan_cycle, @active, @other_org_name, @other_org_amount, @other_org_debts, @district_id, @city, @address, @secondary_district_id, @secondary_city, @secondary_address, @cash_input_voucher_number, @cash_output_voucher_number, @creation_date, @home_phone, @personal_phone, @secondary_home_phone, @secondary_personal_phone, @e_mail, @secondary_e_mail, @status, @other_org_comment, @sponsor1, @sponsor1_comment, @sponsor2, @sponsor2_comment, @follow_up_comment, @home_type, @secondary_homeType, @zipCode, @secondary_zipCode, @branch_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@client_type_code", DbType.AnsiStringFixedLength, tier.client_type_code);
                db.AddInParameter(cmd, "@scoring", DbType.Double, tier.scoring);
                db.AddInParameter(cmd, "@loan_cycle", DbType.Int32, tier.loan_cycle);
                db.AddInParameter(cmd, "@active", DbType.Boolean, tier.active);
                db.AddInParameter(cmd, "@other_org_name", DbType.String, tier.other_org_name);
                db.AddInParameter(cmd, "@other_org_amount", DbType.Currency, tier.other_org_amount);
                db.AddInParameter(cmd, "@other_org_debts", DbType.Currency, tier.other_org_debts);
                db.AddInParameter(cmd, "@district_id", DbType.Int32, tier.district_id);
                db.AddInParameter(cmd, "@city", DbType.String, tier.city);
                db.AddInParameter(cmd, "@address", DbType.String, tier.address);
                db.AddInParameter(cmd, "@secondary_district_id", DbType.Int32, tier.secondary_district_id);
                db.AddInParameter(cmd, "@secondary_city", DbType.String, tier.secondary_city);
                db.AddInParameter(cmd, "@secondary_address", DbType.String, tier.secondary_address);
                db.AddInParameter(cmd, "@cash_input_voucher_number", DbType.Int32, tier.cash_input_voucher_number);
                db.AddInParameter(cmd, "@cash_output_voucher_number", DbType.Int32, tier.cash_output_voucher_number);
                db.AddInParameter(cmd, "@creation_date", DbType.DateTime, tier.creation_date);
                db.AddInParameter(cmd, "@home_phone", DbType.AnsiString, tier.home_phone);
                db.AddInParameter(cmd, "@personal_phone", DbType.AnsiString, tier.personal_phone);
                db.AddInParameter(cmd, "@secondary_home_phone", DbType.AnsiString, tier.secondary_home_phone);
                db.AddInParameter(cmd, "@secondary_personal_phone", DbType.AnsiString, tier.secondary_personal_phone);
                db.AddInParameter(cmd, "@e_mail", DbType.String, tier.e_mail);
                db.AddInParameter(cmd, "@secondary_e_mail", DbType.String, tier.secondary_e_mail);
                db.AddInParameter(cmd, "@status", DbType.Int16, tier.status);
                db.AddInParameter(cmd, "@other_org_comment", DbType.String, tier.other_org_comment);
                db.AddInParameter(cmd, "@sponsor1", DbType.String, tier.sponsor1);
                db.AddInParameter(cmd, "@sponsor1_comment", DbType.String, tier.sponsor1_comment);
                db.AddInParameter(cmd, "@sponsor2", DbType.String, tier.sponsor2);
                db.AddInParameter(cmd, "@sponsor2_comment", DbType.String, tier.sponsor2_comment);
                db.AddInParameter(cmd, "@follow_up_comment", DbType.String, tier.follow_up_comment);
                db.AddInParameter(cmd, "@home_type", DbType.String, tier.home_type);
                db.AddInParameter(cmd, "@secondary_homeType", DbType.String, tier.secondary_homeType);
                db.AddInParameter(cmd, "@zipCode", DbType.String, tier.zipCode);
                db.AddInParameter(cmd, "@secondary_zipCode", DbType.String, tier.secondary_zipCode);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, tier.branch_id);

                // Get the primary key value.
                tier.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return tier;
        }

        /// <summary>
        /// Updates an existing row in the Tiers table.
        /// </summary>
        /// <param name="tier">A Tier entity object.</param>
        public void UpdateById(Tier tier)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Tiers " +
                "SET " +
                    "[client_type_code]=@client_type_code, " +
                    "[scoring]=@scoring, " +
                    "[loan_cycle]=@loan_cycle, " +
                    "[active]=@active, " +
                    "[other_org_name]=@other_org_name, " +
                    "[other_org_amount]=@other_org_amount, " +
                    "[other_org_debts]=@other_org_debts, " +
                    "[district_id]=@district_id, " +
                    "[city]=@city, " +
                    "[address]=@address, " +
                    "[secondary_district_id]=@secondary_district_id, " +
                    "[secondary_city]=@secondary_city, " +
                    "[secondary_address]=@secondary_address, " +
                    "[cash_input_voucher_number]=@cash_input_voucher_number, " +
                    "[cash_output_voucher_number]=@cash_output_voucher_number, " +
                    "[creation_date]=@creation_date, " +
                    "[home_phone]=@home_phone, " +
                    "[personal_phone]=@personal_phone, " +
                    "[secondary_home_phone]=@secondary_home_phone, " +
                    "[secondary_personal_phone]=@secondary_personal_phone, " +
                    "[e_mail]=@e_mail, " +
                    "[secondary_e_mail]=@secondary_e_mail, " +
                    "[status]=@status, " +
                    "[other_org_comment]=@other_org_comment, " +
                    "[sponsor1]=@sponsor1, " +
                    "[sponsor1_comment]=@sponsor1_comment, " +
                    "[sponsor2]=@sponsor2, " +
                    "[sponsor2_comment]=@sponsor2_comment, " +
                    "[follow_up_comment]=@follow_up_comment, " +
                    "[home_type]=@home_type, " +
                    "[secondary_homeType]=@secondary_homeType, " +
                    "[zipCode]=@zipCode, " +
                    "[secondary_zipCode]=@secondary_zipCode, " +
                    "[branch_id]=@branch_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@client_type_code", DbType.AnsiStringFixedLength, tier.client_type_code);
                db.AddInParameter(cmd, "@scoring", DbType.Double, tier.scoring);
                db.AddInParameter(cmd, "@loan_cycle", DbType.Int32, tier.loan_cycle);
                db.AddInParameter(cmd, "@active", DbType.Boolean, tier.active);
                db.AddInParameter(cmd, "@other_org_name", DbType.String, tier.other_org_name);
                db.AddInParameter(cmd, "@other_org_amount", DbType.Currency, tier.other_org_amount);
                db.AddInParameter(cmd, "@other_org_debts", DbType.Currency, tier.other_org_debts);
                db.AddInParameter(cmd, "@district_id", DbType.Int32, tier.district_id);
                db.AddInParameter(cmd, "@city", DbType.String, tier.city);
                db.AddInParameter(cmd, "@address", DbType.String, tier.address);
                db.AddInParameter(cmd, "@secondary_district_id", DbType.Int32, tier.secondary_district_id);
                db.AddInParameter(cmd, "@secondary_city", DbType.String, tier.secondary_city);
                db.AddInParameter(cmd, "@secondary_address", DbType.String, tier.secondary_address);
                db.AddInParameter(cmd, "@cash_input_voucher_number", DbType.Int32, tier.cash_input_voucher_number);
                db.AddInParameter(cmd, "@cash_output_voucher_number", DbType.Int32, tier.cash_output_voucher_number);
                db.AddInParameter(cmd, "@creation_date", DbType.DateTime, tier.creation_date);
                db.AddInParameter(cmd, "@home_phone", DbType.AnsiString, tier.home_phone);
                db.AddInParameter(cmd, "@personal_phone", DbType.AnsiString, tier.personal_phone);
                db.AddInParameter(cmd, "@secondary_home_phone", DbType.AnsiString, tier.secondary_home_phone);
                db.AddInParameter(cmd, "@secondary_personal_phone", DbType.AnsiString, tier.secondary_personal_phone);
                db.AddInParameter(cmd, "@e_mail", DbType.String, tier.e_mail);
                db.AddInParameter(cmd, "@secondary_e_mail", DbType.String, tier.secondary_e_mail);
                db.AddInParameter(cmd, "@status", DbType.Int16, tier.status);
                db.AddInParameter(cmd, "@other_org_comment", DbType.String, tier.other_org_comment);
                db.AddInParameter(cmd, "@sponsor1", DbType.String, tier.sponsor1);
                db.AddInParameter(cmd, "@sponsor1_comment", DbType.String, tier.sponsor1_comment);
                db.AddInParameter(cmd, "@sponsor2", DbType.String, tier.sponsor2);
                db.AddInParameter(cmd, "@sponsor2_comment", DbType.String, tier.sponsor2_comment);
                db.AddInParameter(cmd, "@follow_up_comment", DbType.String, tier.follow_up_comment);
                db.AddInParameter(cmd, "@home_type", DbType.String, tier.home_type);
                db.AddInParameter(cmd, "@secondary_homeType", DbType.String, tier.secondary_homeType);
                db.AddInParameter(cmd, "@zipCode", DbType.String, tier.zipCode);
                db.AddInParameter(cmd, "@secondary_zipCode", DbType.String, tier.secondary_zipCode);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, tier.branch_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, tier.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Tiers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Tiers " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Tiers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Tier object with data populated from the database.</returns>
        public Tier SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [client_type_code], [scoring], [loan_cycle], [active], [other_org_name], [other_org_amount]" +
                        ", [other_org_debts], [district_id], [city], [address], [secondary_district_id], [secondary_city]" +
                        ", [secondary_address], [cash_input_voucher_number], [cash_output_voucher_number], [creation_date]" +
                        ", [home_phone], [personal_phone], [secondary_home_phone], [secondary_personal_phone]" +
                        ", [e_mail], [secondary_e_mail], [status], [other_org_comment], [sponsor1], [sponsor1_comment]" +
                        ", [sponsor2], [sponsor2_comment], [follow_up_comment], [home_type], [secondary_homeType]" +
                        ", [zipCode], [secondary_zipCode], [branch_id] " +
                "FROM dbo.Tiers  " +
                "WHERE [id]=@id ";

            Tier tier = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Tier
                        tier = new Tier();

                        // Read values.
                        tier.id = base.GetDataValue<int>(dr, "id");
                        tier.client_type_code = Convert.ToChar(base.GetDataValue<string>(dr, "client_type_code"));
                        tier.scoring = base.GetDataValue<double>(dr, "scoring");
                        tier.loan_cycle = base.GetDataValue<int>(dr, "loan_cycle");
                        tier.active = base.GetDataValue<bool>(dr, "active");
                        tier.other_org_name = base.GetDataValue<string>(dr, "other_org_name");
                        tier.other_org_amount = base.GetDataValue<decimal>(dr, "other_org_amount");
                        tier.other_org_debts = base.GetDataValue<decimal>(dr, "other_org_debts");
                        tier.district_id = base.GetDataValue<int>(dr, "district_id");
                        tier.city = base.GetDataValue<string>(dr, "city");
                        tier.address = base.GetDataValue<string>(dr, "address");
                        tier.secondary_district_id = base.GetDataValue<int>(dr, "secondary_district_id");
                        tier.secondary_city = base.GetDataValue<string>(dr, "secondary_city");
                        tier.secondary_address = base.GetDataValue<string>(dr, "secondary_address");
                        tier.cash_input_voucher_number = base.GetDataValue<int>(dr, "cash_input_voucher_number");
                        tier.cash_output_voucher_number = base.GetDataValue<int>(dr, "cash_output_voucher_number");
                        tier.creation_date = base.GetDataValue<DateTime>(dr, "creation_date");
                        tier.home_phone = base.GetDataValue<string>(dr, "home_phone");
                        tier.personal_phone = base.GetDataValue<string>(dr, "personal_phone");
                        tier.secondary_home_phone = base.GetDataValue<string>(dr, "secondary_home_phone");
                        tier.secondary_personal_phone = base.GetDataValue<string>(dr, "secondary_personal_phone");
                        tier.e_mail = base.GetDataValue<string>(dr, "e_mail");
                        tier.secondary_e_mail = base.GetDataValue<string>(dr, "secondary_e_mail");
                        tier.status = base.GetDataValue<short>(dr, "status");
                        tier.other_org_comment = base.GetDataValue<string>(dr, "other_org_comment");
                        tier.sponsor1 = base.GetDataValue<string>(dr, "sponsor1");
                        tier.sponsor1_comment = base.GetDataValue<string>(dr, "sponsor1_comment");
                        tier.sponsor2 = base.GetDataValue<string>(dr, "sponsor2");
                        tier.sponsor2_comment = base.GetDataValue<string>(dr, "sponsor2_comment");
                        tier.follow_up_comment = base.GetDataValue<string>(dr, "follow_up_comment");
                        tier.home_type = base.GetDataValue<string>(dr, "home_type");
                        tier.secondary_homeType = base.GetDataValue<string>(dr, "secondary_homeType");
                        tier.zipCode = base.GetDataValue<string>(dr, "zipCode");
                        tier.secondary_zipCode = base.GetDataValue<string>(dr, "secondary_zipCode");
                        tier.branch_id = base.GetDataValue<int>(dr, "branch_id");
                    }
                }
            }

            return tier;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Tiers table.
        /// </summary>
        /// <returns>A collection of Tier objects.</returns>		
        public List<Tier> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [client_type_code], [scoring], [loan_cycle], [active], [other_org_name], [other_org_amount]" +
                        ", [other_org_debts], [district_id], [city], [address], [secondary_district_id], [secondary_city]" +
                        ", [secondary_address], [cash_input_voucher_number], [cash_output_voucher_number], [creation_date]" +
                        ", [home_phone], [personal_phone], [secondary_home_phone], [secondary_personal_phone]" +
                        ", [e_mail], [secondary_e_mail], [status], [other_org_comment], [sponsor1], [sponsor1_comment]" +
                        ", [sponsor2], [sponsor2_comment], [follow_up_comment], [home_type], [secondary_homeType]" +
                        ", [zipCode], [secondary_zipCode], [branch_id] " +
                "FROM dbo.Tiers ";

            List<Tier> result = new List<Tier>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Tier
                        Tier tier = new Tier();

                        // Read values.
                        tier.id = base.GetDataValue<int>(dr, "id");
                        tier.client_type_code = Convert.ToChar(base.GetDataValue<string>(dr, "client_type_code"));
                        tier.scoring = base.GetDataValue<double>(dr, "scoring");
                        tier.loan_cycle = base.GetDataValue<int>(dr, "loan_cycle");
                        tier.active = base.GetDataValue<bool>(dr, "active");
                        tier.other_org_name = base.GetDataValue<string>(dr, "other_org_name");
                        tier.other_org_amount = base.GetDataValue<decimal>(dr, "other_org_amount");
                        tier.other_org_debts = base.GetDataValue<decimal>(dr, "other_org_debts");
                        tier.district_id = base.GetDataValue<int>(dr, "district_id");
                        tier.city = base.GetDataValue<string>(dr, "city");
                        tier.address = base.GetDataValue<string>(dr, "address");
                        tier.secondary_district_id = base.GetDataValue<int>(dr, "secondary_district_id");
                        tier.secondary_city = base.GetDataValue<string>(dr, "secondary_city");
                        tier.secondary_address = base.GetDataValue<string>(dr, "secondary_address");
                        tier.cash_input_voucher_number = base.GetDataValue<int>(dr, "cash_input_voucher_number");
                        tier.cash_output_voucher_number = base.GetDataValue<int>(dr, "cash_output_voucher_number");
                        tier.creation_date = base.GetDataValue<DateTime>(dr, "creation_date");
                        tier.home_phone = base.GetDataValue<string>(dr, "home_phone");
                        tier.personal_phone = base.GetDataValue<string>(dr, "personal_phone");
                        tier.secondary_home_phone = base.GetDataValue<string>(dr, "secondary_home_phone");
                        tier.secondary_personal_phone = base.GetDataValue<string>(dr, "secondary_personal_phone");
                        tier.e_mail = base.GetDataValue<string>(dr, "e_mail");
                        tier.secondary_e_mail = base.GetDataValue<string>(dr, "secondary_e_mail");
                        tier.status = base.GetDataValue<short>(dr, "status");
                        tier.other_org_comment = base.GetDataValue<string>(dr, "other_org_comment");
                        tier.sponsor1 = base.GetDataValue<string>(dr, "sponsor1");
                        tier.sponsor1_comment = base.GetDataValue<string>(dr, "sponsor1_comment");
                        tier.sponsor2 = base.GetDataValue<string>(dr, "sponsor2");
                        tier.sponsor2_comment = base.GetDataValue<string>(dr, "sponsor2_comment");
                        tier.follow_up_comment = base.GetDataValue<string>(dr, "follow_up_comment");
                        tier.home_type = base.GetDataValue<string>(dr, "home_type");
                        tier.secondary_homeType = base.GetDataValue<string>(dr, "secondary_homeType");
                        tier.zipCode = base.GetDataValue<string>(dr, "zipCode");
                        tier.secondary_zipCode = base.GetDataValue<string>(dr, "secondary_zipCode");
                        tier.branch_id = base.GetDataValue<int>(dr, "branch_id");

                        // Add to List.
                        result.Add(tier);
                    }
                }
            }

            return result;
        }
    }
}

