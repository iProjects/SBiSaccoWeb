//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// RepaymentEvents data access component. Manages CRUD operations for the RepaymentEvents table.
    /// </summary>
    public partial class RepaymentEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the RepaymentEvents table.
        /// </summary>
        /// <param name="repaymentEvent">A RepaymentEvent object.</param>
        /// <returns>An updated RepaymentEvent object.</returns>
        public RepaymentEvent Create(RepaymentEvent repaymentEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.RepaymentEvents ([id], [past_due_days], [principal], [interests], [installment_number], [commissions], [penalties], [calculated_penalties], [written_off_penalties], [unpaid_penalties]) " +
                "VALUES(@id, @past_due_days, @principal, @interests, @installment_number, @commissions, @penalties, @calculated_penalties, @written_off_penalties, @unpaid_penalties);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, repaymentEvent.id);
                db.AddInParameter(cmd, "@past_due_days", DbType.Int32, repaymentEvent.past_due_days);
                db.AddInParameter(cmd, "@principal", DbType.Currency, repaymentEvent.principal);
                db.AddInParameter(cmd, "@interests", DbType.Currency, repaymentEvent.interests);
                db.AddInParameter(cmd, "@installment_number", DbType.Int32, repaymentEvent.installment_number);
                db.AddInParameter(cmd, "@commissions", DbType.Currency, repaymentEvent.commissions);
                db.AddInParameter(cmd, "@penalties", DbType.Currency, repaymentEvent.penalties);
                db.AddInParameter(cmd, "@calculated_penalties", DbType.Currency, repaymentEvent.calculated_penalties);
                db.AddInParameter(cmd, "@written_off_penalties", DbType.Currency, repaymentEvent.written_off_penalties);
                db.AddInParameter(cmd, "@unpaid_penalties", DbType.Currency, repaymentEvent.unpaid_penalties);

                db.ExecuteNonQuery(cmd);
            }

            return repaymentEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the RepaymentEvents table.
        /// </summary>
        /// <returns>A collection of RepaymentEvent objects.</returns>		
        public List<RepaymentEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [past_due_days], [principal], [interests], [installment_number], [commissions]" +
                        ", [penalties], [calculated_penalties], [written_off_penalties], [unpaid_penalties]" +
                        " " +
                "FROM dbo.RepaymentEvents ";

            List<RepaymentEvent> result = new List<RepaymentEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new RepaymentEvent
                        RepaymentEvent repaymentEvent = new RepaymentEvent();

                        // Read values.
                        repaymentEvent.id = base.GetDataValue<int>(dr, "id");
                        repaymentEvent.past_due_days = base.GetDataValue<int>(dr, "past_due_days");
                        repaymentEvent.principal = base.GetDataValue<decimal>(dr, "principal");
                        repaymentEvent.interests = base.GetDataValue<decimal>(dr, "interests");
                        repaymentEvent.installment_number = base.GetDataValue<int>(dr, "installment_number");
                        repaymentEvent.commissions = base.GetDataValue<decimal>(dr, "commissions");
                        repaymentEvent.penalties = base.GetDataValue<decimal>(dr, "penalties");
                        repaymentEvent.calculated_penalties = base.GetDataValue<decimal>(dr, "calculated_penalties");
                        repaymentEvent.written_off_penalties = base.GetDataValue<decimal>(dr, "written_off_penalties");
                        repaymentEvent.unpaid_penalties = base.GetDataValue<decimal>(dr, "unpaid_penalties");

                        // Add to List.
                        result.Add(repaymentEvent);
                    }
                }
            }

            return result;
        }
    }
}

