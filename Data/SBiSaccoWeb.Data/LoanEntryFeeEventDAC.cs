//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// LoanEntryFeeEvents data access component. Manages CRUD operations for the LoanEntryFeeEvents table.
    /// </summary>
    public partial class LoanEntryFeeEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the LoanEntryFeeEvents table.
        /// </summary>
        /// <param name="loanEntryFeeEvent">A LoanEntryFeeEvent object.</param>
        /// <returns>An updated LoanEntryFeeEvent object.</returns>
        public LoanEntryFeeEvent Create(LoanEntryFeeEvent loanEntryFeeEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.LoanEntryFeeEvents ([id], [fee], [disbursement_event_id]) " +
                "VALUES(@id, @fee, @disbursement_event_id);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, loanEntryFeeEvent.id);
                db.AddInParameter(cmd, "@fee", DbType.Currency, loanEntryFeeEvent.fee);
                db.AddInParameter(cmd, "@disbursement_event_id", DbType.Int32, loanEntryFeeEvent.disbursement_event_id);

                db.ExecuteNonQuery(cmd);
            }

            return loanEntryFeeEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the LoanEntryFeeEvents table.
        /// </summary>
        /// <returns>A collection of LoanEntryFeeEvent objects.</returns>		
        public List<LoanEntryFeeEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [fee], [disbursement_event_id] " +
                "FROM dbo.LoanEntryFeeEvents ";

            List<LoanEntryFeeEvent> result = new List<LoanEntryFeeEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new LoanEntryFeeEvent
                        LoanEntryFeeEvent loanEntryFeeEvent = new LoanEntryFeeEvent();

                        // Read values.
                        loanEntryFeeEvent.id = base.GetDataValue<int>(dr, "id");
                        loanEntryFeeEvent.fee = base.GetDataValue<decimal>(dr, "fee");
                        loanEntryFeeEvent.disbursement_event_id = base.GetDataValue<int>(dr, "disbursement_event_id");

                        // Add to List.
                        result.Add(loanEntryFeeEvent);
                    }
                }
            }

            return result;
        }
    }
}

