//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// TrancheEvents data access component. Manages CRUD operations for the TrancheEvents table.
    /// </summary>
    public partial class TrancheEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TrancheEvents table.
        /// </summary>
        /// <param name="trancheEvent">A TrancheEvent object.</param>
        /// <returns>An updated TrancheEvent object.</returns>
        public TrancheEvent Create(TrancheEvent trancheEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TrancheEvents ([id], [amount], [maturity], [start_date], [interest_rate], [started_from_installment], [applied_new_interest]) " +
                "VALUES(@id, @amount, @maturity, @start_date, @interest_rate, @started_from_installment, @applied_new_interest);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, trancheEvent.id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, trancheEvent.amount);
                db.AddInParameter(cmd, "@maturity", DbType.Int32, trancheEvent.maturity);
                db.AddInParameter(cmd, "@start_date", DbType.DateTime, trancheEvent.start_date);
                db.AddInParameter(cmd, "@interest_rate", DbType.Currency, trancheEvent.interest_rate);
                db.AddInParameter(cmd, "@started_from_installment", DbType.Int32, trancheEvent.started_from_installment);
                db.AddInParameter(cmd, "@applied_new_interest", DbType.Boolean, trancheEvent.applied_new_interest);

                db.ExecuteNonQuery(cmd);
            }

            return trancheEvent;
        }

        /// <summary>
        /// Updates an existing row in the TrancheEvents table.
        /// </summary>
        /// <param name="trancheEvent">A TrancheEvent entity object.</param>
        public void UpdateById(TrancheEvent trancheEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TrancheEvents " +
                "SET " +
                    "[amount]=@amount, " +
                    "[maturity]=@maturity, " +
                    "[start_date]=@start_date, " +
                    "[interest_rate]=@interest_rate, " +
                    "[started_from_installment]=@started_from_installment, " +
                    "[applied_new_interest]=@applied_new_interest " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@amount", DbType.Currency, trancheEvent.amount);
                db.AddInParameter(cmd, "@maturity", DbType.Int32, trancheEvent.maturity);
                db.AddInParameter(cmd, "@start_date", DbType.DateTime, trancheEvent.start_date);
                db.AddInParameter(cmd, "@interest_rate", DbType.Currency, trancheEvent.interest_rate);
                db.AddInParameter(cmd, "@started_from_installment", DbType.Int32, trancheEvent.started_from_installment);
                db.AddInParameter(cmd, "@applied_new_interest", DbType.Boolean, trancheEvent.applied_new_interest);
                db.AddInParameter(cmd, "@id", DbType.Int32, trancheEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TrancheEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TrancheEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TrancheEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A TrancheEvent object with data populated from the database.</returns>
        public TrancheEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [amount], [maturity], [start_date], [interest_rate], [started_from_installment]" +
                        ", [applied_new_interest] " +
                "FROM dbo.TrancheEvents  " +
                "WHERE [id]=@id ";

            TrancheEvent trancheEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TrancheEvent
                        trancheEvent = new TrancheEvent();

                        // Read values.
                        trancheEvent.id = base.GetDataValue<int>(dr, "id");
                        trancheEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        trancheEvent.maturity = base.GetDataValue<int>(dr, "maturity");
                        trancheEvent.start_date = base.GetDataValue<DateTime>(dr, "start_date");
                        trancheEvent.interest_rate = base.GetDataValue<decimal>(dr, "interest_rate");
                        trancheEvent.started_from_installment = base.GetDataValue<int>(dr, "started_from_installment");
                        trancheEvent.applied_new_interest = base.GetDataValue<bool>(dr, "applied_new_interest");
                    }
                }
            }

            return trancheEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TrancheEvents table.
        /// </summary>
        /// <returns>A collection of TrancheEvent objects.</returns>		
        public List<TrancheEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [amount], [maturity], [start_date], [interest_rate], [started_from_installment]" +
                        ", [applied_new_interest] " +
                "FROM dbo.TrancheEvents ";

            List<TrancheEvent> result = new List<TrancheEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TrancheEvent
                        TrancheEvent trancheEvent = new TrancheEvent();

                        // Read values.
                        trancheEvent.id = base.GetDataValue<int>(dr, "id");
                        trancheEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        trancheEvent.maturity = base.GetDataValue<int>(dr, "maturity");
                        trancheEvent.start_date = base.GetDataValue<DateTime>(dr, "start_date");
                        trancheEvent.interest_rate = base.GetDataValue<decimal>(dr, "interest_rate");
                        trancheEvent.started_from_installment = base.GetDataValue<int>(dr, "started_from_installment");
                        trancheEvent.applied_new_interest = base.GetDataValue<bool>(dr, "applied_new_interest");

                        // Add to List.
                        result.Add(trancheEvent);
                    }
                }
            }

            return result;
        }
    }
}

