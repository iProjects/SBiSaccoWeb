//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// VillagesPersons data access component. Manages CRUD operations for the VillagesPersons table.
    /// </summary>
    public partial class VillagesPersonDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the VillagesPersons table.
        /// </summary>
        /// <param name="villagesPerson">A VillagesPerson object.</param>
        /// <returns>An updated VillagesPerson object.</returns>
        public VillagesPerson Create(VillagesPerson villagesPerson)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.VillagesPersons ([village_id], [person_id], [joined_date], [left_date], [is_leader], [currently_in]) " +
                "VALUES(@village_id, @person_id, @joined_date, @left_date, @is_leader, @currently_in); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@village_id", DbType.Int32, villagesPerson.village_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, villagesPerson.person_id);
                db.AddInParameter(cmd, "@joined_date", DbType.DateTime, villagesPerson.joined_date);
                db.AddInParameter(cmd, "@left_date", DbType.DateTime, villagesPerson.left_date);
                db.AddInParameter(cmd, "@is_leader", DbType.Boolean, villagesPerson.is_leader);
                db.AddInParameter(cmd, "@currently_in", DbType.Boolean, villagesPerson.currently_in);

                // Get the primary key value.
                villagesPerson.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return villagesPerson;
        }

        /// <summary>
        /// Updates an existing row in the VillagesPersons table.
        /// </summary>
        /// <param name="villagesPerson">A VillagesPerson entity object.</param>
        public void UpdateById(VillagesPerson villagesPerson)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.VillagesPersons " +
                "SET " +
                    "[joined_date]=@joined_date, " +
                    "[left_date]=@left_date, " +
                    "[is_leader]=@is_leader, " +
                    "[currently_in]=@currently_in " +
                "WHERE [village_id]=@village_id " +
                      "AND [person_id]=@person_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@joined_date", DbType.DateTime, villagesPerson.joined_date);
                db.AddInParameter(cmd, "@left_date", DbType.DateTime, villagesPerson.left_date);
                db.AddInParameter(cmd, "@is_leader", DbType.Boolean, villagesPerson.is_leader);
                db.AddInParameter(cmd, "@currently_in", DbType.Boolean, villagesPerson.currently_in);
                db.AddInParameter(cmd, "@village_id", DbType.Int32, villagesPerson.village_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, villagesPerson.person_id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the VillagesPersons table.
        /// </summary>
        /// <param name="village_id">A village_id value.</param>
        public void DeleteById(int village_id)
        {
            const string SQL_STATEMENT = "DELETE dbo.VillagesPersons " +
                                         "WHERE [village_id]=@village_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@village_id", DbType.Int32, village_id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the VillagesPersons table.
        /// </summary>
        /// <param name="village_id">A village_id value.</param>
        /// <param name="person_id">A person_id value.</param>
        /// <returns>A VillagesPerson object with data populated from the database.</returns>
        public VillagesPerson SelectById(int village_id, int person_id)
        {
            const string SQL_STATEMENT =
                "SELECT [village_id], [person_id], [joined_date], [left_date], [is_leader], [currently_in]" +
                        ", [id] " +
                "FROM dbo.VillagesPersons  " +
                "WHERE [village_id]=@village_id " +
                      "AND [person_id]=@person_id ";

            VillagesPerson villagesPerson = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@village_id", DbType.Int32, village_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, person_id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new VillagesPerson
                        villagesPerson = new VillagesPerson();

                        // Read values.
                        villagesPerson.village_id = base.GetDataValue<int>(dr, "village_id");
                        villagesPerson.person_id = base.GetDataValue<int>(dr, "person_id");
                        villagesPerson.joined_date = base.GetDataValue<DateTime>(dr, "joined_date");
                        villagesPerson.left_date = base.GetDataValue<DateTime>(dr, "left_date");
                        villagesPerson.is_leader = base.GetDataValue<bool>(dr, "is_leader");
                        villagesPerson.currently_in = base.GetDataValue<bool>(dr, "currently_in");
                        villagesPerson.id = base.GetDataValue<int>(dr, "id");
                    }
                }
            }

            return villagesPerson;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the VillagesPersons table.
        /// </summary>
        /// <returns>A collection of VillagesPerson objects.</returns>		
        public List<VillagesPerson> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [village_id], [person_id], [joined_date], [left_date], [is_leader], [currently_in]" +
                        ", [id] " +
                "FROM dbo.VillagesPersons ";

            List<VillagesPerson> result = new List<VillagesPerson>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new VillagesPerson
                        VillagesPerson villagesPerson = new VillagesPerson();

                        // Read values.
                        villagesPerson.village_id = base.GetDataValue<int>(dr, "village_id");
                        villagesPerson.person_id = base.GetDataValue<int>(dr, "person_id");
                        villagesPerson.joined_date = base.GetDataValue<DateTime>(dr, "joined_date");
                        villagesPerson.left_date = base.GetDataValue<DateTime>(dr, "left_date");
                        villagesPerson.is_leader = base.GetDataValue<bool>(dr, "is_leader");
                        villagesPerson.currently_in = base.GetDataValue<bool>(dr, "currently_in");
                        villagesPerson.id = base.GetDataValue<int>(dr, "id");

                        // Add to List.
                        result.Add(villagesPerson);
                    }
                }
            }

            return result;
        }
    }
}

