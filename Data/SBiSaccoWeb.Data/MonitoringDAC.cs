//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Monitoring data access component. Manages CRUD operations for the Monitoring table.
    /// </summary>
    public partial class MonitoringDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Monitoring table.
        /// </summary>
        /// <param name="monitoring">A Monitoring object.</param>
        /// <returns>An updated Monitoring object.</returns>
        public Monitoring Create(Monitoring monitoring)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Monitoring ([object_id], [date], [purpose], [monitor], [comment], [type]) " +
                "VALUES(@object_id, @date, @purpose, @monitor, @comment, @type); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@object_id", DbType.Int32, monitoring.object_id);
                db.AddInParameter(cmd, "@date", DbType.DateTime, monitoring.date);
                db.AddInParameter(cmd, "@purpose", DbType.String, monitoring.purpose);
                db.AddInParameter(cmd, "@monitor", DbType.String, monitoring.monitor);
                db.AddInParameter(cmd, "@comment", DbType.String, monitoring.comment);
                db.AddInParameter(cmd, "@type", DbType.Boolean, monitoring.type);

                // Get the primary key value.
                monitoring.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return monitoring;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Monitoring table.
        /// </summary>
        /// <returns>A collection of Monitoring objects.</returns>		
        public List<Monitoring> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [object_id], [date], [purpose], [monitor], [comment], [type] " +
                "FROM dbo.Monitoring ";

            List<Monitoring> result = new List<Monitoring>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Monitoring
                        Monitoring monitoring = new Monitoring();

                        // Read values.
                        monitoring.id = base.GetDataValue<int>(dr, "id");
                        monitoring.object_id = base.GetDataValue<int>(dr, "object_id");
                        monitoring.date = base.GetDataValue<DateTime>(dr, "date");
                        monitoring.purpose = base.GetDataValue<string>(dr, "purpose");
                        monitoring.monitor = base.GetDataValue<string>(dr, "monitor");
                        monitoring.comment = base.GetDataValue<string>(dr, "comment");
                        monitoring.type = base.GetDataValue<bool>(dr, "type");

                        // Add to List.
                        result.Add(monitoring);
                    }
                }
            }

            return result;
        }
    }
}

