//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// CollateralPropertyCollections data access component. Manages CRUD operations for the CollateralPropertyCollections table.
    /// </summary>
    public partial class CollateralPropertyCollectionDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the CollateralPropertyCollections table.
        /// </summary>
        /// <param name="collateralPropertyCollection">A CollateralPropertyCollection object.</param>
        /// <returns>An updated CollateralPropertyCollection object.</returns>
        public CollateralPropertyCollection Create(CollateralPropertyCollection collateralPropertyCollection)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.CollateralPropertyCollections ([property_id], [value]) " +
                "VALUES(@property_id, @value); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@property_id", DbType.Int32, collateralPropertyCollection.property_id);
                db.AddInParameter(cmd, "@value", DbType.String, collateralPropertyCollection.value);

                // Get the primary key value.
                collateralPropertyCollection.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return collateralPropertyCollection;
        }

        /// <summary>
        /// Updates an existing row in the CollateralPropertyCollections table.
        /// </summary>
        /// <param name="collateralPropertyCollection">A CollateralPropertyCollection entity object.</param>
        public void UpdateById(CollateralPropertyCollection collateralPropertyCollection)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.CollateralPropertyCollections " +
                "SET " +
                    "[property_id]=@property_id, " +
                    "[value]=@value " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@property_id", DbType.Int32, collateralPropertyCollection.property_id);
                db.AddInParameter(cmd, "@value", DbType.String, collateralPropertyCollection.value);
                db.AddInParameter(cmd, "@Id", DbType.Int32, collateralPropertyCollection.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the CollateralPropertyCollections table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.CollateralPropertyCollections " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the CollateralPropertyCollections table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A CollateralPropertyCollection object with data populated from the database.</returns>
        public CollateralPropertyCollection SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [property_id], [value] " +
                "FROM dbo.CollateralPropertyCollections  " +
                "WHERE [Id]=@Id ";

            CollateralPropertyCollection collateralPropertyCollection = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new CollateralPropertyCollection
                        collateralPropertyCollection = new CollateralPropertyCollection();

                        // Read values.
                        collateralPropertyCollection.Id = base.GetDataValue<int>(dr, "Id");
                        collateralPropertyCollection.property_id = base.GetDataValue<int>(dr, "property_id");
                        collateralPropertyCollection.value = base.GetDataValue<string>(dr, "value");
                    }
                }
            }

            return collateralPropertyCollection;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the CollateralPropertyCollections table.
        /// </summary>
        /// <returns>A collection of CollateralPropertyCollection objects.</returns>		
        public List<CollateralPropertyCollection> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [property_id], [value] " +
                "FROM dbo.CollateralPropertyCollections ";

            List<CollateralPropertyCollection> result = new List<CollateralPropertyCollection>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new CollateralPropertyCollection
                        CollateralPropertyCollection collateralPropertyCollection = new CollateralPropertyCollection();

                        // Read values.
                        collateralPropertyCollection.Id = base.GetDataValue<int>(dr, "Id");
                        collateralPropertyCollection.property_id = base.GetDataValue<int>(dr, "property_id");
                        collateralPropertyCollection.value = base.GetDataValue<string>(dr, "value");

                        // Add to List.
                        result.Add(collateralPropertyCollection);
                    }
                }
            }

            return result;
        }
    }
}

