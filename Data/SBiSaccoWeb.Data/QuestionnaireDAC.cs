//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Questionnaire data access component. Manages CRUD operations for the Questionnaire table.
    /// </summary>
    public partial class QuestionnaireDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Questionnaire table.
        /// </summary>
        /// <param name="questionnaire">A Questionnaire object.</param>
        /// <returns>An updated Questionnaire object.</returns>
        public Questionnaire Create(Questionnaire questionnaire)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Questionnaire ([Name], [Country], [Email], [PositionInCompony], [OtherMessages], [GrossPortfolio], [NumberOfClients], [PersonName], [Phone], [Skype], [PurposeOfUsage], [is_sent]) " +
                "VALUES(@Name, @Country, @Email, @PositionInCompony, @OtherMessages, @GrossPortfolio, @NumberOfClients, @PersonName, @Phone, @Skype, @PurposeOfUsage, @is_sent);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, questionnaire.Name);
                db.AddInParameter(cmd, "@Country", DbType.String, questionnaire.Country);
                db.AddInParameter(cmd, "@Email", DbType.String, questionnaire.Email);
                db.AddInParameter(cmd, "@PositionInCompony", DbType.String, questionnaire.PositionInCompony);
                db.AddInParameter(cmd, "@OtherMessages", DbType.String, questionnaire.OtherMessages);
                db.AddInParameter(cmd, "@GrossPortfolio", DbType.String, questionnaire.GrossPortfolio);
                db.AddInParameter(cmd, "@NumberOfClients", DbType.String, questionnaire.NumberOfClients);
                db.AddInParameter(cmd, "@PersonName", DbType.String, questionnaire.PersonName);
                db.AddInParameter(cmd, "@Phone", DbType.String, questionnaire.Phone);
                db.AddInParameter(cmd, "@Skype", DbType.String, questionnaire.Skype);
                db.AddInParameter(cmd, "@PurposeOfUsage", DbType.String, questionnaire.PurposeOfUsage);
                db.AddInParameter(cmd, "@is_sent", DbType.Boolean, questionnaire.is_sent);

                db.ExecuteNonQuery(cmd);
            }

            return questionnaire;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Questionnaire table.
        /// </summary>
        /// <returns>A collection of Questionnaire objects.</returns>		
        public List<Questionnaire> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Name], [Country], [Email], [PositionInCompony], [OtherMessages], [GrossPortfolio]" +
                        ", [NumberOfClients], [PersonName], [Phone], [Skype], [PurposeOfUsage], [is_sent] " +
                "FROM dbo.Questionnaire ";

            List<Questionnaire> result = new List<Questionnaire>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Questionnaire
                        Questionnaire questionnaire = new Questionnaire();

                        // Read values.
                        questionnaire.Name = base.GetDataValue<string>(dr, "Name");
                        questionnaire.Country = base.GetDataValue<string>(dr, "Country");
                        questionnaire.Email = base.GetDataValue<string>(dr, "Email");
                        questionnaire.PositionInCompony = base.GetDataValue<string>(dr, "PositionInCompony");
                        questionnaire.OtherMessages = base.GetDataValue<string>(dr, "OtherMessages");
                        questionnaire.GrossPortfolio = base.GetDataValue<string>(dr, "GrossPortfolio");
                        questionnaire.NumberOfClients = base.GetDataValue<string>(dr, "NumberOfClients");
                        questionnaire.PersonName = base.GetDataValue<string>(dr, "PersonName");
                        questionnaire.Phone = base.GetDataValue<string>(dr, "Phone");
                        questionnaire.Skype = base.GetDataValue<string>(dr, "Skype");
                        questionnaire.PurposeOfUsage = base.GetDataValue<string>(dr, "PurposeOfUsage");
                        questionnaire.is_sent = base.GetDataValue<bool>(dr, "is_sent");

                        // Add to List.
                        result.Add(questionnaire);
                    }
                }
            }

            return result;
        }
    }
}

