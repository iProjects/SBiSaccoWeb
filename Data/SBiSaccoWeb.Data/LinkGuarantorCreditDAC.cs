//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// LinkGuarantorCredit data access component. Manages CRUD operations for the LinkGuarantorCredit table.
    /// </summary>
    public partial class LinkGuarantorCreditDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the LinkGuarantorCredit table.
        /// </summary>
        /// <param name="linkGuarantorCredit">A LinkGuarantorCredit object.</param>
        /// <returns>An updated LinkGuarantorCredit object.</returns>
        public LinkGuarantorCredit Create(LinkGuarantorCredit linkGuarantorCredit)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.LinkGuarantorCredit ([tiers_id], [contract_id], [guarantee_amount], [guarantee_desc]) " +
                "VALUES(@tiers_id, @contract_id, @guarantee_amount, @guarantee_desc);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@tiers_id", DbType.Int32, linkGuarantorCredit.tiers_id);
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, linkGuarantorCredit.contract_id);
                db.AddInParameter(cmd, "@guarantee_amount", DbType.Currency, linkGuarantorCredit.guarantee_amount);
                db.AddInParameter(cmd, "@guarantee_desc", DbType.String, linkGuarantorCredit.guarantee_desc);

                db.ExecuteNonQuery(cmd);
            }

            return linkGuarantorCredit;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the LinkGuarantorCredit table.
        /// </summary>
        /// <returns>A collection of LinkGuarantorCredit objects.</returns>		
        public List<LinkGuarantorCredit> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [tiers_id], [contract_id], [guarantee_amount], [guarantee_desc] " +
                "FROM dbo.LinkGuarantorCredit ";

            List<LinkGuarantorCredit> result = new List<LinkGuarantorCredit>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new LinkGuarantorCredit
                        LinkGuarantorCredit linkGuarantorCredit = new LinkGuarantorCredit();

                        // Read values.
                        linkGuarantorCredit.tiers_id = base.GetDataValue<int>(dr, "tiers_id");
                        linkGuarantorCredit.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        linkGuarantorCredit.guarantee_amount = base.GetDataValue<decimal>(dr, "guarantee_amount");
                        linkGuarantorCredit.guarantee_desc = base.GetDataValue<string>(dr, "guarantee_desc");

                        // Add to List.
                        result.Add(linkGuarantorCredit);
                    }
                }
            }

            return result;
        }
    }
}

