//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// Groups data access component. Manages CRUD operations for the Groups table.
    /// </summary>
    public partial class GroupDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Groups table.
        /// </summary>
        /// <param name="group">A Group object.</param>
        /// <returns>An updated Group object.</returns>
        public Group Create(Group group)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Groups ([id], [name], [establishment_date], [meeting_day], [loan_officer_id]) " +
                "VALUES(@id, @name, @establishment_date, @meeting_day, @loan_officer_id);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, group.id);
                db.AddInParameter(cmd, "@name", DbType.String, group.name);
                db.AddInParameter(cmd, "@establishment_date", DbType.DateTime, group.establishment_date);
                db.AddInParameter(cmd, "@meeting_day", DbType.Int32, group.meeting_day);
                db.AddInParameter(cmd, "@loan_officer_id", DbType.Int32, group.loan_officer_id);

                db.ExecuteNonQuery(cmd);
            }

            return group;
        }

        /// <summary>
        /// Updates an existing row in the Groups table.
        /// </summary>
        /// <param name="group">A Group entity object.</param>
        public void UpdateById(Group group)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Groups " +
                "SET " +
                    "[name]=@name, " +
                    "[establishment_date]=@establishment_date, " +
                    "[meeting_day]=@meeting_day, " +
                    "[loan_officer_id]=@loan_officer_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, group.name);
                db.AddInParameter(cmd, "@establishment_date", DbType.DateTime, group.establishment_date);
                db.AddInParameter(cmd, "@meeting_day", DbType.Int32, group.meeting_day);
                db.AddInParameter(cmd, "@loan_officer_id", DbType.Int32, group.loan_officer_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, group.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Groups table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Groups " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Groups table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A Group object with data populated from the database.</returns>
        public Group SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [name], [establishment_date], [meeting_day], [loan_officer_id] " +
                "FROM dbo.Groups  " +
                "WHERE [id]=@id ";

            Group group = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Group
                        group = new Group();

                        // Read values.
                        group.id = base.GetDataValue<int>(dr, "id");
                        group.name = base.GetDataValue<string>(dr, "name");
                        group.establishment_date = base.GetDataValue<DateTime>(dr, "establishment_date");
                        group.meeting_day = base.GetDataValue<int>(dr, "meeting_day");
                        group.loan_officer_id = base.GetDataValue<int>(dr, "loan_officer_id");
                    }
                }
            }

            return group;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Groups table.
        /// </summary>
        /// <returns>A collection of Group objects.</returns>		
        public List<Group> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [name], [establishment_date], [meeting_day], [loan_officer_id] " +
                "FROM dbo.Groups ";

            List<Group> result = new List<Group>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Group
                        Group group = new Group();

                        // Read values.
                        group.id = base.GetDataValue<int>(dr, "id");
                        group.name = base.GetDataValue<string>(dr, "name");
                        group.establishment_date = base.GetDataValue<DateTime>(dr, "establishment_date");
                        group.meeting_day = base.GetDataValue<int>(dr, "meeting_day");
                        group.loan_officer_id = base.GetDataValue<int>(dr, "loan_officer_id");

                        // Add to List.
                        result.Add(group);
                    }
                }
            }

            return result;
        }
    }
}

