//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// AdvancedFields data access component. Manages CRUD operations for the AdvancedFields table.
    /// </summary>
    public partial class AdvancedFieldDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the AdvancedFields table.
        /// </summary>
        /// <param name="advancedField">A AdvancedField object.</param>
        /// <returns>An updated AdvancedField object.</returns>
        public AdvancedField Create(AdvancedField advancedField)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.AdvancedFields ([entity_id], [type_id], [name], [desc], [is_mandatory], [is_unique]) " +
                "VALUES(@entity_id, @type_id, @name, @desc, @is_mandatory, @is_unique); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@entity_id", DbType.Int32, advancedField.entity_id);
                db.AddInParameter(cmd, "@type_id", DbType.Int32, advancedField.type_id);
                db.AddInParameter(cmd, "@name", DbType.String, advancedField.name);
                db.AddInParameter(cmd, "@desc", DbType.String, advancedField.desc);
                db.AddInParameter(cmd, "@is_mandatory", DbType.Boolean, advancedField.is_mandatory);
                db.AddInParameter(cmd, "@is_unique", DbType.Boolean, advancedField.is_unique);

                // Get the primary key value.
                advancedField.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return advancedField;
        }

        /// <summary>
        /// Updates an existing row in the AdvancedFields table.
        /// </summary>
        /// <param name="advancedField">A AdvancedField entity object.</param>
        public void UpdateById(AdvancedField advancedField)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.AdvancedFields " +
                "SET " +
                    "[entity_id]=@entity_id, " +
                    "[type_id]=@type_id, " +
                    "[name]=@name, " +
                    "[desc]=@desc, " +
                    "[is_mandatory]=@is_mandatory, " +
                    "[is_unique]=@is_unique " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@entity_id", DbType.Int32, advancedField.entity_id);
                db.AddInParameter(cmd, "@type_id", DbType.Int32, advancedField.type_id);
                db.AddInParameter(cmd, "@name", DbType.String, advancedField.name);
                db.AddInParameter(cmd, "@desc", DbType.String, advancedField.desc);
                db.AddInParameter(cmd, "@is_mandatory", DbType.Boolean, advancedField.is_mandatory);
                db.AddInParameter(cmd, "@is_unique", DbType.Boolean, advancedField.is_unique);
                db.AddInParameter(cmd, "@id", DbType.Int32, advancedField.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the AdvancedFields table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.AdvancedFields " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the AdvancedFields table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A AdvancedField object with data populated from the database.</returns>
        public AdvancedField SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [entity_id], [type_id], [name], [desc], [is_mandatory], [is_unique] " +
                "FROM dbo.AdvancedFields  " +
                "WHERE [id]=@id ";

            AdvancedField advancedField = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new AdvancedField
                        advancedField = new AdvancedField();

                        // Read values.
                        advancedField.id = base.GetDataValue<int>(dr, "id");
                        advancedField.entity_id = base.GetDataValue<int>(dr, "entity_id");
                        advancedField.type_id = base.GetDataValue<int>(dr, "type_id");
                        advancedField.name = base.GetDataValue<string>(dr, "name");
                        advancedField.desc = base.GetDataValue<string>(dr, "desc");
                        advancedField.is_mandatory = base.GetDataValue<bool>(dr, "is_mandatory");
                        advancedField.is_unique = base.GetDataValue<bool>(dr, "is_unique");
                    }
                }
            }

            return advancedField;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the AdvancedFields table.
        /// </summary>
        /// <returns>A collection of AdvancedField objects.</returns>		
        public List<AdvancedField> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [entity_id], [type_id], [name], [desc], [is_mandatory], [is_unique] " +
                "FROM dbo.AdvancedFields ";

            List<AdvancedField> result = new List<AdvancedField>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new AdvancedField
                        AdvancedField advancedField = new AdvancedField();

                        // Read values.
                        advancedField.id = base.GetDataValue<int>(dr, "id");
                        advancedField.entity_id = base.GetDataValue<int>(dr, "entity_id");
                        advancedField.type_id = base.GetDataValue<int>(dr, "type_id");
                        advancedField.name = base.GetDataValue<string>(dr, "name");
                        advancedField.desc = base.GetDataValue<string>(dr, "desc");
                        advancedField.is_mandatory = base.GetDataValue<bool>(dr, "is_mandatory");
                        advancedField.is_unique = base.GetDataValue<bool>(dr, "is_unique");

                        // Add to List.
                        result.Add(advancedField);
                    }
                }
            }

            return result;
        }
    }
}

