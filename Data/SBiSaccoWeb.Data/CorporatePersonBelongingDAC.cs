//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// CorporatePersonBelonging data access component. Manages CRUD operations for the CorporatePersonBelonging table.
    /// </summary>
    public partial class CorporatePersonBelongingDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the CorporatePersonBelonging table.
        /// </summary>
        /// <param name="corporatePersonBelonging">A CorporatePersonBelonging object.</param>
        /// <returns>An updated CorporatePersonBelonging object.</returns>
        public CorporatePersonBelonging Create(CorporatePersonBelonging corporatePersonBelonging)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.CorporatePersonBelonging ([corporate_id], [person_id], [position]) " +
                "VALUES(@corporate_id, @person_id, @position);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@corporate_id", DbType.Int32, corporatePersonBelonging.corporate_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, corporatePersonBelonging.person_id);
                db.AddInParameter(cmd, "@position", DbType.String, corporatePersonBelonging.position);

                db.ExecuteNonQuery(cmd);
            }

            return corporatePersonBelonging;
        }

        /// <summary>
        /// Updates an existing row in the CorporatePersonBelonging table.
        /// </summary>
        /// <param name="corporatePersonBelonging">A CorporatePersonBelonging entity object.</param>
        public void UpdateById(CorporatePersonBelonging corporatePersonBelonging)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.CorporatePersonBelonging " +
                "SET " +
                    "[position]=@position " +
                "WHERE [corporate_id]=@corporate_id " +
                      "AND [person_id]=@person_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@position", DbType.String, corporatePersonBelonging.position);
                db.AddInParameter(cmd, "@corporate_id", DbType.Int32, corporatePersonBelonging.corporate_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, corporatePersonBelonging.person_id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the CorporatePersonBelonging table.
        /// </summary>
        /// <param name="corporate_id">A corporate_id value.</param>
        public void DeleteById(int corporate_id)
        {
            const string SQL_STATEMENT = "DELETE dbo.CorporatePersonBelonging " +
                                         "WHERE [corporate_id]=@corporate_id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@corporate_id", DbType.Int32, corporate_id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the CorporatePersonBelonging table.
        /// </summary>
        /// <param name="corporate_id">A corporate_id value.</param>
        /// <param name="person_id">A person_id value.</param>
        /// <returns>A CorporatePersonBelonging object with data populated from the database.</returns>
        public CorporatePersonBelonging SelectById(int corporate_id, int person_id)
        {
            const string SQL_STATEMENT =
                "SELECT [corporate_id], [person_id], [position] " +
                "FROM dbo.CorporatePersonBelonging  " +
                "WHERE [corporate_id]=@corporate_id " +
                      "AND [person_id]=@person_id ";

            CorporatePersonBelonging corporatePersonBelonging = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@corporate_id", DbType.Int32, corporate_id);
                db.AddInParameter(cmd, "@person_id", DbType.Int32, person_id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new CorporatePersonBelonging
                        corporatePersonBelonging = new CorporatePersonBelonging();

                        // Read values.
                        corporatePersonBelonging.corporate_id = base.GetDataValue<int>(dr, "corporate_id");
                        corporatePersonBelonging.person_id = base.GetDataValue<int>(dr, "person_id");
                        corporatePersonBelonging.position = base.GetDataValue<string>(dr, "position");
                    }
                }
            }

            return corporatePersonBelonging;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the CorporatePersonBelonging table.
        /// </summary>
        /// <returns>A collection of CorporatePersonBelonging objects.</returns>		
        public List<CorporatePersonBelonging> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [corporate_id], [person_id], [position] " +
                "FROM dbo.CorporatePersonBelonging ";

            List<CorporatePersonBelonging> result = new List<CorporatePersonBelonging>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new CorporatePersonBelonging
                        CorporatePersonBelonging corporatePersonBelonging = new CorporatePersonBelonging();

                        // Read values.
                        corporatePersonBelonging.corporate_id = base.GetDataValue<int>(dr, "corporate_id");
                        corporatePersonBelonging.person_id = base.GetDataValue<int>(dr, "person_id");
                        corporatePersonBelonging.position = base.GetDataValue<string>(dr, "position");

                        // Add to List.
                        result.Add(corporatePersonBelonging);
                    }
                }
            }

            return result;
        }
    }
}

