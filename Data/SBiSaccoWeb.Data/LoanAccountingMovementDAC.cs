//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// LoanAccountingMovements data access component. Manages CRUD operations for the LoanAccountingMovements table.
    /// </summary>
    public partial class LoanAccountingMovementDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the LoanAccountingMovements table.
        /// </summary>
        /// <param name="loanAccountingMovement">A LoanAccountingMovement object.</param>
        /// <returns>An updated LoanAccountingMovement object.</returns>
        public LoanAccountingMovement Create(LoanAccountingMovement loanAccountingMovement)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.LoanAccountingMovements ([contract_id], [debit_account_number_id], [credit_account_number_id], [amount], [event_id], [transaction_date], [export_date], [is_exported], [currency_id], [exchange_rate], [rule_id], [branch_id], [closure_id], [fiscal_year_id], [booking_type]) " +
                "VALUES(@contract_id, @debit_account_number_id, @credit_account_number_id, @amount, @event_id, @transaction_date, @export_date, @is_exported, @currency_id, @exchange_rate, @rule_id, @branch_id, @closure_id, @fiscal_year_id, @booking_type); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, loanAccountingMovement.contract_id);
                db.AddInParameter(cmd, "@debit_account_number_id", DbType.Int32, loanAccountingMovement.debit_account_number_id);
                db.AddInParameter(cmd, "@credit_account_number_id", DbType.Int32, loanAccountingMovement.credit_account_number_id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, loanAccountingMovement.amount);
                db.AddInParameter(cmd, "@event_id", DbType.Int32, loanAccountingMovement.event_id);
                db.AddInParameter(cmd, "@transaction_date", DbType.DateTime, loanAccountingMovement.transaction_date);
                db.AddInParameter(cmd, "@export_date", DbType.DateTime, loanAccountingMovement.export_date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, loanAccountingMovement.is_exported);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, loanAccountingMovement.currency_id);
                db.AddInParameter(cmd, "@exchange_rate", DbType.Double, loanAccountingMovement.exchange_rate);
                db.AddInParameter(cmd, "@rule_id", DbType.Int32, loanAccountingMovement.rule_id);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, loanAccountingMovement.branch_id);
                db.AddInParameter(cmd, "@closure_id", DbType.Int32, loanAccountingMovement.closure_id);
                db.AddInParameter(cmd, "@fiscal_year_id", DbType.Int32, loanAccountingMovement.fiscal_year_id);
                db.AddInParameter(cmd, "@booking_type", DbType.Int32, loanAccountingMovement.booking_type);

                // Get the primary key value.
                loanAccountingMovement.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return loanAccountingMovement;
        }

        /// <summary>
        /// Updates an existing row in the LoanAccountingMovements table.
        /// </summary>
        /// <param name="loanAccountingMovement">A LoanAccountingMovement entity object.</param>
        public void UpdateById(LoanAccountingMovement loanAccountingMovement)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.LoanAccountingMovements " +
                "SET " +
                    "[contract_id]=@contract_id, " +
                    "[debit_account_number_id]=@debit_account_number_id, " +
                    "[credit_account_number_id]=@credit_account_number_id, " +
                    "[amount]=@amount, " +
                    "[event_id]=@event_id, " +
                    "[transaction_date]=@transaction_date, " +
                    "[export_date]=@export_date, " +
                    "[is_exported]=@is_exported, " +
                    "[currency_id]=@currency_id, " +
                    "[exchange_rate]=@exchange_rate, " +
                    "[rule_id]=@rule_id, " +
                    "[branch_id]=@branch_id, " +
                    "[closure_id]=@closure_id, " +
                    "[fiscal_year_id]=@fiscal_year_id, " +
                    "[booking_type]=@booking_type " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@contract_id", DbType.Int32, loanAccountingMovement.contract_id);
                db.AddInParameter(cmd, "@debit_account_number_id", DbType.Int32, loanAccountingMovement.debit_account_number_id);
                db.AddInParameter(cmd, "@credit_account_number_id", DbType.Int32, loanAccountingMovement.credit_account_number_id);
                db.AddInParameter(cmd, "@amount", DbType.Currency, loanAccountingMovement.amount);
                db.AddInParameter(cmd, "@event_id", DbType.Int32, loanAccountingMovement.event_id);
                db.AddInParameter(cmd, "@transaction_date", DbType.DateTime, loanAccountingMovement.transaction_date);
                db.AddInParameter(cmd, "@export_date", DbType.DateTime, loanAccountingMovement.export_date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, loanAccountingMovement.is_exported);
                db.AddInParameter(cmd, "@currency_id", DbType.Int32, loanAccountingMovement.currency_id);
                db.AddInParameter(cmd, "@exchange_rate", DbType.Double, loanAccountingMovement.exchange_rate);
                db.AddInParameter(cmd, "@rule_id", DbType.Int32, loanAccountingMovement.rule_id);
                db.AddInParameter(cmd, "@branch_id", DbType.Int32, loanAccountingMovement.branch_id);
                db.AddInParameter(cmd, "@closure_id", DbType.Int32, loanAccountingMovement.closure_id);
                db.AddInParameter(cmd, "@fiscal_year_id", DbType.Int32, loanAccountingMovement.fiscal_year_id);
                db.AddInParameter(cmd, "@booking_type", DbType.Int32, loanAccountingMovement.booking_type);
                db.AddInParameter(cmd, "@id", DbType.Int32, loanAccountingMovement.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the LoanAccountingMovements table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.LoanAccountingMovements " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the LoanAccountingMovements table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A LoanAccountingMovement object with data populated from the database.</returns>
        public LoanAccountingMovement SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [contract_id], [debit_account_number_id], [credit_account_number_id], [amount]" +
                        ", [event_id], [transaction_date], [export_date], [is_exported], [currency_id], [exchange_rate]" +
                        ", [rule_id], [branch_id], [closure_id], [fiscal_year_id], [booking_type] " +
                "FROM dbo.LoanAccountingMovements  " +
                "WHERE [id]=@id ";

            LoanAccountingMovement loanAccountingMovement = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new LoanAccountingMovement
                        loanAccountingMovement = new LoanAccountingMovement();

                        // Read values.
                        loanAccountingMovement.id = base.GetDataValue<int>(dr, "id");
                        loanAccountingMovement.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        loanAccountingMovement.debit_account_number_id = base.GetDataValue<int>(dr, "debit_account_number_id");
                        loanAccountingMovement.credit_account_number_id = base.GetDataValue<int>(dr, "credit_account_number_id");
                        loanAccountingMovement.amount = base.GetDataValue<decimal>(dr, "amount");
                        loanAccountingMovement.event_id = base.GetDataValue<int>(dr, "event_id");
                        loanAccountingMovement.transaction_date = base.GetDataValue<DateTime>(dr, "transaction_date");
                        loanAccountingMovement.export_date = base.GetDataValue<DateTime>(dr, "export_date");
                        loanAccountingMovement.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        loanAccountingMovement.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        loanAccountingMovement.exchange_rate = base.GetDataValue<double>(dr, "exchange_rate");
                        loanAccountingMovement.rule_id = base.GetDataValue<int>(dr, "rule_id");
                        loanAccountingMovement.branch_id = base.GetDataValue<int>(dr, "branch_id");
                        loanAccountingMovement.closure_id = base.GetDataValue<int>(dr, "closure_id");
                        loanAccountingMovement.fiscal_year_id = base.GetDataValue<int>(dr, "fiscal_year_id");
                        loanAccountingMovement.booking_type = base.GetDataValue<int>(dr, "booking_type");
                    }
                }
            }

            return loanAccountingMovement;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the LoanAccountingMovements table.
        /// </summary>
        /// <returns>A collection of LoanAccountingMovement objects.</returns>		
        public List<LoanAccountingMovement> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [contract_id], [debit_account_number_id], [credit_account_number_id], [amount]" +
                        ", [event_id], [transaction_date], [export_date], [is_exported], [currency_id], [exchange_rate]" +
                        ", [rule_id], [branch_id], [closure_id], [fiscal_year_id], [booking_type] " +
                "FROM dbo.LoanAccountingMovements ";

            List<LoanAccountingMovement> result = new List<LoanAccountingMovement>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new LoanAccountingMovement
                        LoanAccountingMovement loanAccountingMovement = new LoanAccountingMovement();

                        // Read values.
                        loanAccountingMovement.id = base.GetDataValue<int>(dr, "id");
                        loanAccountingMovement.contract_id = base.GetDataValue<int>(dr, "contract_id");
                        loanAccountingMovement.debit_account_number_id = base.GetDataValue<int>(dr, "debit_account_number_id");
                        loanAccountingMovement.credit_account_number_id = base.GetDataValue<int>(dr, "credit_account_number_id");
                        loanAccountingMovement.amount = base.GetDataValue<decimal>(dr, "amount");
                        loanAccountingMovement.event_id = base.GetDataValue<int>(dr, "event_id");
                        loanAccountingMovement.transaction_date = base.GetDataValue<DateTime>(dr, "transaction_date");
                        loanAccountingMovement.export_date = base.GetDataValue<DateTime>(dr, "export_date");
                        loanAccountingMovement.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        loanAccountingMovement.currency_id = base.GetDataValue<int>(dr, "currency_id");
                        loanAccountingMovement.exchange_rate = base.GetDataValue<double>(dr, "exchange_rate");
                        loanAccountingMovement.rule_id = base.GetDataValue<int>(dr, "rule_id");
                        loanAccountingMovement.branch_id = base.GetDataValue<int>(dr, "branch_id");
                        loanAccountingMovement.closure_id = base.GetDataValue<int>(dr, "closure_id");
                        loanAccountingMovement.fiscal_year_id = base.GetDataValue<int>(dr, "fiscal_year_id");
                        loanAccountingMovement.booking_type = base.GetDataValue<int>(dr, "booking_type");

                        // Add to List.
                        result.Add(loanAccountingMovement);
                    }
                }
            }

            return result;
        }
    }
}

