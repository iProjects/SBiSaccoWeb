//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// TraceUserLogs data access component. Manages CRUD operations for the TraceUserLogs table.
    /// </summary>
    public partial class TraceUserLogDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TraceUserLogs table.
        /// </summary>
        /// <param name="traceUserLog">A TraceUserLog object.</param>
        /// <returns>An updated TraceUserLog object.</returns>
        public TraceUserLog Create(TraceUserLog traceUserLog)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TraceUserLogs ([event_code], [event_date], [user_id], [event_description]) " +
                "VALUES(@event_code, @event_date, @user_id, @event_description); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@event_code", DbType.String, traceUserLog.event_code);
                db.AddInParameter(cmd, "@event_date", DbType.DateTime, traceUserLog.event_date);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, traceUserLog.user_id);
                db.AddInParameter(cmd, "@event_description", DbType.String, traceUserLog.event_description);

                // Get the primary key value.
                traceUserLog.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return traceUserLog;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TraceUserLogs table.
        /// </summary>
        /// <returns>A collection of TraceUserLog objects.</returns>		
        public List<TraceUserLog> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [event_code], [event_date], [user_id], [event_description] " +
                "FROM dbo.TraceUserLogs ";

            List<TraceUserLog> result = new List<TraceUserLog>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TraceUserLog
                        TraceUserLog traceUserLog = new TraceUserLog();

                        // Read values.
                        traceUserLog.id = base.GetDataValue<int>(dr, "id");
                        traceUserLog.event_code = base.GetDataValue<string>(dr, "event_code");
                        traceUserLog.event_date = base.GetDataValue<DateTime>(dr, "event_date");
                        traceUserLog.user_id = base.GetDataValue<int>(dr, "user_id");
                        traceUserLog.event_description = base.GetDataValue<string>(dr, "event_description");

                        // Add to List.
                        result.Add(traceUserLog);
                    }
                }
            }

            return result;
        }
    }
}

