//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// TellerEvents data access component. Manages CRUD operations for the TellerEvents table.
    /// </summary>
    public partial class TellerEventDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TellerEvents table.
        /// </summary>
        /// <param name="tellerEvent">A TellerEvent object.</param>
        /// <returns>An updated TellerEvent object.</returns>
        public TellerEvent Create(TellerEvent tellerEvent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TellerEvents ([teller_id], [event_code], [amount], [date], [is_exported], [description], [user_id]) " +
                "VALUES(@teller_id, @event_code, @amount, @date, @is_exported, @description, @user_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@teller_id", DbType.Int32, tellerEvent.teller_id);
                db.AddInParameter(cmd, "@event_code", DbType.StringFixedLength, tellerEvent.event_code);
                db.AddInParameter(cmd, "@amount", DbType.Currency, tellerEvent.amount);
                db.AddInParameter(cmd, "@date", DbType.DateTime, tellerEvent.date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, tellerEvent.is_exported);
                db.AddInParameter(cmd, "@description", DbType.String, tellerEvent.description);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, tellerEvent.user_id);

                // Get the primary key value.
                tellerEvent.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return tellerEvent;
        }

        /// <summary>
        /// Updates an existing row in the TellerEvents table.
        /// </summary>
        /// <param name="tellerEvent">A TellerEvent entity object.</param>
        public void UpdateById(TellerEvent tellerEvent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TellerEvents " +
                "SET " +
                    "[teller_id]=@teller_id, " +
                    "[event_code]=@event_code, " +
                    "[amount]=@amount, " +
                    "[date]=@date, " +
                    "[is_exported]=@is_exported, " +
                    "[description]=@description, " +
                    "[user_id]=@user_id " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@teller_id", DbType.Int32, tellerEvent.teller_id);
                db.AddInParameter(cmd, "@event_code", DbType.StringFixedLength, tellerEvent.event_code);
                db.AddInParameter(cmd, "@amount", DbType.Currency, tellerEvent.amount);
                db.AddInParameter(cmd, "@date", DbType.DateTime, tellerEvent.date);
                db.AddInParameter(cmd, "@is_exported", DbType.Boolean, tellerEvent.is_exported);
                db.AddInParameter(cmd, "@description", DbType.String, tellerEvent.description);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, tellerEvent.user_id);
                db.AddInParameter(cmd, "@id", DbType.Int32, tellerEvent.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TellerEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TellerEvents " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TellerEvents table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A TellerEvent object with data populated from the database.</returns>
        public TellerEvent SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [teller_id], [event_code], [amount], [date], [is_exported], [description]" +
                        ", [user_id] " +
                "FROM dbo.TellerEvents  " +
                "WHERE [id]=@id ";

            TellerEvent tellerEvent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TellerEvent
                        tellerEvent = new TellerEvent();

                        // Read values.
                        tellerEvent.id = base.GetDataValue<int>(dr, "id");
                        tellerEvent.teller_id = base.GetDataValue<int>(dr, "teller_id");
                        tellerEvent.event_code = base.GetDataValue<string>(dr, "event_code");
                        tellerEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        tellerEvent.date = base.GetDataValue<DateTime>(dr, "date");
                        tellerEvent.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        tellerEvent.description = base.GetDataValue<string>(dr, "description");
                        tellerEvent.user_id = base.GetDataValue<int>(dr, "user_id");
                    }
                }
            }

            return tellerEvent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TellerEvents table.
        /// </summary>
        /// <returns>A collection of TellerEvent objects.</returns>		
        public List<TellerEvent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [teller_id], [event_code], [amount], [date], [is_exported], [description]" +
                        ", [user_id] " +
                "FROM dbo.TellerEvents ";

            List<TellerEvent> result = new List<TellerEvent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TellerEvent
                        TellerEvent tellerEvent = new TellerEvent();

                        // Read values.
                        tellerEvent.id = base.GetDataValue<int>(dr, "id");
                        tellerEvent.teller_id = base.GetDataValue<int>(dr, "teller_id");
                        tellerEvent.event_code = base.GetDataValue<string>(dr, "event_code");
                        tellerEvent.amount = base.GetDataValue<decimal>(dr, "amount");
                        tellerEvent.date = base.GetDataValue<DateTime>(dr, "date");
                        tellerEvent.is_exported = base.GetDataValue<bool>(dr, "is_exported");
                        tellerEvent.description = base.GetDataValue<string>(dr, "description");
                        tellerEvent.user_id = base.GetDataValue<int>(dr, "user_id");

                        // Add to List.
                        result.Add(tellerEvent);
                    }
                }
            }

            return result;
        }
    }
}

