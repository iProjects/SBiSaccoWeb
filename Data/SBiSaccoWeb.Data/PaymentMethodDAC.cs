//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:45 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// PaymentMethods data access component. Manages CRUD operations for the PaymentMethods table.
    /// </summary>
    public partial class PaymentMethodDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the PaymentMethods table.
        /// </summary>
        /// <param name="paymentMethod">A PaymentMethod object.</param>
        /// <returns>An updated PaymentMethod object.</returns>
        public PaymentMethod Create(PaymentMethod paymentMethod)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.PaymentMethods ([name], [description], [is_active_for_loans], [is_pending_for_loans], [is_active_for_savings], [is_pending_for_savings], [account_id], [is_deleted]) " +
                "VALUES(@name, @description, @is_active_for_loans, @is_pending_for_loans, @is_active_for_savings, @is_pending_for_savings, @account_id, @is_deleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, paymentMethod.name);
                db.AddInParameter(cmd, "@description", DbType.String, paymentMethod.description);
                db.AddInParameter(cmd, "@is_active_for_loans", DbType.Boolean, paymentMethod.is_active_for_loans);
                db.AddInParameter(cmd, "@is_pending_for_loans", DbType.Boolean, paymentMethod.is_pending_for_loans);
                db.AddInParameter(cmd, "@is_active_for_savings", DbType.Boolean, paymentMethod.is_active_for_savings);
                db.AddInParameter(cmd, "@is_pending_for_savings", DbType.Boolean, paymentMethod.is_pending_for_savings);
                db.AddInParameter(cmd, "@account_id", DbType.Int32, paymentMethod.account_id);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, paymentMethod.is_deleted);

                // Get the primary key value.
                paymentMethod.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return paymentMethod;
        }

        /// <summary>
        /// Updates an existing row in the PaymentMethods table.
        /// </summary>
        /// <param name="paymentMethod">A PaymentMethod entity object.</param>
        public void UpdateById(PaymentMethod paymentMethod)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.PaymentMethods " +
                "SET " +
                    "[name]=@name, " +
                    "[description]=@description, " +
                    "[is_active_for_loans]=@is_active_for_loans, " +
                    "[is_pending_for_loans]=@is_pending_for_loans, " +
                    "[is_active_for_savings]=@is_active_for_savings, " +
                    "[is_pending_for_savings]=@is_pending_for_savings, " +
                    "[account_id]=@account_id, " +
                    "[is_deleted]=@is_deleted " +
                "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@name", DbType.String, paymentMethod.name);
                db.AddInParameter(cmd, "@description", DbType.String, paymentMethod.description);
                db.AddInParameter(cmd, "@is_active_for_loans", DbType.Boolean, paymentMethod.is_active_for_loans);
                db.AddInParameter(cmd, "@is_pending_for_loans", DbType.Boolean, paymentMethod.is_pending_for_loans);
                db.AddInParameter(cmd, "@is_active_for_savings", DbType.Boolean, paymentMethod.is_active_for_savings);
                db.AddInParameter(cmd, "@is_pending_for_savings", DbType.Boolean, paymentMethod.is_pending_for_savings);
                db.AddInParameter(cmd, "@account_id", DbType.Int32, paymentMethod.account_id);
                db.AddInParameter(cmd, "@is_deleted", DbType.Boolean, paymentMethod.is_deleted);
                db.AddInParameter(cmd, "@id", DbType.Int32, paymentMethod.id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the PaymentMethods table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.PaymentMethods " +
                                         "WHERE [id]=@id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the PaymentMethods table.
        /// </summary>
        /// <param name="id">A id value.</param>
        /// <returns>A PaymentMethod object with data populated from the database.</returns>
        public PaymentMethod SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [id], [name], [description], [is_active_for_loans], [is_pending_for_loans], [is_active_for_savings]" +
                        ", [is_pending_for_savings], [account_id], [is_deleted] " +
                "FROM dbo.PaymentMethods  " +
                "WHERE [id]=@id ";

            PaymentMethod paymentMethod = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new PaymentMethod
                        paymentMethod = new PaymentMethod();

                        // Read values.
                        paymentMethod.id = base.GetDataValue<int>(dr, "id");
                        paymentMethod.name = base.GetDataValue<string>(dr, "name");
                        paymentMethod.description = base.GetDataValue<string>(dr, "description");
                        paymentMethod.is_active_for_loans = base.GetDataValue<bool>(dr, "is_active_for_loans");
                        paymentMethod.is_pending_for_loans = base.GetDataValue<bool>(dr, "is_pending_for_loans");
                        paymentMethod.is_active_for_savings = base.GetDataValue<bool>(dr, "is_active_for_savings");
                        paymentMethod.is_pending_for_savings = base.GetDataValue<bool>(dr, "is_pending_for_savings");
                        paymentMethod.account_id = base.GetDataValue<int>(dr, "account_id");
                        paymentMethod.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");
                    }
                }
            }

            return paymentMethod;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the PaymentMethods table.
        /// </summary>
        /// <returns>A collection of PaymentMethod objects.</returns>		
        public List<PaymentMethod> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [name], [description], [is_active_for_loans], [is_pending_for_loans], [is_active_for_savings]" +
                        ", [is_pending_for_savings], [account_id], [is_deleted] " +
                "FROM dbo.PaymentMethods ";

            List<PaymentMethod> result = new List<PaymentMethod>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new PaymentMethod
                        PaymentMethod paymentMethod = new PaymentMethod();

                        // Read values.
                        paymentMethod.id = base.GetDataValue<int>(dr, "id");
                        paymentMethod.name = base.GetDataValue<string>(dr, "name");
                        paymentMethod.description = base.GetDataValue<string>(dr, "description");
                        paymentMethod.is_active_for_loans = base.GetDataValue<bool>(dr, "is_active_for_loans");
                        paymentMethod.is_pending_for_loans = base.GetDataValue<bool>(dr, "is_pending_for_loans");
                        paymentMethod.is_active_for_savings = base.GetDataValue<bool>(dr, "is_active_for_savings");
                        paymentMethod.is_pending_for_savings = base.GetDataValue<bool>(dr, "is_pending_for_savings");
                        paymentMethod.account_id = base.GetDataValue<int>(dr, "account_id");
                        paymentMethod.is_deleted = base.GetDataValue<bool>(dr, "is_deleted");

                        // Add to List.
                        result.Add(paymentMethod);
                    }
                }
            }

            return result;
        }
    }
}

