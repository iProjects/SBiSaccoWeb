//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:44:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSaccoWeb.Entities;

namespace SBiSaccoWeb.Data
{
    /// <summary>
    /// ClientBranchHistory data access component. Manages CRUD operations for the ClientBranchHistory table.
    /// </summary>
    public partial class ClientBranchHistoryDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ClientBranchHistory table.
        /// </summary>
        /// <param name="clientBranchHistory">A ClientBranchHistory object.</param>
        /// <returns>An updated ClientBranchHistory object.</returns>
        public ClientBranchHistory Create(ClientBranchHistory clientBranchHistory)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ClientBranchHistory ([date_changed], [branch_from_id], [branch_to_id], [client_id], [user_id]) " +
                "VALUES(@date_changed, @branch_from_id, @branch_to_id, @client_id, @user_id); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@date_changed", DbType.DateTime, clientBranchHistory.date_changed);
                db.AddInParameter(cmd, "@branch_from_id", DbType.Int32, clientBranchHistory.branch_from_id);
                db.AddInParameter(cmd, "@branch_to_id", DbType.Int32, clientBranchHistory.branch_to_id);
                db.AddInParameter(cmd, "@client_id", DbType.Int32, clientBranchHistory.client_id);
                db.AddInParameter(cmd, "@user_id", DbType.Int32, clientBranchHistory.user_id);

                // Get the primary key value.
                clientBranchHistory.id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return clientBranchHistory;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ClientBranchHistory table.
        /// </summary>
        /// <returns>A collection of ClientBranchHistory objects.</returns>		
        public List<ClientBranchHistory> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [id], [date_changed], [branch_from_id], [branch_to_id], [client_id], [user_id] " +
                "FROM dbo.ClientBranchHistory ";

            List<ClientBranchHistory> result = new List<ClientBranchHistory>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ClientBranchHistory
                        ClientBranchHistory clientBranchHistory = new ClientBranchHistory();

                        // Read values.
                        clientBranchHistory.id = base.GetDataValue<int>(dr, "id");
                        clientBranchHistory.date_changed = base.GetDataValue<DateTime>(dr, "date_changed");
                        clientBranchHistory.branch_from_id = base.GetDataValue<int>(dr, "branch_from_id");
                        clientBranchHistory.branch_to_id = base.GetDataValue<int>(dr, "branch_to_id");
                        clientBranchHistory.client_id = base.GetDataValue<int>(dr, "client_id");
                        clientBranchHistory.user_id = base.GetDataValue<int>(dr, "user_id");

                        // Add to List.
                        result.Add(clientBranchHistory);
                    }
                }
            }

            return result;
        }
    }
}

